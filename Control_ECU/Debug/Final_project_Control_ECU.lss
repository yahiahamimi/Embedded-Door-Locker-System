
Final_project_Control_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003956  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000011a  00800060  00003956  000039ea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000015  0080017a  0080017a  00003b04  2**0
                  ALLOC
  3 .stab         000036e4  00000000  00000000  00003b04  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000015ca  00000000  00000000  000071e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  000087b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  00008952  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  00008b44  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0000af4f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000c2d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000d4ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000d66c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000d962  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000e2d0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 8b 19 	jmp	0x3316	; 0x3316 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 58 19 	jmp	0x32b0	; 0x32b0 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e5       	ldi	r30, 0x56	; 86
      68:	f9 e3       	ldi	r31, 0x39	; 57
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 37       	cpi	r26, 0x7A	; 122
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	aa e7       	ldi	r26, 0x7A	; 122
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	af 38       	cpi	r26, 0x8F	; 143
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 fc 15 	call	0x2bf8	; 0x2bf8 <main>
      8a:	0c 94 a9 1c 	jmp	0x3952	; 0x3952 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 2d 1c 	jmp	0x385a	; 0x385a <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 49 1c 	jmp	0x3892	; 0x3892 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 39 1c 	jmp	0x3872	; 0x3872 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 55 1c 	jmp	0x38aa	; 0x38aa <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 39 1c 	jmp	0x3872	; 0x3872 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 55 1c 	jmp	0x38aa	; 0x38aa <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 2d 1c 	jmp	0x385a	; 0x385a <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 49 1c 	jmp	0x3892	; 0x3892 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 35 1c 	jmp	0x386a	; 0x386a <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 51 1c 	jmp	0x38a2	; 0x38a2 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 39 1c 	jmp	0x3872	; 0x3872 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 55 1c 	jmp	0x38aa	; 0x38aa <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 39 1c 	jmp	0x3872	; 0x3872 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 55 1c 	jmp	0x38aa	; 0x38aa <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 39 1c 	jmp	0x3872	; 0x3872 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 55 1c 	jmp	0x38aa	; 0x38aa <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 3d 1c 	jmp	0x387a	; 0x387a <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 59 1c 	jmp	0x38b2	; 0x38b2 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 35 1c 	jmp	0x386a	; 0x386a <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 51 1c 	jmp	0x38a2	; 0x38a2 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e8 59       	subi	r30, 0x98	; 152
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <Buzzer_init>:
 */

#include"gpio.h"
#include"buzzer.h"

void Buzzer_init(){
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(BUZZER_PORT_ID,BUZZER_PIN_ID,PIN_OUTPUT);
     e36:	80 e0       	ldi	r24, 0x00	; 0
     e38:	60 e0       	ldi	r22, 0x00	; 0
     e3a:	41 e0       	ldi	r20, 0x01	; 1
     e3c:	0e 94 65 08 	call	0x10ca	; 0x10ca <GPIO_setupPinDirection>

	GPIO_writePin(BUZZER_PORT_ID,BUZZER_PIN_ID,LOGIC_LOW);
     e40:	80 e0       	ldi	r24, 0x00	; 0
     e42:	60 e0       	ldi	r22, 0x00	; 0
     e44:	40 e0       	ldi	r20, 0x00	; 0
     e46:	0e 94 50 09 	call	0x12a0	; 0x12a0 <GPIO_writePin>
}
     e4a:	cf 91       	pop	r28
     e4c:	df 91       	pop	r29
     e4e:	08 95       	ret

00000e50 <Buzzer_on>:

void Buzzer_on(void){
     e50:	df 93       	push	r29
     e52:	cf 93       	push	r28
     e54:	cd b7       	in	r28, 0x3d	; 61
     e56:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID,BUZZER_PIN_ID,LOGIC_HIGH);
     e58:	80 e0       	ldi	r24, 0x00	; 0
     e5a:	60 e0       	ldi	r22, 0x00	; 0
     e5c:	41 e0       	ldi	r20, 0x01	; 1
     e5e:	0e 94 50 09 	call	0x12a0	; 0x12a0 <GPIO_writePin>
}
     e62:	cf 91       	pop	r28
     e64:	df 91       	pop	r29
     e66:	08 95       	ret

00000e68 <Buzzer_off>:

void Buzzer_off(void){
     e68:	df 93       	push	r29
     e6a:	cf 93       	push	r28
     e6c:	cd b7       	in	r28, 0x3d	; 61
     e6e:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID,BUZZER_PIN_ID,LOGIC_LOW);
     e70:	80 e0       	ldi	r24, 0x00	; 0
     e72:	60 e0       	ldi	r22, 0x00	; 0
     e74:	40 e0       	ldi	r20, 0x00	; 0
     e76:	0e 94 50 09 	call	0x12a0	; 0x12a0 <GPIO_writePin>
}
     e7a:	cf 91       	pop	r28
     e7c:	df 91       	pop	r29
     e7e:	08 95       	ret

00000e80 <DcMotor_Init>:
uint8 g_dutyCycle;

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void DcMotor_Init(void){
     e80:	df 93       	push	r29
     e82:	cf 93       	push	r28
     e84:	cd b7       	in	r28, 0x3d	; 61
     e86:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(DC_MOTOR_IN1_PORT_ID,DC_MOTOR_IN1_PIN_ID,PIN_OUTPUT);
     e88:	81 e0       	ldi	r24, 0x01	; 1
     e8a:	60 e0       	ldi	r22, 0x00	; 0
     e8c:	41 e0       	ldi	r20, 0x01	; 1
     e8e:	0e 94 65 08 	call	0x10ca	; 0x10ca <GPIO_setupPinDirection>
	GPIO_setupPinDirection(DC_MOTOR_IN2_PORT_ID,DC_MOTOR_IN2_PIN_ID,PIN_OUTPUT);
     e92:	81 e0       	ldi	r24, 0x01	; 1
     e94:	61 e0       	ldi	r22, 0x01	; 1
     e96:	41 e0       	ldi	r20, 0x01	; 1
     e98:	0e 94 65 08 	call	0x10ca	; 0x10ca <GPIO_setupPinDirection>

	GPIO_writePin(DC_MOTOR_IN1_PORT_ID,DC_MOTOR_IN1_PIN_ID,LOGIC_LOW);
     e9c:	81 e0       	ldi	r24, 0x01	; 1
     e9e:	60 e0       	ldi	r22, 0x00	; 0
     ea0:	40 e0       	ldi	r20, 0x00	; 0
     ea2:	0e 94 50 09 	call	0x12a0	; 0x12a0 <GPIO_writePin>
	GPIO_writePin(DC_MOTOR_IN2_PORT_ID,DC_MOTOR_IN2_PIN_ID,LOGIC_LOW);
     ea6:	81 e0       	ldi	r24, 0x01	; 1
     ea8:	61 e0       	ldi	r22, 0x01	; 1
     eaa:	40 e0       	ldi	r20, 0x00	; 0
     eac:	0e 94 50 09 	call	0x12a0	; 0x12a0 <GPIO_writePin>
}
     eb0:	cf 91       	pop	r28
     eb2:	df 91       	pop	r29
     eb4:	08 95       	ret

00000eb6 <DcMotor_Rotate>:
void DcMotor_Rotate(DcMotor_State state,uint8 speed){
     eb6:	df 93       	push	r29
     eb8:	cf 93       	push	r28
     eba:	00 d0       	rcall	.+0      	; 0xebc <DcMotor_Rotate+0x6>
     ebc:	00 d0       	rcall	.+0      	; 0xebe <DcMotor_Rotate+0x8>
     ebe:	cd b7       	in	r28, 0x3d	; 61
     ec0:	de b7       	in	r29, 0x3e	; 62
     ec2:	89 83       	std	Y+1, r24	; 0x01
     ec4:	6a 83       	std	Y+2, r22	; 0x02
	switch(state){
     ec6:	89 81       	ldd	r24, Y+1	; 0x01
     ec8:	28 2f       	mov	r18, r24
     eca:	30 e0       	ldi	r19, 0x00	; 0
     ecc:	3c 83       	std	Y+4, r19	; 0x04
     ece:	2b 83       	std	Y+3, r18	; 0x03
     ed0:	8b 81       	ldd	r24, Y+3	; 0x03
     ed2:	9c 81       	ldd	r25, Y+4	; 0x04
     ed4:	81 30       	cpi	r24, 0x01	; 1
     ed6:	91 05       	cpc	r25, r1
     ed8:	a1 f0       	breq	.+40     	; 0xf02 <DcMotor_Rotate+0x4c>
     eda:	2b 81       	ldd	r18, Y+3	; 0x03
     edc:	3c 81       	ldd	r19, Y+4	; 0x04
     ede:	22 30       	cpi	r18, 0x02	; 2
     ee0:	31 05       	cpc	r19, r1
     ee2:	d1 f0       	breq	.+52     	; 0xf18 <DcMotor_Rotate+0x62>
     ee4:	8b 81       	ldd	r24, Y+3	; 0x03
     ee6:	9c 81       	ldd	r25, Y+4	; 0x04
     ee8:	00 97       	sbiw	r24, 0x00	; 0
     eea:	01 f5       	brne	.+64     	; 0xf2c <DcMotor_Rotate+0x76>
	case Stop:
		GPIO_writePin(DC_MOTOR_IN1_PORT_ID,DC_MOTOR_IN1_PIN_ID,LOGIC_LOW);
     eec:	81 e0       	ldi	r24, 0x01	; 1
     eee:	60 e0       	ldi	r22, 0x00	; 0
     ef0:	40 e0       	ldi	r20, 0x00	; 0
     ef2:	0e 94 50 09 	call	0x12a0	; 0x12a0 <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_IN2_PORT_ID,DC_MOTOR_IN2_PIN_ID,LOGIC_LOW);
     ef6:	81 e0       	ldi	r24, 0x01	; 1
     ef8:	61 e0       	ldi	r22, 0x01	; 1
     efa:	40 e0       	ldi	r20, 0x00	; 0
     efc:	0e 94 50 09 	call	0x12a0	; 0x12a0 <GPIO_writePin>
     f00:	15 c0       	rjmp	.+42     	; 0xf2c <DcMotor_Rotate+0x76>
		break;
	case CW:
		GPIO_writePin(DC_MOTOR_IN1_PORT_ID,DC_MOTOR_IN1_PIN_ID,LOGIC_LOW);
     f02:	81 e0       	ldi	r24, 0x01	; 1
     f04:	60 e0       	ldi	r22, 0x00	; 0
     f06:	40 e0       	ldi	r20, 0x00	; 0
     f08:	0e 94 50 09 	call	0x12a0	; 0x12a0 <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_IN2_PORT_ID,DC_MOTOR_IN2_PIN_ID,LOGIC_HIGH);
     f0c:	81 e0       	ldi	r24, 0x01	; 1
     f0e:	61 e0       	ldi	r22, 0x01	; 1
     f10:	41 e0       	ldi	r20, 0x01	; 1
     f12:	0e 94 50 09 	call	0x12a0	; 0x12a0 <GPIO_writePin>
     f16:	0a c0       	rjmp	.+20     	; 0xf2c <DcMotor_Rotate+0x76>
		break;
	case A_CW:
		GPIO_writePin(DC_MOTOR_IN1_PORT_ID,DC_MOTOR_IN1_PIN_ID,LOGIC_HIGH);
     f18:	81 e0       	ldi	r24, 0x01	; 1
     f1a:	60 e0       	ldi	r22, 0x00	; 0
     f1c:	41 e0       	ldi	r20, 0x01	; 1
     f1e:	0e 94 50 09 	call	0x12a0	; 0x12a0 <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_IN2_PORT_ID,DC_MOTOR_IN2_PIN_ID,LOGIC_LOW);
     f22:	81 e0       	ldi	r24, 0x01	; 1
     f24:	61 e0       	ldi	r22, 0x01	; 1
     f26:	40 e0       	ldi	r20, 0x00	; 0
     f28:	0e 94 50 09 	call	0x12a0	; 0x12a0 <GPIO_writePin>
		break;
	}
	/* calculate the duty cycle based on the speed
	multiply by 255 as it is the maximum value for the timer*/
	g_dutyCycle = ((float)speed / 100)*255;
     f2c:	8a 81       	ldd	r24, Y+2	; 0x02
     f2e:	88 2f       	mov	r24, r24
     f30:	90 e0       	ldi	r25, 0x00	; 0
     f32:	a0 e0       	ldi	r26, 0x00	; 0
     f34:	b0 e0       	ldi	r27, 0x00	; 0
     f36:	bc 01       	movw	r22, r24
     f38:	cd 01       	movw	r24, r26
     f3a:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
     f3e:	dc 01       	movw	r26, r24
     f40:	cb 01       	movw	r24, r22
     f42:	bc 01       	movw	r22, r24
     f44:	cd 01       	movw	r24, r26
     f46:	20 e0       	ldi	r18, 0x00	; 0
     f48:	30 e0       	ldi	r19, 0x00	; 0
     f4a:	48 ec       	ldi	r20, 0xC8	; 200
     f4c:	52 e4       	ldi	r21, 0x42	; 66
     f4e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
     f52:	dc 01       	movw	r26, r24
     f54:	cb 01       	movw	r24, r22
     f56:	bc 01       	movw	r22, r24
     f58:	cd 01       	movw	r24, r26
     f5a:	20 e0       	ldi	r18, 0x00	; 0
     f5c:	30 e0       	ldi	r19, 0x00	; 0
     f5e:	4f e7       	ldi	r20, 0x7F	; 127
     f60:	53 e4       	ldi	r21, 0x43	; 67
     f62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f66:	dc 01       	movw	r26, r24
     f68:	cb 01       	movw	r24, r22
     f6a:	bc 01       	movw	r22, r24
     f6c:	cd 01       	movw	r24, r26
     f6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f72:	dc 01       	movw	r26, r24
     f74:	cb 01       	movw	r24, r22
     f76:	80 93 7e 01 	sts	0x017E, r24
}
     f7a:	0f 90       	pop	r0
     f7c:	0f 90       	pop	r0
     f7e:	0f 90       	pop	r0
     f80:	0f 90       	pop	r0
     f82:	cf 91       	pop	r28
     f84:	df 91       	pop	r29
     f86:	08 95       	ret

00000f88 <EEPROM_writeByte>:
 *******************************************************************************/
#include "external_eeprom.h"
#include "twi.h"

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
     f88:	df 93       	push	r29
     f8a:	cf 93       	push	r28
     f8c:	00 d0       	rcall	.+0      	; 0xf8e <EEPROM_writeByte+0x6>
     f8e:	00 d0       	rcall	.+0      	; 0xf90 <EEPROM_writeByte+0x8>
     f90:	cd b7       	in	r28, 0x3d	; 61
     f92:	de b7       	in	r29, 0x3e	; 62
     f94:	9a 83       	std	Y+2, r25	; 0x02
     f96:	89 83       	std	Y+1, r24	; 0x01
     f98:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
     f9a:	0e 94 76 1a 	call	0x34ec	; 0x34ec <TWI_start>
    if (TWI_getStatus() != TWI_START)
     f9e:	0e 94 ce 1a 	call	0x359c	; 0x359c <TWI_getStatus>
     fa2:	88 30       	cpi	r24, 0x08	; 8
     fa4:	11 f0       	breq	.+4      	; 0xfaa <EEPROM_writeByte+0x22>
        return ERROR;
     fa6:	1c 82       	std	Y+4, r1	; 0x04
     fa8:	28 c0       	rjmp	.+80     	; 0xffa <EEPROM_writeByte+0x72>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
     faa:	89 81       	ldd	r24, Y+1	; 0x01
     fac:	9a 81       	ldd	r25, Y+2	; 0x02
     fae:	80 70       	andi	r24, 0x00	; 0
     fb0:	97 70       	andi	r25, 0x07	; 7
     fb2:	88 0f       	add	r24, r24
     fb4:	89 2f       	mov	r24, r25
     fb6:	88 1f       	adc	r24, r24
     fb8:	99 0b       	sbc	r25, r25
     fba:	91 95       	neg	r25
     fbc:	80 6a       	ori	r24, 0xA0	; 160
     fbe:	0e 94 91 1a 	call	0x3522	; 0x3522 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
     fc2:	0e 94 ce 1a 	call	0x359c	; 0x359c <TWI_getStatus>
     fc6:	88 31       	cpi	r24, 0x18	; 24
     fc8:	11 f0       	breq	.+4      	; 0xfce <EEPROM_writeByte+0x46>
        return ERROR; 
     fca:	1c 82       	std	Y+4, r1	; 0x04
     fcc:	16 c0       	rjmp	.+44     	; 0xffa <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
     fce:	89 81       	ldd	r24, Y+1	; 0x01
     fd0:	0e 94 91 1a 	call	0x3522	; 0x3522 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
     fd4:	0e 94 ce 1a 	call	0x359c	; 0x359c <TWI_getStatus>
     fd8:	88 32       	cpi	r24, 0x28	; 40
     fda:	11 f0       	breq	.+4      	; 0xfe0 <EEPROM_writeByte+0x58>
        return ERROR;
     fdc:	1c 82       	std	Y+4, r1	; 0x04
     fde:	0d c0       	rjmp	.+26     	; 0xffa <EEPROM_writeByte+0x72>
		
    /* write byte to eeprom */
    TWI_writeByte(u8data);
     fe0:	8b 81       	ldd	r24, Y+3	; 0x03
     fe2:	0e 94 91 1a 	call	0x3522	; 0x3522 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
     fe6:	0e 94 ce 1a 	call	0x359c	; 0x359c <TWI_getStatus>
     fea:	88 32       	cpi	r24, 0x28	; 40
     fec:	11 f0       	breq	.+4      	; 0xff2 <EEPROM_writeByte+0x6a>
        return ERROR;
     fee:	1c 82       	std	Y+4, r1	; 0x04
     ff0:	04 c0       	rjmp	.+8      	; 0xffa <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
     ff2:	0e 94 86 1a 	call	0x350c	; 0x350c <TWI_stop>
	
    return SUCCESS;
     ff6:	81 e0       	ldi	r24, 0x01	; 1
     ff8:	8c 83       	std	Y+4, r24	; 0x04
     ffa:	8c 81       	ldd	r24, Y+4	; 0x04
}
     ffc:	0f 90       	pop	r0
     ffe:	0f 90       	pop	r0
    1000:	0f 90       	pop	r0
    1002:	0f 90       	pop	r0
    1004:	cf 91       	pop	r28
    1006:	df 91       	pop	r29
    1008:	08 95       	ret

0000100a <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    100a:	df 93       	push	r29
    100c:	cf 93       	push	r28
    100e:	00 d0       	rcall	.+0      	; 0x1010 <EEPROM_readByte+0x6>
    1010:	00 d0       	rcall	.+0      	; 0x1012 <EEPROM_readByte+0x8>
    1012:	0f 92       	push	r0
    1014:	cd b7       	in	r28, 0x3d	; 61
    1016:	de b7       	in	r29, 0x3e	; 62
    1018:	9a 83       	std	Y+2, r25	; 0x02
    101a:	89 83       	std	Y+1, r24	; 0x01
    101c:	7c 83       	std	Y+4, r23	; 0x04
    101e:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    1020:	0e 94 76 1a 	call	0x34ec	; 0x34ec <TWI_start>
    if (TWI_getStatus() != TWI_START)
    1024:	0e 94 ce 1a 	call	0x359c	; 0x359c <TWI_getStatus>
    1028:	88 30       	cpi	r24, 0x08	; 8
    102a:	11 f0       	breq	.+4      	; 0x1030 <EEPROM_readByte+0x26>
        return ERROR;
    102c:	1d 82       	std	Y+5, r1	; 0x05
    102e:	44 c0       	rjmp	.+136    	; 0x10b8 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    1030:	89 81       	ldd	r24, Y+1	; 0x01
    1032:	9a 81       	ldd	r25, Y+2	; 0x02
    1034:	80 70       	andi	r24, 0x00	; 0
    1036:	97 70       	andi	r25, 0x07	; 7
    1038:	88 0f       	add	r24, r24
    103a:	89 2f       	mov	r24, r25
    103c:	88 1f       	adc	r24, r24
    103e:	99 0b       	sbc	r25, r25
    1040:	91 95       	neg	r25
    1042:	80 6a       	ori	r24, 0xA0	; 160
    1044:	0e 94 91 1a 	call	0x3522	; 0x3522 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    1048:	0e 94 ce 1a 	call	0x359c	; 0x359c <TWI_getStatus>
    104c:	88 31       	cpi	r24, 0x18	; 24
    104e:	11 f0       	breq	.+4      	; 0x1054 <EEPROM_readByte+0x4a>
        return ERROR;
    1050:	1d 82       	std	Y+5, r1	; 0x05
    1052:	32 c0       	rjmp	.+100    	; 0x10b8 <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    1054:	89 81       	ldd	r24, Y+1	; 0x01
    1056:	0e 94 91 1a 	call	0x3522	; 0x3522 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    105a:	0e 94 ce 1a 	call	0x359c	; 0x359c <TWI_getStatus>
    105e:	88 32       	cpi	r24, 0x28	; 40
    1060:	11 f0       	breq	.+4      	; 0x1066 <EEPROM_readByte+0x5c>
        return ERROR;
    1062:	1d 82       	std	Y+5, r1	; 0x05
    1064:	29 c0       	rjmp	.+82     	; 0x10b8 <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    TWI_start();
    1066:	0e 94 76 1a 	call	0x34ec	; 0x34ec <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
    106a:	0e 94 ce 1a 	call	0x359c	; 0x359c <TWI_getStatus>
    106e:	80 31       	cpi	r24, 0x10	; 16
    1070:	11 f0       	breq	.+4      	; 0x1076 <EEPROM_readByte+0x6c>
        return ERROR;
    1072:	1d 82       	std	Y+5, r1	; 0x05
    1074:	21 c0       	rjmp	.+66     	; 0x10b8 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    1076:	89 81       	ldd	r24, Y+1	; 0x01
    1078:	9a 81       	ldd	r25, Y+2	; 0x02
    107a:	80 70       	andi	r24, 0x00	; 0
    107c:	97 70       	andi	r25, 0x07	; 7
    107e:	88 0f       	add	r24, r24
    1080:	89 2f       	mov	r24, r25
    1082:	88 1f       	adc	r24, r24
    1084:	99 0b       	sbc	r25, r25
    1086:	91 95       	neg	r25
    1088:	81 6a       	ori	r24, 0xA1	; 161
    108a:	0e 94 91 1a 	call	0x3522	; 0x3522 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    108e:	0e 94 ce 1a 	call	0x359c	; 0x359c <TWI_getStatus>
    1092:	80 34       	cpi	r24, 0x40	; 64
    1094:	11 f0       	breq	.+4      	; 0x109a <EEPROM_readByte+0x90>
        return ERROR;
    1096:	1d 82       	std	Y+5, r1	; 0x05
    1098:	0f c0       	rjmp	.+30     	; 0x10b8 <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
    109a:	0e 94 bb 1a 	call	0x3576	; 0x3576 <TWI_readByteWithNACK>
    109e:	eb 81       	ldd	r30, Y+3	; 0x03
    10a0:	fc 81       	ldd	r31, Y+4	; 0x04
    10a2:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
    10a4:	0e 94 ce 1a 	call	0x359c	; 0x359c <TWI_getStatus>
    10a8:	88 35       	cpi	r24, 0x58	; 88
    10aa:	11 f0       	breq	.+4      	; 0x10b0 <EEPROM_readByte+0xa6>
        return ERROR;
    10ac:	1d 82       	std	Y+5, r1	; 0x05
    10ae:	04 c0       	rjmp	.+8      	; 0x10b8 <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    10b0:	0e 94 86 1a 	call	0x350c	; 0x350c <TWI_stop>

    return SUCCESS;
    10b4:	81 e0       	ldi	r24, 0x01	; 1
    10b6:	8d 83       	std	Y+5, r24	; 0x05
    10b8:	8d 81       	ldd	r24, Y+5	; 0x05
}
    10ba:	0f 90       	pop	r0
    10bc:	0f 90       	pop	r0
    10be:	0f 90       	pop	r0
    10c0:	0f 90       	pop	r0
    10c2:	0f 90       	pop	r0
    10c4:	cf 91       	pop	r28
    10c6:	df 91       	pop	r29
    10c8:	08 95       	ret

000010ca <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    10ca:	df 93       	push	r29
    10cc:	cf 93       	push	r28
    10ce:	00 d0       	rcall	.+0      	; 0x10d0 <GPIO_setupPinDirection+0x6>
    10d0:	00 d0       	rcall	.+0      	; 0x10d2 <GPIO_setupPinDirection+0x8>
    10d2:	0f 92       	push	r0
    10d4:	cd b7       	in	r28, 0x3d	; 61
    10d6:	de b7       	in	r29, 0x3e	; 62
    10d8:	89 83       	std	Y+1, r24	; 0x01
    10da:	6a 83       	std	Y+2, r22	; 0x02
    10dc:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if ((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    10de:	8a 81       	ldd	r24, Y+2	; 0x02
    10e0:	88 30       	cpi	r24, 0x08	; 8
    10e2:	08 f0       	brcs	.+2      	; 0x10e6 <GPIO_setupPinDirection+0x1c>
    10e4:	d5 c0       	rjmp	.+426    	; 0x1290 <GPIO_setupPinDirection+0x1c6>
    10e6:	89 81       	ldd	r24, Y+1	; 0x01
    10e8:	84 30       	cpi	r24, 0x04	; 4
    10ea:	08 f0       	brcs	.+2      	; 0x10ee <GPIO_setupPinDirection+0x24>
    10ec:	d1 c0       	rjmp	.+418    	; 0x1290 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch (port_num)
    10ee:	89 81       	ldd	r24, Y+1	; 0x01
    10f0:	28 2f       	mov	r18, r24
    10f2:	30 e0       	ldi	r19, 0x00	; 0
    10f4:	3d 83       	std	Y+5, r19	; 0x05
    10f6:	2c 83       	std	Y+4, r18	; 0x04
    10f8:	8c 81       	ldd	r24, Y+4	; 0x04
    10fa:	9d 81       	ldd	r25, Y+5	; 0x05
    10fc:	81 30       	cpi	r24, 0x01	; 1
    10fe:	91 05       	cpc	r25, r1
    1100:	09 f4       	brne	.+2      	; 0x1104 <GPIO_setupPinDirection+0x3a>
    1102:	43 c0       	rjmp	.+134    	; 0x118a <GPIO_setupPinDirection+0xc0>
    1104:	2c 81       	ldd	r18, Y+4	; 0x04
    1106:	3d 81       	ldd	r19, Y+5	; 0x05
    1108:	22 30       	cpi	r18, 0x02	; 2
    110a:	31 05       	cpc	r19, r1
    110c:	2c f4       	brge	.+10     	; 0x1118 <GPIO_setupPinDirection+0x4e>
    110e:	8c 81       	ldd	r24, Y+4	; 0x04
    1110:	9d 81       	ldd	r25, Y+5	; 0x05
    1112:	00 97       	sbiw	r24, 0x00	; 0
    1114:	71 f0       	breq	.+28     	; 0x1132 <GPIO_setupPinDirection+0x68>
    1116:	bc c0       	rjmp	.+376    	; 0x1290 <GPIO_setupPinDirection+0x1c6>
    1118:	2c 81       	ldd	r18, Y+4	; 0x04
    111a:	3d 81       	ldd	r19, Y+5	; 0x05
    111c:	22 30       	cpi	r18, 0x02	; 2
    111e:	31 05       	cpc	r19, r1
    1120:	09 f4       	brne	.+2      	; 0x1124 <GPIO_setupPinDirection+0x5a>
    1122:	5f c0       	rjmp	.+190    	; 0x11e2 <GPIO_setupPinDirection+0x118>
    1124:	8c 81       	ldd	r24, Y+4	; 0x04
    1126:	9d 81       	ldd	r25, Y+5	; 0x05
    1128:	83 30       	cpi	r24, 0x03	; 3
    112a:	91 05       	cpc	r25, r1
    112c:	09 f4       	brne	.+2      	; 0x1130 <GPIO_setupPinDirection+0x66>
    112e:	85 c0       	rjmp	.+266    	; 0x123a <GPIO_setupPinDirection+0x170>
    1130:	af c0       	rjmp	.+350    	; 0x1290 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if (direction == PIN_OUTPUT)
    1132:	8b 81       	ldd	r24, Y+3	; 0x03
    1134:	81 30       	cpi	r24, 0x01	; 1
    1136:	a1 f4       	brne	.+40     	; 0x1160 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA, pin_num);
    1138:	aa e3       	ldi	r26, 0x3A	; 58
    113a:	b0 e0       	ldi	r27, 0x00	; 0
    113c:	ea e3       	ldi	r30, 0x3A	; 58
    113e:	f0 e0       	ldi	r31, 0x00	; 0
    1140:	80 81       	ld	r24, Z
    1142:	48 2f       	mov	r20, r24
    1144:	8a 81       	ldd	r24, Y+2	; 0x02
    1146:	28 2f       	mov	r18, r24
    1148:	30 e0       	ldi	r19, 0x00	; 0
    114a:	81 e0       	ldi	r24, 0x01	; 1
    114c:	90 e0       	ldi	r25, 0x00	; 0
    114e:	02 2e       	mov	r0, r18
    1150:	02 c0       	rjmp	.+4      	; 0x1156 <GPIO_setupPinDirection+0x8c>
    1152:	88 0f       	add	r24, r24
    1154:	99 1f       	adc	r25, r25
    1156:	0a 94       	dec	r0
    1158:	e2 f7       	brpl	.-8      	; 0x1152 <GPIO_setupPinDirection+0x88>
    115a:	84 2b       	or	r24, r20
    115c:	8c 93       	st	X, r24
    115e:	98 c0       	rjmp	.+304    	; 0x1290 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA, pin_num);
    1160:	aa e3       	ldi	r26, 0x3A	; 58
    1162:	b0 e0       	ldi	r27, 0x00	; 0
    1164:	ea e3       	ldi	r30, 0x3A	; 58
    1166:	f0 e0       	ldi	r31, 0x00	; 0
    1168:	80 81       	ld	r24, Z
    116a:	48 2f       	mov	r20, r24
    116c:	8a 81       	ldd	r24, Y+2	; 0x02
    116e:	28 2f       	mov	r18, r24
    1170:	30 e0       	ldi	r19, 0x00	; 0
    1172:	81 e0       	ldi	r24, 0x01	; 1
    1174:	90 e0       	ldi	r25, 0x00	; 0
    1176:	02 2e       	mov	r0, r18
    1178:	02 c0       	rjmp	.+4      	; 0x117e <GPIO_setupPinDirection+0xb4>
    117a:	88 0f       	add	r24, r24
    117c:	99 1f       	adc	r25, r25
    117e:	0a 94       	dec	r0
    1180:	e2 f7       	brpl	.-8      	; 0x117a <GPIO_setupPinDirection+0xb0>
    1182:	80 95       	com	r24
    1184:	84 23       	and	r24, r20
    1186:	8c 93       	st	X, r24
    1188:	83 c0       	rjmp	.+262    	; 0x1290 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if (direction == PIN_OUTPUT)
    118a:	8b 81       	ldd	r24, Y+3	; 0x03
    118c:	81 30       	cpi	r24, 0x01	; 1
    118e:	a1 f4       	brne	.+40     	; 0x11b8 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB, pin_num);
    1190:	a7 e3       	ldi	r26, 0x37	; 55
    1192:	b0 e0       	ldi	r27, 0x00	; 0
    1194:	e7 e3       	ldi	r30, 0x37	; 55
    1196:	f0 e0       	ldi	r31, 0x00	; 0
    1198:	80 81       	ld	r24, Z
    119a:	48 2f       	mov	r20, r24
    119c:	8a 81       	ldd	r24, Y+2	; 0x02
    119e:	28 2f       	mov	r18, r24
    11a0:	30 e0       	ldi	r19, 0x00	; 0
    11a2:	81 e0       	ldi	r24, 0x01	; 1
    11a4:	90 e0       	ldi	r25, 0x00	; 0
    11a6:	02 2e       	mov	r0, r18
    11a8:	02 c0       	rjmp	.+4      	; 0x11ae <GPIO_setupPinDirection+0xe4>
    11aa:	88 0f       	add	r24, r24
    11ac:	99 1f       	adc	r25, r25
    11ae:	0a 94       	dec	r0
    11b0:	e2 f7       	brpl	.-8      	; 0x11aa <GPIO_setupPinDirection+0xe0>
    11b2:	84 2b       	or	r24, r20
    11b4:	8c 93       	st	X, r24
    11b6:	6c c0       	rjmp	.+216    	; 0x1290 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB, pin_num);
    11b8:	a7 e3       	ldi	r26, 0x37	; 55
    11ba:	b0 e0       	ldi	r27, 0x00	; 0
    11bc:	e7 e3       	ldi	r30, 0x37	; 55
    11be:	f0 e0       	ldi	r31, 0x00	; 0
    11c0:	80 81       	ld	r24, Z
    11c2:	48 2f       	mov	r20, r24
    11c4:	8a 81       	ldd	r24, Y+2	; 0x02
    11c6:	28 2f       	mov	r18, r24
    11c8:	30 e0       	ldi	r19, 0x00	; 0
    11ca:	81 e0       	ldi	r24, 0x01	; 1
    11cc:	90 e0       	ldi	r25, 0x00	; 0
    11ce:	02 2e       	mov	r0, r18
    11d0:	02 c0       	rjmp	.+4      	; 0x11d6 <GPIO_setupPinDirection+0x10c>
    11d2:	88 0f       	add	r24, r24
    11d4:	99 1f       	adc	r25, r25
    11d6:	0a 94       	dec	r0
    11d8:	e2 f7       	brpl	.-8      	; 0x11d2 <GPIO_setupPinDirection+0x108>
    11da:	80 95       	com	r24
    11dc:	84 23       	and	r24, r20
    11de:	8c 93       	st	X, r24
    11e0:	57 c0       	rjmp	.+174    	; 0x1290 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if (direction == PIN_OUTPUT)
    11e2:	8b 81       	ldd	r24, Y+3	; 0x03
    11e4:	81 30       	cpi	r24, 0x01	; 1
    11e6:	a1 f4       	brne	.+40     	; 0x1210 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC, pin_num);
    11e8:	a4 e3       	ldi	r26, 0x34	; 52
    11ea:	b0 e0       	ldi	r27, 0x00	; 0
    11ec:	e4 e3       	ldi	r30, 0x34	; 52
    11ee:	f0 e0       	ldi	r31, 0x00	; 0
    11f0:	80 81       	ld	r24, Z
    11f2:	48 2f       	mov	r20, r24
    11f4:	8a 81       	ldd	r24, Y+2	; 0x02
    11f6:	28 2f       	mov	r18, r24
    11f8:	30 e0       	ldi	r19, 0x00	; 0
    11fa:	81 e0       	ldi	r24, 0x01	; 1
    11fc:	90 e0       	ldi	r25, 0x00	; 0
    11fe:	02 2e       	mov	r0, r18
    1200:	02 c0       	rjmp	.+4      	; 0x1206 <GPIO_setupPinDirection+0x13c>
    1202:	88 0f       	add	r24, r24
    1204:	99 1f       	adc	r25, r25
    1206:	0a 94       	dec	r0
    1208:	e2 f7       	brpl	.-8      	; 0x1202 <GPIO_setupPinDirection+0x138>
    120a:	84 2b       	or	r24, r20
    120c:	8c 93       	st	X, r24
    120e:	40 c0       	rjmp	.+128    	; 0x1290 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC, pin_num);
    1210:	a4 e3       	ldi	r26, 0x34	; 52
    1212:	b0 e0       	ldi	r27, 0x00	; 0
    1214:	e4 e3       	ldi	r30, 0x34	; 52
    1216:	f0 e0       	ldi	r31, 0x00	; 0
    1218:	80 81       	ld	r24, Z
    121a:	48 2f       	mov	r20, r24
    121c:	8a 81       	ldd	r24, Y+2	; 0x02
    121e:	28 2f       	mov	r18, r24
    1220:	30 e0       	ldi	r19, 0x00	; 0
    1222:	81 e0       	ldi	r24, 0x01	; 1
    1224:	90 e0       	ldi	r25, 0x00	; 0
    1226:	02 2e       	mov	r0, r18
    1228:	02 c0       	rjmp	.+4      	; 0x122e <GPIO_setupPinDirection+0x164>
    122a:	88 0f       	add	r24, r24
    122c:	99 1f       	adc	r25, r25
    122e:	0a 94       	dec	r0
    1230:	e2 f7       	brpl	.-8      	; 0x122a <GPIO_setupPinDirection+0x160>
    1232:	80 95       	com	r24
    1234:	84 23       	and	r24, r20
    1236:	8c 93       	st	X, r24
    1238:	2b c0       	rjmp	.+86     	; 0x1290 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if (direction == PIN_OUTPUT)
    123a:	8b 81       	ldd	r24, Y+3	; 0x03
    123c:	81 30       	cpi	r24, 0x01	; 1
    123e:	a1 f4       	brne	.+40     	; 0x1268 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD, pin_num);
    1240:	a1 e3       	ldi	r26, 0x31	; 49
    1242:	b0 e0       	ldi	r27, 0x00	; 0
    1244:	e1 e3       	ldi	r30, 0x31	; 49
    1246:	f0 e0       	ldi	r31, 0x00	; 0
    1248:	80 81       	ld	r24, Z
    124a:	48 2f       	mov	r20, r24
    124c:	8a 81       	ldd	r24, Y+2	; 0x02
    124e:	28 2f       	mov	r18, r24
    1250:	30 e0       	ldi	r19, 0x00	; 0
    1252:	81 e0       	ldi	r24, 0x01	; 1
    1254:	90 e0       	ldi	r25, 0x00	; 0
    1256:	02 2e       	mov	r0, r18
    1258:	02 c0       	rjmp	.+4      	; 0x125e <GPIO_setupPinDirection+0x194>
    125a:	88 0f       	add	r24, r24
    125c:	99 1f       	adc	r25, r25
    125e:	0a 94       	dec	r0
    1260:	e2 f7       	brpl	.-8      	; 0x125a <GPIO_setupPinDirection+0x190>
    1262:	84 2b       	or	r24, r20
    1264:	8c 93       	st	X, r24
    1266:	14 c0       	rjmp	.+40     	; 0x1290 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD, pin_num);
    1268:	a1 e3       	ldi	r26, 0x31	; 49
    126a:	b0 e0       	ldi	r27, 0x00	; 0
    126c:	e1 e3       	ldi	r30, 0x31	; 49
    126e:	f0 e0       	ldi	r31, 0x00	; 0
    1270:	80 81       	ld	r24, Z
    1272:	48 2f       	mov	r20, r24
    1274:	8a 81       	ldd	r24, Y+2	; 0x02
    1276:	28 2f       	mov	r18, r24
    1278:	30 e0       	ldi	r19, 0x00	; 0
    127a:	81 e0       	ldi	r24, 0x01	; 1
    127c:	90 e0       	ldi	r25, 0x00	; 0
    127e:	02 2e       	mov	r0, r18
    1280:	02 c0       	rjmp	.+4      	; 0x1286 <GPIO_setupPinDirection+0x1bc>
    1282:	88 0f       	add	r24, r24
    1284:	99 1f       	adc	r25, r25
    1286:	0a 94       	dec	r0
    1288:	e2 f7       	brpl	.-8      	; 0x1282 <GPIO_setupPinDirection+0x1b8>
    128a:	80 95       	com	r24
    128c:	84 23       	and	r24, r20
    128e:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1290:	0f 90       	pop	r0
    1292:	0f 90       	pop	r0
    1294:	0f 90       	pop	r0
    1296:	0f 90       	pop	r0
    1298:	0f 90       	pop	r0
    129a:	cf 91       	pop	r28
    129c:	df 91       	pop	r29
    129e:	08 95       	ret

000012a0 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    12a0:	df 93       	push	r29
    12a2:	cf 93       	push	r28
    12a4:	00 d0       	rcall	.+0      	; 0x12a6 <GPIO_writePin+0x6>
    12a6:	00 d0       	rcall	.+0      	; 0x12a8 <GPIO_writePin+0x8>
    12a8:	0f 92       	push	r0
    12aa:	cd b7       	in	r28, 0x3d	; 61
    12ac:	de b7       	in	r29, 0x3e	; 62
    12ae:	89 83       	std	Y+1, r24	; 0x01
    12b0:	6a 83       	std	Y+2, r22	; 0x02
    12b2:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if ((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    12b4:	8a 81       	ldd	r24, Y+2	; 0x02
    12b6:	88 30       	cpi	r24, 0x08	; 8
    12b8:	08 f0       	brcs	.+2      	; 0x12bc <GPIO_writePin+0x1c>
    12ba:	d5 c0       	rjmp	.+426    	; 0x1466 <GPIO_writePin+0x1c6>
    12bc:	89 81       	ldd	r24, Y+1	; 0x01
    12be:	84 30       	cpi	r24, 0x04	; 4
    12c0:	08 f0       	brcs	.+2      	; 0x12c4 <GPIO_writePin+0x24>
    12c2:	d1 c0       	rjmp	.+418    	; 0x1466 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch (port_num)
    12c4:	89 81       	ldd	r24, Y+1	; 0x01
    12c6:	28 2f       	mov	r18, r24
    12c8:	30 e0       	ldi	r19, 0x00	; 0
    12ca:	3d 83       	std	Y+5, r19	; 0x05
    12cc:	2c 83       	std	Y+4, r18	; 0x04
    12ce:	8c 81       	ldd	r24, Y+4	; 0x04
    12d0:	9d 81       	ldd	r25, Y+5	; 0x05
    12d2:	81 30       	cpi	r24, 0x01	; 1
    12d4:	91 05       	cpc	r25, r1
    12d6:	09 f4       	brne	.+2      	; 0x12da <GPIO_writePin+0x3a>
    12d8:	43 c0       	rjmp	.+134    	; 0x1360 <GPIO_writePin+0xc0>
    12da:	2c 81       	ldd	r18, Y+4	; 0x04
    12dc:	3d 81       	ldd	r19, Y+5	; 0x05
    12de:	22 30       	cpi	r18, 0x02	; 2
    12e0:	31 05       	cpc	r19, r1
    12e2:	2c f4       	brge	.+10     	; 0x12ee <GPIO_writePin+0x4e>
    12e4:	8c 81       	ldd	r24, Y+4	; 0x04
    12e6:	9d 81       	ldd	r25, Y+5	; 0x05
    12e8:	00 97       	sbiw	r24, 0x00	; 0
    12ea:	71 f0       	breq	.+28     	; 0x1308 <GPIO_writePin+0x68>
    12ec:	bc c0       	rjmp	.+376    	; 0x1466 <GPIO_writePin+0x1c6>
    12ee:	2c 81       	ldd	r18, Y+4	; 0x04
    12f0:	3d 81       	ldd	r19, Y+5	; 0x05
    12f2:	22 30       	cpi	r18, 0x02	; 2
    12f4:	31 05       	cpc	r19, r1
    12f6:	09 f4       	brne	.+2      	; 0x12fa <GPIO_writePin+0x5a>
    12f8:	5f c0       	rjmp	.+190    	; 0x13b8 <GPIO_writePin+0x118>
    12fa:	8c 81       	ldd	r24, Y+4	; 0x04
    12fc:	9d 81       	ldd	r25, Y+5	; 0x05
    12fe:	83 30       	cpi	r24, 0x03	; 3
    1300:	91 05       	cpc	r25, r1
    1302:	09 f4       	brne	.+2      	; 0x1306 <GPIO_writePin+0x66>
    1304:	85 c0       	rjmp	.+266    	; 0x1410 <GPIO_writePin+0x170>
    1306:	af c0       	rjmp	.+350    	; 0x1466 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if (value == LOGIC_HIGH)
    1308:	8b 81       	ldd	r24, Y+3	; 0x03
    130a:	81 30       	cpi	r24, 0x01	; 1
    130c:	a1 f4       	brne	.+40     	; 0x1336 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA, pin_num);
    130e:	ab e3       	ldi	r26, 0x3B	; 59
    1310:	b0 e0       	ldi	r27, 0x00	; 0
    1312:	eb e3       	ldi	r30, 0x3B	; 59
    1314:	f0 e0       	ldi	r31, 0x00	; 0
    1316:	80 81       	ld	r24, Z
    1318:	48 2f       	mov	r20, r24
    131a:	8a 81       	ldd	r24, Y+2	; 0x02
    131c:	28 2f       	mov	r18, r24
    131e:	30 e0       	ldi	r19, 0x00	; 0
    1320:	81 e0       	ldi	r24, 0x01	; 1
    1322:	90 e0       	ldi	r25, 0x00	; 0
    1324:	02 2e       	mov	r0, r18
    1326:	02 c0       	rjmp	.+4      	; 0x132c <GPIO_writePin+0x8c>
    1328:	88 0f       	add	r24, r24
    132a:	99 1f       	adc	r25, r25
    132c:	0a 94       	dec	r0
    132e:	e2 f7       	brpl	.-8      	; 0x1328 <GPIO_writePin+0x88>
    1330:	84 2b       	or	r24, r20
    1332:	8c 93       	st	X, r24
    1334:	98 c0       	rjmp	.+304    	; 0x1466 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA, pin_num);
    1336:	ab e3       	ldi	r26, 0x3B	; 59
    1338:	b0 e0       	ldi	r27, 0x00	; 0
    133a:	eb e3       	ldi	r30, 0x3B	; 59
    133c:	f0 e0       	ldi	r31, 0x00	; 0
    133e:	80 81       	ld	r24, Z
    1340:	48 2f       	mov	r20, r24
    1342:	8a 81       	ldd	r24, Y+2	; 0x02
    1344:	28 2f       	mov	r18, r24
    1346:	30 e0       	ldi	r19, 0x00	; 0
    1348:	81 e0       	ldi	r24, 0x01	; 1
    134a:	90 e0       	ldi	r25, 0x00	; 0
    134c:	02 2e       	mov	r0, r18
    134e:	02 c0       	rjmp	.+4      	; 0x1354 <GPIO_writePin+0xb4>
    1350:	88 0f       	add	r24, r24
    1352:	99 1f       	adc	r25, r25
    1354:	0a 94       	dec	r0
    1356:	e2 f7       	brpl	.-8      	; 0x1350 <GPIO_writePin+0xb0>
    1358:	80 95       	com	r24
    135a:	84 23       	and	r24, r20
    135c:	8c 93       	st	X, r24
    135e:	83 c0       	rjmp	.+262    	; 0x1466 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if (value == LOGIC_HIGH)
    1360:	8b 81       	ldd	r24, Y+3	; 0x03
    1362:	81 30       	cpi	r24, 0x01	; 1
    1364:	a1 f4       	brne	.+40     	; 0x138e <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB, pin_num);
    1366:	a8 e3       	ldi	r26, 0x38	; 56
    1368:	b0 e0       	ldi	r27, 0x00	; 0
    136a:	e8 e3       	ldi	r30, 0x38	; 56
    136c:	f0 e0       	ldi	r31, 0x00	; 0
    136e:	80 81       	ld	r24, Z
    1370:	48 2f       	mov	r20, r24
    1372:	8a 81       	ldd	r24, Y+2	; 0x02
    1374:	28 2f       	mov	r18, r24
    1376:	30 e0       	ldi	r19, 0x00	; 0
    1378:	81 e0       	ldi	r24, 0x01	; 1
    137a:	90 e0       	ldi	r25, 0x00	; 0
    137c:	02 2e       	mov	r0, r18
    137e:	02 c0       	rjmp	.+4      	; 0x1384 <GPIO_writePin+0xe4>
    1380:	88 0f       	add	r24, r24
    1382:	99 1f       	adc	r25, r25
    1384:	0a 94       	dec	r0
    1386:	e2 f7       	brpl	.-8      	; 0x1380 <GPIO_writePin+0xe0>
    1388:	84 2b       	or	r24, r20
    138a:	8c 93       	st	X, r24
    138c:	6c c0       	rjmp	.+216    	; 0x1466 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB, pin_num);
    138e:	a8 e3       	ldi	r26, 0x38	; 56
    1390:	b0 e0       	ldi	r27, 0x00	; 0
    1392:	e8 e3       	ldi	r30, 0x38	; 56
    1394:	f0 e0       	ldi	r31, 0x00	; 0
    1396:	80 81       	ld	r24, Z
    1398:	48 2f       	mov	r20, r24
    139a:	8a 81       	ldd	r24, Y+2	; 0x02
    139c:	28 2f       	mov	r18, r24
    139e:	30 e0       	ldi	r19, 0x00	; 0
    13a0:	81 e0       	ldi	r24, 0x01	; 1
    13a2:	90 e0       	ldi	r25, 0x00	; 0
    13a4:	02 2e       	mov	r0, r18
    13a6:	02 c0       	rjmp	.+4      	; 0x13ac <GPIO_writePin+0x10c>
    13a8:	88 0f       	add	r24, r24
    13aa:	99 1f       	adc	r25, r25
    13ac:	0a 94       	dec	r0
    13ae:	e2 f7       	brpl	.-8      	; 0x13a8 <GPIO_writePin+0x108>
    13b0:	80 95       	com	r24
    13b2:	84 23       	and	r24, r20
    13b4:	8c 93       	st	X, r24
    13b6:	57 c0       	rjmp	.+174    	; 0x1466 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if (value == LOGIC_HIGH)
    13b8:	8b 81       	ldd	r24, Y+3	; 0x03
    13ba:	81 30       	cpi	r24, 0x01	; 1
    13bc:	a1 f4       	brne	.+40     	; 0x13e6 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC, pin_num);
    13be:	a5 e3       	ldi	r26, 0x35	; 53
    13c0:	b0 e0       	ldi	r27, 0x00	; 0
    13c2:	e5 e3       	ldi	r30, 0x35	; 53
    13c4:	f0 e0       	ldi	r31, 0x00	; 0
    13c6:	80 81       	ld	r24, Z
    13c8:	48 2f       	mov	r20, r24
    13ca:	8a 81       	ldd	r24, Y+2	; 0x02
    13cc:	28 2f       	mov	r18, r24
    13ce:	30 e0       	ldi	r19, 0x00	; 0
    13d0:	81 e0       	ldi	r24, 0x01	; 1
    13d2:	90 e0       	ldi	r25, 0x00	; 0
    13d4:	02 2e       	mov	r0, r18
    13d6:	02 c0       	rjmp	.+4      	; 0x13dc <GPIO_writePin+0x13c>
    13d8:	88 0f       	add	r24, r24
    13da:	99 1f       	adc	r25, r25
    13dc:	0a 94       	dec	r0
    13de:	e2 f7       	brpl	.-8      	; 0x13d8 <GPIO_writePin+0x138>
    13e0:	84 2b       	or	r24, r20
    13e2:	8c 93       	st	X, r24
    13e4:	40 c0       	rjmp	.+128    	; 0x1466 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC, pin_num);
    13e6:	a5 e3       	ldi	r26, 0x35	; 53
    13e8:	b0 e0       	ldi	r27, 0x00	; 0
    13ea:	e5 e3       	ldi	r30, 0x35	; 53
    13ec:	f0 e0       	ldi	r31, 0x00	; 0
    13ee:	80 81       	ld	r24, Z
    13f0:	48 2f       	mov	r20, r24
    13f2:	8a 81       	ldd	r24, Y+2	; 0x02
    13f4:	28 2f       	mov	r18, r24
    13f6:	30 e0       	ldi	r19, 0x00	; 0
    13f8:	81 e0       	ldi	r24, 0x01	; 1
    13fa:	90 e0       	ldi	r25, 0x00	; 0
    13fc:	02 2e       	mov	r0, r18
    13fe:	02 c0       	rjmp	.+4      	; 0x1404 <GPIO_writePin+0x164>
    1400:	88 0f       	add	r24, r24
    1402:	99 1f       	adc	r25, r25
    1404:	0a 94       	dec	r0
    1406:	e2 f7       	brpl	.-8      	; 0x1400 <GPIO_writePin+0x160>
    1408:	80 95       	com	r24
    140a:	84 23       	and	r24, r20
    140c:	8c 93       	st	X, r24
    140e:	2b c0       	rjmp	.+86     	; 0x1466 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if (value == LOGIC_HIGH)
    1410:	8b 81       	ldd	r24, Y+3	; 0x03
    1412:	81 30       	cpi	r24, 0x01	; 1
    1414:	a1 f4       	brne	.+40     	; 0x143e <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD, pin_num);
    1416:	a2 e3       	ldi	r26, 0x32	; 50
    1418:	b0 e0       	ldi	r27, 0x00	; 0
    141a:	e2 e3       	ldi	r30, 0x32	; 50
    141c:	f0 e0       	ldi	r31, 0x00	; 0
    141e:	80 81       	ld	r24, Z
    1420:	48 2f       	mov	r20, r24
    1422:	8a 81       	ldd	r24, Y+2	; 0x02
    1424:	28 2f       	mov	r18, r24
    1426:	30 e0       	ldi	r19, 0x00	; 0
    1428:	81 e0       	ldi	r24, 0x01	; 1
    142a:	90 e0       	ldi	r25, 0x00	; 0
    142c:	02 2e       	mov	r0, r18
    142e:	02 c0       	rjmp	.+4      	; 0x1434 <GPIO_writePin+0x194>
    1430:	88 0f       	add	r24, r24
    1432:	99 1f       	adc	r25, r25
    1434:	0a 94       	dec	r0
    1436:	e2 f7       	brpl	.-8      	; 0x1430 <GPIO_writePin+0x190>
    1438:	84 2b       	or	r24, r20
    143a:	8c 93       	st	X, r24
    143c:	14 c0       	rjmp	.+40     	; 0x1466 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD, pin_num);
    143e:	a2 e3       	ldi	r26, 0x32	; 50
    1440:	b0 e0       	ldi	r27, 0x00	; 0
    1442:	e2 e3       	ldi	r30, 0x32	; 50
    1444:	f0 e0       	ldi	r31, 0x00	; 0
    1446:	80 81       	ld	r24, Z
    1448:	48 2f       	mov	r20, r24
    144a:	8a 81       	ldd	r24, Y+2	; 0x02
    144c:	28 2f       	mov	r18, r24
    144e:	30 e0       	ldi	r19, 0x00	; 0
    1450:	81 e0       	ldi	r24, 0x01	; 1
    1452:	90 e0       	ldi	r25, 0x00	; 0
    1454:	02 2e       	mov	r0, r18
    1456:	02 c0       	rjmp	.+4      	; 0x145c <GPIO_writePin+0x1bc>
    1458:	88 0f       	add	r24, r24
    145a:	99 1f       	adc	r25, r25
    145c:	0a 94       	dec	r0
    145e:	e2 f7       	brpl	.-8      	; 0x1458 <GPIO_writePin+0x1b8>
    1460:	80 95       	com	r24
    1462:	84 23       	and	r24, r20
    1464:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1466:	0f 90       	pop	r0
    1468:	0f 90       	pop	r0
    146a:	0f 90       	pop	r0
    146c:	0f 90       	pop	r0
    146e:	0f 90       	pop	r0
    1470:	cf 91       	pop	r28
    1472:	df 91       	pop	r29
    1474:	08 95       	ret

00001476 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1476:	df 93       	push	r29
    1478:	cf 93       	push	r28
    147a:	00 d0       	rcall	.+0      	; 0x147c <GPIO_readPin+0x6>
    147c:	00 d0       	rcall	.+0      	; 0x147e <GPIO_readPin+0x8>
    147e:	0f 92       	push	r0
    1480:	cd b7       	in	r28, 0x3d	; 61
    1482:	de b7       	in	r29, 0x3e	; 62
    1484:	8a 83       	std	Y+2, r24	; 0x02
    1486:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1488:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if ((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    148a:	8b 81       	ldd	r24, Y+3	; 0x03
    148c:	88 30       	cpi	r24, 0x08	; 8
    148e:	08 f0       	brcs	.+2      	; 0x1492 <GPIO_readPin+0x1c>
    1490:	84 c0       	rjmp	.+264    	; 0x159a <GPIO_readPin+0x124>
    1492:	8a 81       	ldd	r24, Y+2	; 0x02
    1494:	84 30       	cpi	r24, 0x04	; 4
    1496:	08 f0       	brcs	.+2      	; 0x149a <GPIO_readPin+0x24>
    1498:	80 c0       	rjmp	.+256    	; 0x159a <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch (port_num)
    149a:	8a 81       	ldd	r24, Y+2	; 0x02
    149c:	28 2f       	mov	r18, r24
    149e:	30 e0       	ldi	r19, 0x00	; 0
    14a0:	3d 83       	std	Y+5, r19	; 0x05
    14a2:	2c 83       	std	Y+4, r18	; 0x04
    14a4:	4c 81       	ldd	r20, Y+4	; 0x04
    14a6:	5d 81       	ldd	r21, Y+5	; 0x05
    14a8:	41 30       	cpi	r20, 0x01	; 1
    14aa:	51 05       	cpc	r21, r1
    14ac:	79 f1       	breq	.+94     	; 0x150c <GPIO_readPin+0x96>
    14ae:	8c 81       	ldd	r24, Y+4	; 0x04
    14b0:	9d 81       	ldd	r25, Y+5	; 0x05
    14b2:	82 30       	cpi	r24, 0x02	; 2
    14b4:	91 05       	cpc	r25, r1
    14b6:	34 f4       	brge	.+12     	; 0x14c4 <GPIO_readPin+0x4e>
    14b8:	2c 81       	ldd	r18, Y+4	; 0x04
    14ba:	3d 81       	ldd	r19, Y+5	; 0x05
    14bc:	21 15       	cp	r18, r1
    14be:	31 05       	cpc	r19, r1
    14c0:	69 f0       	breq	.+26     	; 0x14dc <GPIO_readPin+0x66>
    14c2:	6b c0       	rjmp	.+214    	; 0x159a <GPIO_readPin+0x124>
    14c4:	4c 81       	ldd	r20, Y+4	; 0x04
    14c6:	5d 81       	ldd	r21, Y+5	; 0x05
    14c8:	42 30       	cpi	r20, 0x02	; 2
    14ca:	51 05       	cpc	r21, r1
    14cc:	b9 f1       	breq	.+110    	; 0x153c <GPIO_readPin+0xc6>
    14ce:	8c 81       	ldd	r24, Y+4	; 0x04
    14d0:	9d 81       	ldd	r25, Y+5	; 0x05
    14d2:	83 30       	cpi	r24, 0x03	; 3
    14d4:	91 05       	cpc	r25, r1
    14d6:	09 f4       	brne	.+2      	; 0x14da <GPIO_readPin+0x64>
    14d8:	49 c0       	rjmp	.+146    	; 0x156c <GPIO_readPin+0xf6>
    14da:	5f c0       	rjmp	.+190    	; 0x159a <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if (BIT_IS_SET(PINA, pin_num))
    14dc:	e9 e3       	ldi	r30, 0x39	; 57
    14de:	f0 e0       	ldi	r31, 0x00	; 0
    14e0:	80 81       	ld	r24, Z
    14e2:	28 2f       	mov	r18, r24
    14e4:	30 e0       	ldi	r19, 0x00	; 0
    14e6:	8b 81       	ldd	r24, Y+3	; 0x03
    14e8:	88 2f       	mov	r24, r24
    14ea:	90 e0       	ldi	r25, 0x00	; 0
    14ec:	a9 01       	movw	r20, r18
    14ee:	02 c0       	rjmp	.+4      	; 0x14f4 <GPIO_readPin+0x7e>
    14f0:	55 95       	asr	r21
    14f2:	47 95       	ror	r20
    14f4:	8a 95       	dec	r24
    14f6:	e2 f7       	brpl	.-8      	; 0x14f0 <GPIO_readPin+0x7a>
    14f8:	ca 01       	movw	r24, r20
    14fa:	81 70       	andi	r24, 0x01	; 1
    14fc:	90 70       	andi	r25, 0x00	; 0
    14fe:	88 23       	and	r24, r24
    1500:	19 f0       	breq	.+6      	; 0x1508 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1502:	81 e0       	ldi	r24, 0x01	; 1
    1504:	89 83       	std	Y+1, r24	; 0x01
    1506:	49 c0       	rjmp	.+146    	; 0x159a <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1508:	19 82       	std	Y+1, r1	; 0x01
    150a:	47 c0       	rjmp	.+142    	; 0x159a <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if (BIT_IS_SET(PINB, pin_num))
    150c:	e6 e3       	ldi	r30, 0x36	; 54
    150e:	f0 e0       	ldi	r31, 0x00	; 0
    1510:	80 81       	ld	r24, Z
    1512:	28 2f       	mov	r18, r24
    1514:	30 e0       	ldi	r19, 0x00	; 0
    1516:	8b 81       	ldd	r24, Y+3	; 0x03
    1518:	88 2f       	mov	r24, r24
    151a:	90 e0       	ldi	r25, 0x00	; 0
    151c:	a9 01       	movw	r20, r18
    151e:	02 c0       	rjmp	.+4      	; 0x1524 <GPIO_readPin+0xae>
    1520:	55 95       	asr	r21
    1522:	47 95       	ror	r20
    1524:	8a 95       	dec	r24
    1526:	e2 f7       	brpl	.-8      	; 0x1520 <GPIO_readPin+0xaa>
    1528:	ca 01       	movw	r24, r20
    152a:	81 70       	andi	r24, 0x01	; 1
    152c:	90 70       	andi	r25, 0x00	; 0
    152e:	88 23       	and	r24, r24
    1530:	19 f0       	breq	.+6      	; 0x1538 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1532:	81 e0       	ldi	r24, 0x01	; 1
    1534:	89 83       	std	Y+1, r24	; 0x01
    1536:	31 c0       	rjmp	.+98     	; 0x159a <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1538:	19 82       	std	Y+1, r1	; 0x01
    153a:	2f c0       	rjmp	.+94     	; 0x159a <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if (BIT_IS_SET(PINC, pin_num))
    153c:	e3 e3       	ldi	r30, 0x33	; 51
    153e:	f0 e0       	ldi	r31, 0x00	; 0
    1540:	80 81       	ld	r24, Z
    1542:	28 2f       	mov	r18, r24
    1544:	30 e0       	ldi	r19, 0x00	; 0
    1546:	8b 81       	ldd	r24, Y+3	; 0x03
    1548:	88 2f       	mov	r24, r24
    154a:	90 e0       	ldi	r25, 0x00	; 0
    154c:	a9 01       	movw	r20, r18
    154e:	02 c0       	rjmp	.+4      	; 0x1554 <GPIO_readPin+0xde>
    1550:	55 95       	asr	r21
    1552:	47 95       	ror	r20
    1554:	8a 95       	dec	r24
    1556:	e2 f7       	brpl	.-8      	; 0x1550 <GPIO_readPin+0xda>
    1558:	ca 01       	movw	r24, r20
    155a:	81 70       	andi	r24, 0x01	; 1
    155c:	90 70       	andi	r25, 0x00	; 0
    155e:	88 23       	and	r24, r24
    1560:	19 f0       	breq	.+6      	; 0x1568 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1562:	81 e0       	ldi	r24, 0x01	; 1
    1564:	89 83       	std	Y+1, r24	; 0x01
    1566:	19 c0       	rjmp	.+50     	; 0x159a <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1568:	19 82       	std	Y+1, r1	; 0x01
    156a:	17 c0       	rjmp	.+46     	; 0x159a <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if (BIT_IS_SET(PIND, pin_num))
    156c:	e0 e3       	ldi	r30, 0x30	; 48
    156e:	f0 e0       	ldi	r31, 0x00	; 0
    1570:	80 81       	ld	r24, Z
    1572:	28 2f       	mov	r18, r24
    1574:	30 e0       	ldi	r19, 0x00	; 0
    1576:	8b 81       	ldd	r24, Y+3	; 0x03
    1578:	88 2f       	mov	r24, r24
    157a:	90 e0       	ldi	r25, 0x00	; 0
    157c:	a9 01       	movw	r20, r18
    157e:	02 c0       	rjmp	.+4      	; 0x1584 <GPIO_readPin+0x10e>
    1580:	55 95       	asr	r21
    1582:	47 95       	ror	r20
    1584:	8a 95       	dec	r24
    1586:	e2 f7       	brpl	.-8      	; 0x1580 <GPIO_readPin+0x10a>
    1588:	ca 01       	movw	r24, r20
    158a:	81 70       	andi	r24, 0x01	; 1
    158c:	90 70       	andi	r25, 0x00	; 0
    158e:	88 23       	and	r24, r24
    1590:	19 f0       	breq	.+6      	; 0x1598 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1592:	81 e0       	ldi	r24, 0x01	; 1
    1594:	89 83       	std	Y+1, r24	; 0x01
    1596:	01 c0       	rjmp	.+2      	; 0x159a <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1598:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    159a:	89 81       	ldd	r24, Y+1	; 0x01
}
    159c:	0f 90       	pop	r0
    159e:	0f 90       	pop	r0
    15a0:	0f 90       	pop	r0
    15a2:	0f 90       	pop	r0
    15a4:	0f 90       	pop	r0
    15a6:	cf 91       	pop	r28
    15a8:	df 91       	pop	r29
    15aa:	08 95       	ret

000015ac <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    15ac:	df 93       	push	r29
    15ae:	cf 93       	push	r28
    15b0:	00 d0       	rcall	.+0      	; 0x15b2 <GPIO_setupPortDirection+0x6>
    15b2:	00 d0       	rcall	.+0      	; 0x15b4 <GPIO_setupPortDirection+0x8>
    15b4:	cd b7       	in	r28, 0x3d	; 61
    15b6:	de b7       	in	r29, 0x3e	; 62
    15b8:	89 83       	std	Y+1, r24	; 0x01
    15ba:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if (port_num >= NUM_OF_PORTS)
    15bc:	89 81       	ldd	r24, Y+1	; 0x01
    15be:	84 30       	cpi	r24, 0x04	; 4
    15c0:	90 f5       	brcc	.+100    	; 0x1626 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch (port_num)
    15c2:	89 81       	ldd	r24, Y+1	; 0x01
    15c4:	28 2f       	mov	r18, r24
    15c6:	30 e0       	ldi	r19, 0x00	; 0
    15c8:	3c 83       	std	Y+4, r19	; 0x04
    15ca:	2b 83       	std	Y+3, r18	; 0x03
    15cc:	8b 81       	ldd	r24, Y+3	; 0x03
    15ce:	9c 81       	ldd	r25, Y+4	; 0x04
    15d0:	81 30       	cpi	r24, 0x01	; 1
    15d2:	91 05       	cpc	r25, r1
    15d4:	d1 f0       	breq	.+52     	; 0x160a <GPIO_setupPortDirection+0x5e>
    15d6:	2b 81       	ldd	r18, Y+3	; 0x03
    15d8:	3c 81       	ldd	r19, Y+4	; 0x04
    15da:	22 30       	cpi	r18, 0x02	; 2
    15dc:	31 05       	cpc	r19, r1
    15de:	2c f4       	brge	.+10     	; 0x15ea <GPIO_setupPortDirection+0x3e>
    15e0:	8b 81       	ldd	r24, Y+3	; 0x03
    15e2:	9c 81       	ldd	r25, Y+4	; 0x04
    15e4:	00 97       	sbiw	r24, 0x00	; 0
    15e6:	61 f0       	breq	.+24     	; 0x1600 <GPIO_setupPortDirection+0x54>
    15e8:	1e c0       	rjmp	.+60     	; 0x1626 <GPIO_setupPortDirection+0x7a>
    15ea:	2b 81       	ldd	r18, Y+3	; 0x03
    15ec:	3c 81       	ldd	r19, Y+4	; 0x04
    15ee:	22 30       	cpi	r18, 0x02	; 2
    15f0:	31 05       	cpc	r19, r1
    15f2:	81 f0       	breq	.+32     	; 0x1614 <GPIO_setupPortDirection+0x68>
    15f4:	8b 81       	ldd	r24, Y+3	; 0x03
    15f6:	9c 81       	ldd	r25, Y+4	; 0x04
    15f8:	83 30       	cpi	r24, 0x03	; 3
    15fa:	91 05       	cpc	r25, r1
    15fc:	81 f0       	breq	.+32     	; 0x161e <GPIO_setupPortDirection+0x72>
    15fe:	13 c0       	rjmp	.+38     	; 0x1626 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1600:	ea e3       	ldi	r30, 0x3A	; 58
    1602:	f0 e0       	ldi	r31, 0x00	; 0
    1604:	8a 81       	ldd	r24, Y+2	; 0x02
    1606:	80 83       	st	Z, r24
    1608:	0e c0       	rjmp	.+28     	; 0x1626 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    160a:	e7 e3       	ldi	r30, 0x37	; 55
    160c:	f0 e0       	ldi	r31, 0x00	; 0
    160e:	8a 81       	ldd	r24, Y+2	; 0x02
    1610:	80 83       	st	Z, r24
    1612:	09 c0       	rjmp	.+18     	; 0x1626 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1614:	e4 e3       	ldi	r30, 0x34	; 52
    1616:	f0 e0       	ldi	r31, 0x00	; 0
    1618:	8a 81       	ldd	r24, Y+2	; 0x02
    161a:	80 83       	st	Z, r24
    161c:	04 c0       	rjmp	.+8      	; 0x1626 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    161e:	e1 e3       	ldi	r30, 0x31	; 49
    1620:	f0 e0       	ldi	r31, 0x00	; 0
    1622:	8a 81       	ldd	r24, Y+2	; 0x02
    1624:	80 83       	st	Z, r24
			break;
		}
	}
}
    1626:	0f 90       	pop	r0
    1628:	0f 90       	pop	r0
    162a:	0f 90       	pop	r0
    162c:	0f 90       	pop	r0
    162e:	cf 91       	pop	r28
    1630:	df 91       	pop	r29
    1632:	08 95       	ret

00001634 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1634:	df 93       	push	r29
    1636:	cf 93       	push	r28
    1638:	00 d0       	rcall	.+0      	; 0x163a <GPIO_writePort+0x6>
    163a:	00 d0       	rcall	.+0      	; 0x163c <GPIO_writePort+0x8>
    163c:	cd b7       	in	r28, 0x3d	; 61
    163e:	de b7       	in	r29, 0x3e	; 62
    1640:	89 83       	std	Y+1, r24	; 0x01
    1642:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if (port_num >= NUM_OF_PORTS)
    1644:	89 81       	ldd	r24, Y+1	; 0x01
    1646:	84 30       	cpi	r24, 0x04	; 4
    1648:	90 f5       	brcc	.+100    	; 0x16ae <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch (port_num)
    164a:	89 81       	ldd	r24, Y+1	; 0x01
    164c:	28 2f       	mov	r18, r24
    164e:	30 e0       	ldi	r19, 0x00	; 0
    1650:	3c 83       	std	Y+4, r19	; 0x04
    1652:	2b 83       	std	Y+3, r18	; 0x03
    1654:	8b 81       	ldd	r24, Y+3	; 0x03
    1656:	9c 81       	ldd	r25, Y+4	; 0x04
    1658:	81 30       	cpi	r24, 0x01	; 1
    165a:	91 05       	cpc	r25, r1
    165c:	d1 f0       	breq	.+52     	; 0x1692 <GPIO_writePort+0x5e>
    165e:	2b 81       	ldd	r18, Y+3	; 0x03
    1660:	3c 81       	ldd	r19, Y+4	; 0x04
    1662:	22 30       	cpi	r18, 0x02	; 2
    1664:	31 05       	cpc	r19, r1
    1666:	2c f4       	brge	.+10     	; 0x1672 <GPIO_writePort+0x3e>
    1668:	8b 81       	ldd	r24, Y+3	; 0x03
    166a:	9c 81       	ldd	r25, Y+4	; 0x04
    166c:	00 97       	sbiw	r24, 0x00	; 0
    166e:	61 f0       	breq	.+24     	; 0x1688 <GPIO_writePort+0x54>
    1670:	1e c0       	rjmp	.+60     	; 0x16ae <GPIO_writePort+0x7a>
    1672:	2b 81       	ldd	r18, Y+3	; 0x03
    1674:	3c 81       	ldd	r19, Y+4	; 0x04
    1676:	22 30       	cpi	r18, 0x02	; 2
    1678:	31 05       	cpc	r19, r1
    167a:	81 f0       	breq	.+32     	; 0x169c <GPIO_writePort+0x68>
    167c:	8b 81       	ldd	r24, Y+3	; 0x03
    167e:	9c 81       	ldd	r25, Y+4	; 0x04
    1680:	83 30       	cpi	r24, 0x03	; 3
    1682:	91 05       	cpc	r25, r1
    1684:	81 f0       	breq	.+32     	; 0x16a6 <GPIO_writePort+0x72>
    1686:	13 c0       	rjmp	.+38     	; 0x16ae <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1688:	eb e3       	ldi	r30, 0x3B	; 59
    168a:	f0 e0       	ldi	r31, 0x00	; 0
    168c:	8a 81       	ldd	r24, Y+2	; 0x02
    168e:	80 83       	st	Z, r24
    1690:	0e c0       	rjmp	.+28     	; 0x16ae <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1692:	e8 e3       	ldi	r30, 0x38	; 56
    1694:	f0 e0       	ldi	r31, 0x00	; 0
    1696:	8a 81       	ldd	r24, Y+2	; 0x02
    1698:	80 83       	st	Z, r24
    169a:	09 c0       	rjmp	.+18     	; 0x16ae <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    169c:	e5 e3       	ldi	r30, 0x35	; 53
    169e:	f0 e0       	ldi	r31, 0x00	; 0
    16a0:	8a 81       	ldd	r24, Y+2	; 0x02
    16a2:	80 83       	st	Z, r24
    16a4:	04 c0       	rjmp	.+8      	; 0x16ae <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    16a6:	e2 e3       	ldi	r30, 0x32	; 50
    16a8:	f0 e0       	ldi	r31, 0x00	; 0
    16aa:	8a 81       	ldd	r24, Y+2	; 0x02
    16ac:	80 83       	st	Z, r24
			break;
		}
	}
}
    16ae:	0f 90       	pop	r0
    16b0:	0f 90       	pop	r0
    16b2:	0f 90       	pop	r0
    16b4:	0f 90       	pop	r0
    16b6:	cf 91       	pop	r28
    16b8:	df 91       	pop	r29
    16ba:	08 95       	ret

000016bc <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    16bc:	df 93       	push	r29
    16be:	cf 93       	push	r28
    16c0:	00 d0       	rcall	.+0      	; 0x16c2 <GPIO_readPort+0x6>
    16c2:	00 d0       	rcall	.+0      	; 0x16c4 <GPIO_readPort+0x8>
    16c4:	cd b7       	in	r28, 0x3d	; 61
    16c6:	de b7       	in	r29, 0x3e	; 62
    16c8:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    16ca:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if (port_num >= NUM_OF_PORTS)
    16cc:	8a 81       	ldd	r24, Y+2	; 0x02
    16ce:	84 30       	cpi	r24, 0x04	; 4
    16d0:	90 f5       	brcc	.+100    	; 0x1736 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch (port_num)
    16d2:	8a 81       	ldd	r24, Y+2	; 0x02
    16d4:	28 2f       	mov	r18, r24
    16d6:	30 e0       	ldi	r19, 0x00	; 0
    16d8:	3c 83       	std	Y+4, r19	; 0x04
    16da:	2b 83       	std	Y+3, r18	; 0x03
    16dc:	8b 81       	ldd	r24, Y+3	; 0x03
    16de:	9c 81       	ldd	r25, Y+4	; 0x04
    16e0:	81 30       	cpi	r24, 0x01	; 1
    16e2:	91 05       	cpc	r25, r1
    16e4:	d1 f0       	breq	.+52     	; 0x171a <GPIO_readPort+0x5e>
    16e6:	2b 81       	ldd	r18, Y+3	; 0x03
    16e8:	3c 81       	ldd	r19, Y+4	; 0x04
    16ea:	22 30       	cpi	r18, 0x02	; 2
    16ec:	31 05       	cpc	r19, r1
    16ee:	2c f4       	brge	.+10     	; 0x16fa <GPIO_readPort+0x3e>
    16f0:	8b 81       	ldd	r24, Y+3	; 0x03
    16f2:	9c 81       	ldd	r25, Y+4	; 0x04
    16f4:	00 97       	sbiw	r24, 0x00	; 0
    16f6:	61 f0       	breq	.+24     	; 0x1710 <GPIO_readPort+0x54>
    16f8:	1e c0       	rjmp	.+60     	; 0x1736 <GPIO_readPort+0x7a>
    16fa:	2b 81       	ldd	r18, Y+3	; 0x03
    16fc:	3c 81       	ldd	r19, Y+4	; 0x04
    16fe:	22 30       	cpi	r18, 0x02	; 2
    1700:	31 05       	cpc	r19, r1
    1702:	81 f0       	breq	.+32     	; 0x1724 <GPIO_readPort+0x68>
    1704:	8b 81       	ldd	r24, Y+3	; 0x03
    1706:	9c 81       	ldd	r25, Y+4	; 0x04
    1708:	83 30       	cpi	r24, 0x03	; 3
    170a:	91 05       	cpc	r25, r1
    170c:	81 f0       	breq	.+32     	; 0x172e <GPIO_readPort+0x72>
    170e:	13 c0       	rjmp	.+38     	; 0x1736 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1710:	e9 e3       	ldi	r30, 0x39	; 57
    1712:	f0 e0       	ldi	r31, 0x00	; 0
    1714:	80 81       	ld	r24, Z
    1716:	89 83       	std	Y+1, r24	; 0x01
    1718:	0e c0       	rjmp	.+28     	; 0x1736 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    171a:	e6 e3       	ldi	r30, 0x36	; 54
    171c:	f0 e0       	ldi	r31, 0x00	; 0
    171e:	80 81       	ld	r24, Z
    1720:	89 83       	std	Y+1, r24	; 0x01
    1722:	09 c0       	rjmp	.+18     	; 0x1736 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1724:	e3 e3       	ldi	r30, 0x33	; 51
    1726:	f0 e0       	ldi	r31, 0x00	; 0
    1728:	80 81       	ld	r24, Z
    172a:	89 83       	std	Y+1, r24	; 0x01
    172c:	04 c0       	rjmp	.+8      	; 0x1736 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    172e:	e0 e3       	ldi	r30, 0x30	; 48
    1730:	f0 e0       	ldi	r31, 0x00	; 0
    1732:	80 81       	ld	r24, Z
    1734:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1736:	89 81       	ldd	r24, Y+1	; 0x01
}
    1738:	0f 90       	pop	r0
    173a:	0f 90       	pop	r0
    173c:	0f 90       	pop	r0
    173e:	0f 90       	pop	r0
    1740:	cf 91       	pop	r28
    1742:	df 91       	pop	r29
    1744:	08 95       	ret

00001746 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    1746:	df 93       	push	r29
    1748:	cf 93       	push	r28
    174a:	cd b7       	in	r28, 0x3d	; 61
    174c:	de b7       	in	r29, 0x3e	; 62
    174e:	2e 97       	sbiw	r28, 0x0e	; 14
    1750:	0f b6       	in	r0, 0x3f	; 63
    1752:	f8 94       	cli
    1754:	de bf       	out	0x3e, r29	; 62
    1756:	0f be       	out	0x3f, r0	; 63
    1758:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID, LCD_RS_PIN_ID, PIN_OUTPUT);
    175a:	80 e0       	ldi	r24, 0x00	; 0
    175c:	67 e0       	ldi	r22, 0x07	; 7
    175e:	41 e0       	ldi	r20, 0x01	; 1
    1760:	0e 94 65 08 	call	0x10ca	; 0x10ca <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID, LCD_E_PIN_ID, PIN_OUTPUT);
    1764:	80 e0       	ldi	r24, 0x00	; 0
    1766:	66 e0       	ldi	r22, 0x06	; 6
    1768:	41 e0       	ldi	r20, 0x01	; 1
    176a:	0e 94 65 08 	call	0x10ca	; 0x10ca <GPIO_setupPinDirection>
    176e:	80 e0       	ldi	r24, 0x00	; 0
    1770:	90 e0       	ldi	r25, 0x00	; 0
    1772:	a0 ea       	ldi	r26, 0xA0	; 160
    1774:	b1 e4       	ldi	r27, 0x41	; 65
    1776:	8b 87       	std	Y+11, r24	; 0x0b
    1778:	9c 87       	std	Y+12, r25	; 0x0c
    177a:	ad 87       	std	Y+13, r26	; 0x0d
    177c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    177e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1780:	7c 85       	ldd	r23, Y+12	; 0x0c
    1782:	8d 85       	ldd	r24, Y+13	; 0x0d
    1784:	9e 85       	ldd	r25, Y+14	; 0x0e
    1786:	20 e0       	ldi	r18, 0x00	; 0
    1788:	30 e0       	ldi	r19, 0x00	; 0
    178a:	4a ef       	ldi	r20, 0xFA	; 250
    178c:	54 e4       	ldi	r21, 0x44	; 68
    178e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1792:	dc 01       	movw	r26, r24
    1794:	cb 01       	movw	r24, r22
    1796:	8f 83       	std	Y+7, r24	; 0x07
    1798:	98 87       	std	Y+8, r25	; 0x08
    179a:	a9 87       	std	Y+9, r26	; 0x09
    179c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    179e:	6f 81       	ldd	r22, Y+7	; 0x07
    17a0:	78 85       	ldd	r23, Y+8	; 0x08
    17a2:	89 85       	ldd	r24, Y+9	; 0x09
    17a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    17a6:	20 e0       	ldi	r18, 0x00	; 0
    17a8:	30 e0       	ldi	r19, 0x00	; 0
    17aa:	40 e8       	ldi	r20, 0x80	; 128
    17ac:	5f e3       	ldi	r21, 0x3F	; 63
    17ae:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    17b2:	88 23       	and	r24, r24
    17b4:	2c f4       	brge	.+10     	; 0x17c0 <LCD_init+0x7a>
		__ticks = 1;
    17b6:	81 e0       	ldi	r24, 0x01	; 1
    17b8:	90 e0       	ldi	r25, 0x00	; 0
    17ba:	9e 83       	std	Y+6, r25	; 0x06
    17bc:	8d 83       	std	Y+5, r24	; 0x05
    17be:	3f c0       	rjmp	.+126    	; 0x183e <LCD_init+0xf8>
	else if (__tmp > 65535)
    17c0:	6f 81       	ldd	r22, Y+7	; 0x07
    17c2:	78 85       	ldd	r23, Y+8	; 0x08
    17c4:	89 85       	ldd	r24, Y+9	; 0x09
    17c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    17c8:	20 e0       	ldi	r18, 0x00	; 0
    17ca:	3f ef       	ldi	r19, 0xFF	; 255
    17cc:	4f e7       	ldi	r20, 0x7F	; 127
    17ce:	57 e4       	ldi	r21, 0x47	; 71
    17d0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    17d4:	18 16       	cp	r1, r24
    17d6:	4c f5       	brge	.+82     	; 0x182a <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17d8:	6b 85       	ldd	r22, Y+11	; 0x0b
    17da:	7c 85       	ldd	r23, Y+12	; 0x0c
    17dc:	8d 85       	ldd	r24, Y+13	; 0x0d
    17de:	9e 85       	ldd	r25, Y+14	; 0x0e
    17e0:	20 e0       	ldi	r18, 0x00	; 0
    17e2:	30 e0       	ldi	r19, 0x00	; 0
    17e4:	40 e2       	ldi	r20, 0x20	; 32
    17e6:	51 e4       	ldi	r21, 0x41	; 65
    17e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17ec:	dc 01       	movw	r26, r24
    17ee:	cb 01       	movw	r24, r22
    17f0:	bc 01       	movw	r22, r24
    17f2:	cd 01       	movw	r24, r26
    17f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17f8:	dc 01       	movw	r26, r24
    17fa:	cb 01       	movw	r24, r22
    17fc:	9e 83       	std	Y+6, r25	; 0x06
    17fe:	8d 83       	std	Y+5, r24	; 0x05
    1800:	0f c0       	rjmp	.+30     	; 0x1820 <LCD_init+0xda>
    1802:	88 ec       	ldi	r24, 0xC8	; 200
    1804:	90 e0       	ldi	r25, 0x00	; 0
    1806:	9c 83       	std	Y+4, r25	; 0x04
    1808:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    180a:	8b 81       	ldd	r24, Y+3	; 0x03
    180c:	9c 81       	ldd	r25, Y+4	; 0x04
    180e:	01 97       	sbiw	r24, 0x01	; 1
    1810:	f1 f7       	brne	.-4      	; 0x180e <LCD_init+0xc8>
    1812:	9c 83       	std	Y+4, r25	; 0x04
    1814:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1816:	8d 81       	ldd	r24, Y+5	; 0x05
    1818:	9e 81       	ldd	r25, Y+6	; 0x06
    181a:	01 97       	sbiw	r24, 0x01	; 1
    181c:	9e 83       	std	Y+6, r25	; 0x06
    181e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1820:	8d 81       	ldd	r24, Y+5	; 0x05
    1822:	9e 81       	ldd	r25, Y+6	; 0x06
    1824:	00 97       	sbiw	r24, 0x00	; 0
    1826:	69 f7       	brne	.-38     	; 0x1802 <LCD_init+0xbc>
    1828:	14 c0       	rjmp	.+40     	; 0x1852 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    182a:	6f 81       	ldd	r22, Y+7	; 0x07
    182c:	78 85       	ldd	r23, Y+8	; 0x08
    182e:	89 85       	ldd	r24, Y+9	; 0x09
    1830:	9a 85       	ldd	r25, Y+10	; 0x0a
    1832:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1836:	dc 01       	movw	r26, r24
    1838:	cb 01       	movw	r24, r22
    183a:	9e 83       	std	Y+6, r25	; 0x06
    183c:	8d 83       	std	Y+5, r24	; 0x05
    183e:	8d 81       	ldd	r24, Y+5	; 0x05
    1840:	9e 81       	ldd	r25, Y+6	; 0x06
    1842:	9a 83       	std	Y+2, r25	; 0x02
    1844:	89 83       	std	Y+1, r24	; 0x01
    1846:	89 81       	ldd	r24, Y+1	; 0x01
    1848:	9a 81       	ldd	r25, Y+2	; 0x02
    184a:	01 97       	sbiw	r24, 0x01	; 1
    184c:	f1 f7       	brne	.-4      	; 0x184a <LCD_init+0x104>
    184e:	9a 83       	std	Y+2, r25	; 0x02
    1850:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(20); /* LCD Power ON delay always > 15ms */

#if (LCD_DATA_BITS_MODE == 4)
	/* Configure 4 pins in the data port as output pins */
	GPIO_setupPinDirection(LCD_DATA_PORT_ID, LCD_DB4_PIN_ID, PIN_OUTPUT);
    1852:	80 e0       	ldi	r24, 0x00	; 0
    1854:	65 e0       	ldi	r22, 0x05	; 5
    1856:	41 e0       	ldi	r20, 0x01	; 1
    1858:	0e 94 65 08 	call	0x10ca	; 0x10ca <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID, LCD_DB5_PIN_ID, PIN_OUTPUT);
    185c:	80 e0       	ldi	r24, 0x00	; 0
    185e:	64 e0       	ldi	r22, 0x04	; 4
    1860:	41 e0       	ldi	r20, 0x01	; 1
    1862:	0e 94 65 08 	call	0x10ca	; 0x10ca <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID, LCD_DB6_PIN_ID, PIN_OUTPUT);
    1866:	80 e0       	ldi	r24, 0x00	; 0
    1868:	63 e0       	ldi	r22, 0x03	; 3
    186a:	41 e0       	ldi	r20, 0x01	; 1
    186c:	0e 94 65 08 	call	0x10ca	; 0x10ca <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID, LCD_DB7_PIN_ID, PIN_OUTPUT);
    1870:	80 e0       	ldi	r24, 0x00	; 0
    1872:	62 e0       	ldi	r22, 0x02	; 2
    1874:	41 e0       	ldi	r20, 0x01	; 1
    1876:	0e 94 65 08 	call	0x10ca	; 0x10ca <GPIO_setupPinDirection>

	/* Send for 4 bit initialization of LCD  */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT1);
    187a:	83 e3       	ldi	r24, 0x33	; 51
    187c:	0e 94 55 0c 	call	0x18aa	; 0x18aa <LCD_sendCommand>
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
    1880:	82 e3       	ldi	r24, 0x32	; 50
    1882:	0e 94 55 0c 	call	0x18aa	; 0x18aa <LCD_sendCommand>

	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
    1886:	88 e2       	ldi	r24, 0x28	; 40
    1888:	0e 94 55 0c 	call	0x18aa	; 0x18aa <LCD_sendCommand>
	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);

#endif

	LCD_sendCommand(LCD_CURSOR_OFF);	/* cursor off */
    188c:	8c e0       	ldi	r24, 0x0C	; 12
    188e:	0e 94 55 0c 	call	0x18aa	; 0x18aa <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    1892:	81 e0       	ldi	r24, 0x01	; 1
    1894:	0e 94 55 0c 	call	0x18aa	; 0x18aa <LCD_sendCommand>
}
    1898:	2e 96       	adiw	r28, 0x0e	; 14
    189a:	0f b6       	in	r0, 0x3f	; 63
    189c:	f8 94       	cli
    189e:	de bf       	out	0x3e, r29	; 62
    18a0:	0f be       	out	0x3f, r0	; 63
    18a2:	cd bf       	out	0x3d, r28	; 61
    18a4:	cf 91       	pop	r28
    18a6:	df 91       	pop	r29
    18a8:	08 95       	ret

000018aa <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    18aa:	0f 93       	push	r16
    18ac:	1f 93       	push	r17
    18ae:	df 93       	push	r29
    18b0:	cf 93       	push	r28
    18b2:	cd b7       	in	r28, 0x3d	; 61
    18b4:	de b7       	in	r29, 0x3e	; 62
    18b6:	c3 56       	subi	r28, 0x63	; 99
    18b8:	d0 40       	sbci	r29, 0x00	; 0
    18ba:	0f b6       	in	r0, 0x3f	; 63
    18bc:	f8 94       	cli
    18be:	de bf       	out	0x3e, r29	; 62
    18c0:	0f be       	out	0x3f, r0	; 63
    18c2:	cd bf       	out	0x3d, r28	; 61
    18c4:	fe 01       	movw	r30, r28
    18c6:	ed 59       	subi	r30, 0x9D	; 157
    18c8:	ff 4f       	sbci	r31, 0xFF	; 255
    18ca:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_LOW); /* Instruction Mode RS=0 */
    18cc:	80 e0       	ldi	r24, 0x00	; 0
    18ce:	67 e0       	ldi	r22, 0x07	; 7
    18d0:	40 e0       	ldi	r20, 0x00	; 0
    18d2:	0e 94 50 09 	call	0x12a0	; 0x12a0 <GPIO_writePin>
    18d6:	fe 01       	movw	r30, r28
    18d8:	e1 5a       	subi	r30, 0xA1	; 161
    18da:	ff 4f       	sbci	r31, 0xFF	; 255
    18dc:	80 e0       	ldi	r24, 0x00	; 0
    18de:	90 e0       	ldi	r25, 0x00	; 0
    18e0:	a0 e8       	ldi	r26, 0x80	; 128
    18e2:	bf e3       	ldi	r27, 0x3F	; 63
    18e4:	80 83       	st	Z, r24
    18e6:	91 83       	std	Z+1, r25	; 0x01
    18e8:	a2 83       	std	Z+2, r26	; 0x02
    18ea:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18ec:	8e 01       	movw	r16, r28
    18ee:	05 5a       	subi	r16, 0xA5	; 165
    18f0:	1f 4f       	sbci	r17, 0xFF	; 255
    18f2:	fe 01       	movw	r30, r28
    18f4:	e1 5a       	subi	r30, 0xA1	; 161
    18f6:	ff 4f       	sbci	r31, 0xFF	; 255
    18f8:	60 81       	ld	r22, Z
    18fa:	71 81       	ldd	r23, Z+1	; 0x01
    18fc:	82 81       	ldd	r24, Z+2	; 0x02
    18fe:	93 81       	ldd	r25, Z+3	; 0x03
    1900:	20 e0       	ldi	r18, 0x00	; 0
    1902:	30 e0       	ldi	r19, 0x00	; 0
    1904:	4a ef       	ldi	r20, 0xFA	; 250
    1906:	54 e4       	ldi	r21, 0x44	; 68
    1908:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    190c:	dc 01       	movw	r26, r24
    190e:	cb 01       	movw	r24, r22
    1910:	f8 01       	movw	r30, r16
    1912:	80 83       	st	Z, r24
    1914:	91 83       	std	Z+1, r25	; 0x01
    1916:	a2 83       	std	Z+2, r26	; 0x02
    1918:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    191a:	fe 01       	movw	r30, r28
    191c:	e5 5a       	subi	r30, 0xA5	; 165
    191e:	ff 4f       	sbci	r31, 0xFF	; 255
    1920:	60 81       	ld	r22, Z
    1922:	71 81       	ldd	r23, Z+1	; 0x01
    1924:	82 81       	ldd	r24, Z+2	; 0x02
    1926:	93 81       	ldd	r25, Z+3	; 0x03
    1928:	20 e0       	ldi	r18, 0x00	; 0
    192a:	30 e0       	ldi	r19, 0x00	; 0
    192c:	40 e8       	ldi	r20, 0x80	; 128
    192e:	5f e3       	ldi	r21, 0x3F	; 63
    1930:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1934:	88 23       	and	r24, r24
    1936:	44 f4       	brge	.+16     	; 0x1948 <LCD_sendCommand+0x9e>
		__ticks = 1;
    1938:	fe 01       	movw	r30, r28
    193a:	e7 5a       	subi	r30, 0xA7	; 167
    193c:	ff 4f       	sbci	r31, 0xFF	; 255
    193e:	81 e0       	ldi	r24, 0x01	; 1
    1940:	90 e0       	ldi	r25, 0x00	; 0
    1942:	91 83       	std	Z+1, r25	; 0x01
    1944:	80 83       	st	Z, r24
    1946:	64 c0       	rjmp	.+200    	; 0x1a10 <LCD_sendCommand+0x166>
	else if (__tmp > 65535)
    1948:	fe 01       	movw	r30, r28
    194a:	e5 5a       	subi	r30, 0xA5	; 165
    194c:	ff 4f       	sbci	r31, 0xFF	; 255
    194e:	60 81       	ld	r22, Z
    1950:	71 81       	ldd	r23, Z+1	; 0x01
    1952:	82 81       	ldd	r24, Z+2	; 0x02
    1954:	93 81       	ldd	r25, Z+3	; 0x03
    1956:	20 e0       	ldi	r18, 0x00	; 0
    1958:	3f ef       	ldi	r19, 0xFF	; 255
    195a:	4f e7       	ldi	r20, 0x7F	; 127
    195c:	57 e4       	ldi	r21, 0x47	; 71
    195e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1962:	18 16       	cp	r1, r24
    1964:	0c f0       	brlt	.+2      	; 0x1968 <LCD_sendCommand+0xbe>
    1966:	43 c0       	rjmp	.+134    	; 0x19ee <LCD_sendCommand+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1968:	fe 01       	movw	r30, r28
    196a:	e1 5a       	subi	r30, 0xA1	; 161
    196c:	ff 4f       	sbci	r31, 0xFF	; 255
    196e:	60 81       	ld	r22, Z
    1970:	71 81       	ldd	r23, Z+1	; 0x01
    1972:	82 81       	ldd	r24, Z+2	; 0x02
    1974:	93 81       	ldd	r25, Z+3	; 0x03
    1976:	20 e0       	ldi	r18, 0x00	; 0
    1978:	30 e0       	ldi	r19, 0x00	; 0
    197a:	40 e2       	ldi	r20, 0x20	; 32
    197c:	51 e4       	ldi	r21, 0x41	; 65
    197e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1982:	dc 01       	movw	r26, r24
    1984:	cb 01       	movw	r24, r22
    1986:	8e 01       	movw	r16, r28
    1988:	07 5a       	subi	r16, 0xA7	; 167
    198a:	1f 4f       	sbci	r17, 0xFF	; 255
    198c:	bc 01       	movw	r22, r24
    198e:	cd 01       	movw	r24, r26
    1990:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1994:	dc 01       	movw	r26, r24
    1996:	cb 01       	movw	r24, r22
    1998:	f8 01       	movw	r30, r16
    199a:	91 83       	std	Z+1, r25	; 0x01
    199c:	80 83       	st	Z, r24
    199e:	1f c0       	rjmp	.+62     	; 0x19de <LCD_sendCommand+0x134>
    19a0:	fe 01       	movw	r30, r28
    19a2:	e9 5a       	subi	r30, 0xA9	; 169
    19a4:	ff 4f       	sbci	r31, 0xFF	; 255
    19a6:	88 ec       	ldi	r24, 0xC8	; 200
    19a8:	90 e0       	ldi	r25, 0x00	; 0
    19aa:	91 83       	std	Z+1, r25	; 0x01
    19ac:	80 83       	st	Z, r24
    19ae:	fe 01       	movw	r30, r28
    19b0:	e9 5a       	subi	r30, 0xA9	; 169
    19b2:	ff 4f       	sbci	r31, 0xFF	; 255
    19b4:	80 81       	ld	r24, Z
    19b6:	91 81       	ldd	r25, Z+1	; 0x01
    19b8:	01 97       	sbiw	r24, 0x01	; 1
    19ba:	f1 f7       	brne	.-4      	; 0x19b8 <LCD_sendCommand+0x10e>
    19bc:	fe 01       	movw	r30, r28
    19be:	e9 5a       	subi	r30, 0xA9	; 169
    19c0:	ff 4f       	sbci	r31, 0xFF	; 255
    19c2:	91 83       	std	Z+1, r25	; 0x01
    19c4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19c6:	de 01       	movw	r26, r28
    19c8:	a7 5a       	subi	r26, 0xA7	; 167
    19ca:	bf 4f       	sbci	r27, 0xFF	; 255
    19cc:	fe 01       	movw	r30, r28
    19ce:	e7 5a       	subi	r30, 0xA7	; 167
    19d0:	ff 4f       	sbci	r31, 0xFF	; 255
    19d2:	80 81       	ld	r24, Z
    19d4:	91 81       	ldd	r25, Z+1	; 0x01
    19d6:	01 97       	sbiw	r24, 0x01	; 1
    19d8:	11 96       	adiw	r26, 0x01	; 1
    19da:	9c 93       	st	X, r25
    19dc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19de:	fe 01       	movw	r30, r28
    19e0:	e7 5a       	subi	r30, 0xA7	; 167
    19e2:	ff 4f       	sbci	r31, 0xFF	; 255
    19e4:	80 81       	ld	r24, Z
    19e6:	91 81       	ldd	r25, Z+1	; 0x01
    19e8:	00 97       	sbiw	r24, 0x00	; 0
    19ea:	d1 f6       	brne	.-76     	; 0x19a0 <LCD_sendCommand+0xf6>
    19ec:	27 c0       	rjmp	.+78     	; 0x1a3c <LCD_sendCommand+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19ee:	8e 01       	movw	r16, r28
    19f0:	07 5a       	subi	r16, 0xA7	; 167
    19f2:	1f 4f       	sbci	r17, 0xFF	; 255
    19f4:	fe 01       	movw	r30, r28
    19f6:	e5 5a       	subi	r30, 0xA5	; 165
    19f8:	ff 4f       	sbci	r31, 0xFF	; 255
    19fa:	60 81       	ld	r22, Z
    19fc:	71 81       	ldd	r23, Z+1	; 0x01
    19fe:	82 81       	ldd	r24, Z+2	; 0x02
    1a00:	93 81       	ldd	r25, Z+3	; 0x03
    1a02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a06:	dc 01       	movw	r26, r24
    1a08:	cb 01       	movw	r24, r22
    1a0a:	f8 01       	movw	r30, r16
    1a0c:	91 83       	std	Z+1, r25	; 0x01
    1a0e:	80 83       	st	Z, r24
    1a10:	de 01       	movw	r26, r28
    1a12:	ab 5a       	subi	r26, 0xAB	; 171
    1a14:	bf 4f       	sbci	r27, 0xFF	; 255
    1a16:	fe 01       	movw	r30, r28
    1a18:	e7 5a       	subi	r30, 0xA7	; 167
    1a1a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a1c:	80 81       	ld	r24, Z
    1a1e:	91 81       	ldd	r25, Z+1	; 0x01
    1a20:	8d 93       	st	X+, r24
    1a22:	9c 93       	st	X, r25
    1a24:	fe 01       	movw	r30, r28
    1a26:	eb 5a       	subi	r30, 0xAB	; 171
    1a28:	ff 4f       	sbci	r31, 0xFF	; 255
    1a2a:	80 81       	ld	r24, Z
    1a2c:	91 81       	ldd	r25, Z+1	; 0x01
    1a2e:	01 97       	sbiw	r24, 0x01	; 1
    1a30:	f1 f7       	brne	.-4      	; 0x1a2e <LCD_sendCommand+0x184>
    1a32:	fe 01       	movw	r30, r28
    1a34:	eb 5a       	subi	r30, 0xAB	; 171
    1a36:	ff 4f       	sbci	r31, 0xFF	; 255
    1a38:	91 83       	std	Z+1, r25	; 0x01
    1a3a:	80 83       	st	Z, r24
	_delay_ms(1);											 /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH);	 /* Enable LCD E=1 */
    1a3c:	80 e0       	ldi	r24, 0x00	; 0
    1a3e:	66 e0       	ldi	r22, 0x06	; 6
    1a40:	41 e0       	ldi	r20, 0x01	; 1
    1a42:	0e 94 50 09 	call	0x12a0	; 0x12a0 <GPIO_writePin>
    1a46:	fe 01       	movw	r30, r28
    1a48:	ef 5a       	subi	r30, 0xAF	; 175
    1a4a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a4c:	80 e0       	ldi	r24, 0x00	; 0
    1a4e:	90 e0       	ldi	r25, 0x00	; 0
    1a50:	a0 e8       	ldi	r26, 0x80	; 128
    1a52:	bf e3       	ldi	r27, 0x3F	; 63
    1a54:	80 83       	st	Z, r24
    1a56:	91 83       	std	Z+1, r25	; 0x01
    1a58:	a2 83       	std	Z+2, r26	; 0x02
    1a5a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a5c:	8e 01       	movw	r16, r28
    1a5e:	03 5b       	subi	r16, 0xB3	; 179
    1a60:	1f 4f       	sbci	r17, 0xFF	; 255
    1a62:	fe 01       	movw	r30, r28
    1a64:	ef 5a       	subi	r30, 0xAF	; 175
    1a66:	ff 4f       	sbci	r31, 0xFF	; 255
    1a68:	60 81       	ld	r22, Z
    1a6a:	71 81       	ldd	r23, Z+1	; 0x01
    1a6c:	82 81       	ldd	r24, Z+2	; 0x02
    1a6e:	93 81       	ldd	r25, Z+3	; 0x03
    1a70:	20 e0       	ldi	r18, 0x00	; 0
    1a72:	30 e0       	ldi	r19, 0x00	; 0
    1a74:	4a ef       	ldi	r20, 0xFA	; 250
    1a76:	54 e4       	ldi	r21, 0x44	; 68
    1a78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a7c:	dc 01       	movw	r26, r24
    1a7e:	cb 01       	movw	r24, r22
    1a80:	f8 01       	movw	r30, r16
    1a82:	80 83       	st	Z, r24
    1a84:	91 83       	std	Z+1, r25	; 0x01
    1a86:	a2 83       	std	Z+2, r26	; 0x02
    1a88:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1a8a:	fe 01       	movw	r30, r28
    1a8c:	e3 5b       	subi	r30, 0xB3	; 179
    1a8e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a90:	60 81       	ld	r22, Z
    1a92:	71 81       	ldd	r23, Z+1	; 0x01
    1a94:	82 81       	ldd	r24, Z+2	; 0x02
    1a96:	93 81       	ldd	r25, Z+3	; 0x03
    1a98:	20 e0       	ldi	r18, 0x00	; 0
    1a9a:	30 e0       	ldi	r19, 0x00	; 0
    1a9c:	40 e8       	ldi	r20, 0x80	; 128
    1a9e:	5f e3       	ldi	r21, 0x3F	; 63
    1aa0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1aa4:	88 23       	and	r24, r24
    1aa6:	44 f4       	brge	.+16     	; 0x1ab8 <LCD_sendCommand+0x20e>
		__ticks = 1;
    1aa8:	fe 01       	movw	r30, r28
    1aaa:	e5 5b       	subi	r30, 0xB5	; 181
    1aac:	ff 4f       	sbci	r31, 0xFF	; 255
    1aae:	81 e0       	ldi	r24, 0x01	; 1
    1ab0:	90 e0       	ldi	r25, 0x00	; 0
    1ab2:	91 83       	std	Z+1, r25	; 0x01
    1ab4:	80 83       	st	Z, r24
    1ab6:	64 c0       	rjmp	.+200    	; 0x1b80 <LCD_sendCommand+0x2d6>
	else if (__tmp > 65535)
    1ab8:	fe 01       	movw	r30, r28
    1aba:	e3 5b       	subi	r30, 0xB3	; 179
    1abc:	ff 4f       	sbci	r31, 0xFF	; 255
    1abe:	60 81       	ld	r22, Z
    1ac0:	71 81       	ldd	r23, Z+1	; 0x01
    1ac2:	82 81       	ldd	r24, Z+2	; 0x02
    1ac4:	93 81       	ldd	r25, Z+3	; 0x03
    1ac6:	20 e0       	ldi	r18, 0x00	; 0
    1ac8:	3f ef       	ldi	r19, 0xFF	; 255
    1aca:	4f e7       	ldi	r20, 0x7F	; 127
    1acc:	57 e4       	ldi	r21, 0x47	; 71
    1ace:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ad2:	18 16       	cp	r1, r24
    1ad4:	0c f0       	brlt	.+2      	; 0x1ad8 <LCD_sendCommand+0x22e>
    1ad6:	43 c0       	rjmp	.+134    	; 0x1b5e <LCD_sendCommand+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ad8:	fe 01       	movw	r30, r28
    1ada:	ef 5a       	subi	r30, 0xAF	; 175
    1adc:	ff 4f       	sbci	r31, 0xFF	; 255
    1ade:	60 81       	ld	r22, Z
    1ae0:	71 81       	ldd	r23, Z+1	; 0x01
    1ae2:	82 81       	ldd	r24, Z+2	; 0x02
    1ae4:	93 81       	ldd	r25, Z+3	; 0x03
    1ae6:	20 e0       	ldi	r18, 0x00	; 0
    1ae8:	30 e0       	ldi	r19, 0x00	; 0
    1aea:	40 e2       	ldi	r20, 0x20	; 32
    1aec:	51 e4       	ldi	r21, 0x41	; 65
    1aee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1af2:	dc 01       	movw	r26, r24
    1af4:	cb 01       	movw	r24, r22
    1af6:	8e 01       	movw	r16, r28
    1af8:	05 5b       	subi	r16, 0xB5	; 181
    1afa:	1f 4f       	sbci	r17, 0xFF	; 255
    1afc:	bc 01       	movw	r22, r24
    1afe:	cd 01       	movw	r24, r26
    1b00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b04:	dc 01       	movw	r26, r24
    1b06:	cb 01       	movw	r24, r22
    1b08:	f8 01       	movw	r30, r16
    1b0a:	91 83       	std	Z+1, r25	; 0x01
    1b0c:	80 83       	st	Z, r24
    1b0e:	1f c0       	rjmp	.+62     	; 0x1b4e <LCD_sendCommand+0x2a4>
    1b10:	fe 01       	movw	r30, r28
    1b12:	e7 5b       	subi	r30, 0xB7	; 183
    1b14:	ff 4f       	sbci	r31, 0xFF	; 255
    1b16:	88 ec       	ldi	r24, 0xC8	; 200
    1b18:	90 e0       	ldi	r25, 0x00	; 0
    1b1a:	91 83       	std	Z+1, r25	; 0x01
    1b1c:	80 83       	st	Z, r24
    1b1e:	fe 01       	movw	r30, r28
    1b20:	e7 5b       	subi	r30, 0xB7	; 183
    1b22:	ff 4f       	sbci	r31, 0xFF	; 255
    1b24:	80 81       	ld	r24, Z
    1b26:	91 81       	ldd	r25, Z+1	; 0x01
    1b28:	01 97       	sbiw	r24, 0x01	; 1
    1b2a:	f1 f7       	brne	.-4      	; 0x1b28 <LCD_sendCommand+0x27e>
    1b2c:	fe 01       	movw	r30, r28
    1b2e:	e7 5b       	subi	r30, 0xB7	; 183
    1b30:	ff 4f       	sbci	r31, 0xFF	; 255
    1b32:	91 83       	std	Z+1, r25	; 0x01
    1b34:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b36:	de 01       	movw	r26, r28
    1b38:	a5 5b       	subi	r26, 0xB5	; 181
    1b3a:	bf 4f       	sbci	r27, 0xFF	; 255
    1b3c:	fe 01       	movw	r30, r28
    1b3e:	e5 5b       	subi	r30, 0xB5	; 181
    1b40:	ff 4f       	sbci	r31, 0xFF	; 255
    1b42:	80 81       	ld	r24, Z
    1b44:	91 81       	ldd	r25, Z+1	; 0x01
    1b46:	01 97       	sbiw	r24, 0x01	; 1
    1b48:	11 96       	adiw	r26, 0x01	; 1
    1b4a:	9c 93       	st	X, r25
    1b4c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b4e:	fe 01       	movw	r30, r28
    1b50:	e5 5b       	subi	r30, 0xB5	; 181
    1b52:	ff 4f       	sbci	r31, 0xFF	; 255
    1b54:	80 81       	ld	r24, Z
    1b56:	91 81       	ldd	r25, Z+1	; 0x01
    1b58:	00 97       	sbiw	r24, 0x00	; 0
    1b5a:	d1 f6       	brne	.-76     	; 0x1b10 <LCD_sendCommand+0x266>
    1b5c:	27 c0       	rjmp	.+78     	; 0x1bac <LCD_sendCommand+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b5e:	8e 01       	movw	r16, r28
    1b60:	05 5b       	subi	r16, 0xB5	; 181
    1b62:	1f 4f       	sbci	r17, 0xFF	; 255
    1b64:	fe 01       	movw	r30, r28
    1b66:	e3 5b       	subi	r30, 0xB3	; 179
    1b68:	ff 4f       	sbci	r31, 0xFF	; 255
    1b6a:	60 81       	ld	r22, Z
    1b6c:	71 81       	ldd	r23, Z+1	; 0x01
    1b6e:	82 81       	ldd	r24, Z+2	; 0x02
    1b70:	93 81       	ldd	r25, Z+3	; 0x03
    1b72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b76:	dc 01       	movw	r26, r24
    1b78:	cb 01       	movw	r24, r22
    1b7a:	f8 01       	movw	r30, r16
    1b7c:	91 83       	std	Z+1, r25	; 0x01
    1b7e:	80 83       	st	Z, r24
    1b80:	de 01       	movw	r26, r28
    1b82:	a9 5b       	subi	r26, 0xB9	; 185
    1b84:	bf 4f       	sbci	r27, 0xFF	; 255
    1b86:	fe 01       	movw	r30, r28
    1b88:	e5 5b       	subi	r30, 0xB5	; 181
    1b8a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b8c:	80 81       	ld	r24, Z
    1b8e:	91 81       	ldd	r25, Z+1	; 0x01
    1b90:	8d 93       	st	X+, r24
    1b92:	9c 93       	st	X, r25
    1b94:	fe 01       	movw	r30, r28
    1b96:	e9 5b       	subi	r30, 0xB9	; 185
    1b98:	ff 4f       	sbci	r31, 0xFF	; 255
    1b9a:	80 81       	ld	r24, Z
    1b9c:	91 81       	ldd	r25, Z+1	; 0x01
    1b9e:	01 97       	sbiw	r24, 0x01	; 1
    1ba0:	f1 f7       	brne	.-4      	; 0x1b9e <LCD_sendCommand+0x2f4>
    1ba2:	fe 01       	movw	r30, r28
    1ba4:	e9 5b       	subi	r30, 0xB9	; 185
    1ba6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ba8:	91 83       	std	Z+1, r25	; 0x01
    1baa:	80 83       	st	Z, r24
	_delay_ms(1);											 /* delay for processing Tpw - Tdws = 190ns */

#if (LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB4_PIN_ID, GET_BIT(command, 4));
    1bac:	fe 01       	movw	r30, r28
    1bae:	ed 59       	subi	r30, 0x9D	; 157
    1bb0:	ff 4f       	sbci	r31, 0xFF	; 255
    1bb2:	80 81       	ld	r24, Z
    1bb4:	88 2f       	mov	r24, r24
    1bb6:	90 e0       	ldi	r25, 0x00	; 0
    1bb8:	80 71       	andi	r24, 0x10	; 16
    1bba:	90 70       	andi	r25, 0x00	; 0
    1bbc:	95 95       	asr	r25
    1bbe:	87 95       	ror	r24
    1bc0:	95 95       	asr	r25
    1bc2:	87 95       	ror	r24
    1bc4:	95 95       	asr	r25
    1bc6:	87 95       	ror	r24
    1bc8:	95 95       	asr	r25
    1bca:	87 95       	ror	r24
    1bcc:	98 2f       	mov	r25, r24
    1bce:	80 e0       	ldi	r24, 0x00	; 0
    1bd0:	65 e0       	ldi	r22, 0x05	; 5
    1bd2:	49 2f       	mov	r20, r25
    1bd4:	0e 94 50 09 	call	0x12a0	; 0x12a0 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB5_PIN_ID, GET_BIT(command, 5));
    1bd8:	fe 01       	movw	r30, r28
    1bda:	ed 59       	subi	r30, 0x9D	; 157
    1bdc:	ff 4f       	sbci	r31, 0xFF	; 255
    1bde:	80 81       	ld	r24, Z
    1be0:	88 2f       	mov	r24, r24
    1be2:	90 e0       	ldi	r25, 0x00	; 0
    1be4:	80 72       	andi	r24, 0x20	; 32
    1be6:	90 70       	andi	r25, 0x00	; 0
    1be8:	95 95       	asr	r25
    1bea:	87 95       	ror	r24
    1bec:	95 95       	asr	r25
    1bee:	87 95       	ror	r24
    1bf0:	95 95       	asr	r25
    1bf2:	87 95       	ror	r24
    1bf4:	95 95       	asr	r25
    1bf6:	87 95       	ror	r24
    1bf8:	95 95       	asr	r25
    1bfa:	87 95       	ror	r24
    1bfc:	98 2f       	mov	r25, r24
    1bfe:	80 e0       	ldi	r24, 0x00	; 0
    1c00:	64 e0       	ldi	r22, 0x04	; 4
    1c02:	49 2f       	mov	r20, r25
    1c04:	0e 94 50 09 	call	0x12a0	; 0x12a0 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB6_PIN_ID, GET_BIT(command, 6));
    1c08:	fe 01       	movw	r30, r28
    1c0a:	ed 59       	subi	r30, 0x9D	; 157
    1c0c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c0e:	80 81       	ld	r24, Z
    1c10:	88 2f       	mov	r24, r24
    1c12:	90 e0       	ldi	r25, 0x00	; 0
    1c14:	80 74       	andi	r24, 0x40	; 64
    1c16:	90 70       	andi	r25, 0x00	; 0
    1c18:	08 2e       	mov	r0, r24
    1c1a:	89 2f       	mov	r24, r25
    1c1c:	00 0c       	add	r0, r0
    1c1e:	88 1f       	adc	r24, r24
    1c20:	99 0b       	sbc	r25, r25
    1c22:	00 0c       	add	r0, r0
    1c24:	88 1f       	adc	r24, r24
    1c26:	99 1f       	adc	r25, r25
    1c28:	98 2f       	mov	r25, r24
    1c2a:	80 e0       	ldi	r24, 0x00	; 0
    1c2c:	63 e0       	ldi	r22, 0x03	; 3
    1c2e:	49 2f       	mov	r20, r25
    1c30:	0e 94 50 09 	call	0x12a0	; 0x12a0 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB7_PIN_ID, GET_BIT(command, 7));
    1c34:	fe 01       	movw	r30, r28
    1c36:	ed 59       	subi	r30, 0x9D	; 157
    1c38:	ff 4f       	sbci	r31, 0xFF	; 255
    1c3a:	80 81       	ld	r24, Z
    1c3c:	98 2f       	mov	r25, r24
    1c3e:	99 1f       	adc	r25, r25
    1c40:	99 27       	eor	r25, r25
    1c42:	99 1f       	adc	r25, r25
    1c44:	80 e0       	ldi	r24, 0x00	; 0
    1c46:	62 e0       	ldi	r22, 0x02	; 2
    1c48:	49 2f       	mov	r20, r25
    1c4a:	0e 94 50 09 	call	0x12a0	; 0x12a0 <GPIO_writePin>
    1c4e:	fe 01       	movw	r30, r28
    1c50:	ed 5b       	subi	r30, 0xBD	; 189
    1c52:	ff 4f       	sbci	r31, 0xFF	; 255
    1c54:	80 e0       	ldi	r24, 0x00	; 0
    1c56:	90 e0       	ldi	r25, 0x00	; 0
    1c58:	a0 e8       	ldi	r26, 0x80	; 128
    1c5a:	bf e3       	ldi	r27, 0x3F	; 63
    1c5c:	80 83       	st	Z, r24
    1c5e:	91 83       	std	Z+1, r25	; 0x01
    1c60:	a2 83       	std	Z+2, r26	; 0x02
    1c62:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c64:	8e 01       	movw	r16, r28
    1c66:	01 5c       	subi	r16, 0xC1	; 193
    1c68:	1f 4f       	sbci	r17, 0xFF	; 255
    1c6a:	fe 01       	movw	r30, r28
    1c6c:	ed 5b       	subi	r30, 0xBD	; 189
    1c6e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c70:	60 81       	ld	r22, Z
    1c72:	71 81       	ldd	r23, Z+1	; 0x01
    1c74:	82 81       	ldd	r24, Z+2	; 0x02
    1c76:	93 81       	ldd	r25, Z+3	; 0x03
    1c78:	20 e0       	ldi	r18, 0x00	; 0
    1c7a:	30 e0       	ldi	r19, 0x00	; 0
    1c7c:	4a ef       	ldi	r20, 0xFA	; 250
    1c7e:	54 e4       	ldi	r21, 0x44	; 68
    1c80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c84:	dc 01       	movw	r26, r24
    1c86:	cb 01       	movw	r24, r22
    1c88:	f8 01       	movw	r30, r16
    1c8a:	80 83       	st	Z, r24
    1c8c:	91 83       	std	Z+1, r25	; 0x01
    1c8e:	a2 83       	std	Z+2, r26	; 0x02
    1c90:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1c92:	fe 01       	movw	r30, r28
    1c94:	ff 96       	adiw	r30, 0x3f	; 63
    1c96:	60 81       	ld	r22, Z
    1c98:	71 81       	ldd	r23, Z+1	; 0x01
    1c9a:	82 81       	ldd	r24, Z+2	; 0x02
    1c9c:	93 81       	ldd	r25, Z+3	; 0x03
    1c9e:	20 e0       	ldi	r18, 0x00	; 0
    1ca0:	30 e0       	ldi	r19, 0x00	; 0
    1ca2:	40 e8       	ldi	r20, 0x80	; 128
    1ca4:	5f e3       	ldi	r21, 0x3F	; 63
    1ca6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1caa:	88 23       	and	r24, r24
    1cac:	2c f4       	brge	.+10     	; 0x1cb8 <LCD_sendCommand+0x40e>
		__ticks = 1;
    1cae:	81 e0       	ldi	r24, 0x01	; 1
    1cb0:	90 e0       	ldi	r25, 0x00	; 0
    1cb2:	9e af       	std	Y+62, r25	; 0x3e
    1cb4:	8d af       	std	Y+61, r24	; 0x3d
    1cb6:	46 c0       	rjmp	.+140    	; 0x1d44 <LCD_sendCommand+0x49a>
	else if (__tmp > 65535)
    1cb8:	fe 01       	movw	r30, r28
    1cba:	ff 96       	adiw	r30, 0x3f	; 63
    1cbc:	60 81       	ld	r22, Z
    1cbe:	71 81       	ldd	r23, Z+1	; 0x01
    1cc0:	82 81       	ldd	r24, Z+2	; 0x02
    1cc2:	93 81       	ldd	r25, Z+3	; 0x03
    1cc4:	20 e0       	ldi	r18, 0x00	; 0
    1cc6:	3f ef       	ldi	r19, 0xFF	; 255
    1cc8:	4f e7       	ldi	r20, 0x7F	; 127
    1cca:	57 e4       	ldi	r21, 0x47	; 71
    1ccc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1cd0:	18 16       	cp	r1, r24
    1cd2:	64 f5       	brge	.+88     	; 0x1d2c <LCD_sendCommand+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cd4:	fe 01       	movw	r30, r28
    1cd6:	ed 5b       	subi	r30, 0xBD	; 189
    1cd8:	ff 4f       	sbci	r31, 0xFF	; 255
    1cda:	60 81       	ld	r22, Z
    1cdc:	71 81       	ldd	r23, Z+1	; 0x01
    1cde:	82 81       	ldd	r24, Z+2	; 0x02
    1ce0:	93 81       	ldd	r25, Z+3	; 0x03
    1ce2:	20 e0       	ldi	r18, 0x00	; 0
    1ce4:	30 e0       	ldi	r19, 0x00	; 0
    1ce6:	40 e2       	ldi	r20, 0x20	; 32
    1ce8:	51 e4       	ldi	r21, 0x41	; 65
    1cea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cee:	dc 01       	movw	r26, r24
    1cf0:	cb 01       	movw	r24, r22
    1cf2:	bc 01       	movw	r22, r24
    1cf4:	cd 01       	movw	r24, r26
    1cf6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cfa:	dc 01       	movw	r26, r24
    1cfc:	cb 01       	movw	r24, r22
    1cfe:	9e af       	std	Y+62, r25	; 0x3e
    1d00:	8d af       	std	Y+61, r24	; 0x3d
    1d02:	0f c0       	rjmp	.+30     	; 0x1d22 <LCD_sendCommand+0x478>
    1d04:	88 ec       	ldi	r24, 0xC8	; 200
    1d06:	90 e0       	ldi	r25, 0x00	; 0
    1d08:	9c af       	std	Y+60, r25	; 0x3c
    1d0a:	8b af       	std	Y+59, r24	; 0x3b
    1d0c:	8b ad       	ldd	r24, Y+59	; 0x3b
    1d0e:	9c ad       	ldd	r25, Y+60	; 0x3c
    1d10:	01 97       	sbiw	r24, 0x01	; 1
    1d12:	f1 f7       	brne	.-4      	; 0x1d10 <LCD_sendCommand+0x466>
    1d14:	9c af       	std	Y+60, r25	; 0x3c
    1d16:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d18:	8d ad       	ldd	r24, Y+61	; 0x3d
    1d1a:	9e ad       	ldd	r25, Y+62	; 0x3e
    1d1c:	01 97       	sbiw	r24, 0x01	; 1
    1d1e:	9e af       	std	Y+62, r25	; 0x3e
    1d20:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d22:	8d ad       	ldd	r24, Y+61	; 0x3d
    1d24:	9e ad       	ldd	r25, Y+62	; 0x3e
    1d26:	00 97       	sbiw	r24, 0x00	; 0
    1d28:	69 f7       	brne	.-38     	; 0x1d04 <LCD_sendCommand+0x45a>
    1d2a:	16 c0       	rjmp	.+44     	; 0x1d58 <LCD_sendCommand+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d2c:	fe 01       	movw	r30, r28
    1d2e:	ff 96       	adiw	r30, 0x3f	; 63
    1d30:	60 81       	ld	r22, Z
    1d32:	71 81       	ldd	r23, Z+1	; 0x01
    1d34:	82 81       	ldd	r24, Z+2	; 0x02
    1d36:	93 81       	ldd	r25, Z+3	; 0x03
    1d38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d3c:	dc 01       	movw	r26, r24
    1d3e:	cb 01       	movw	r24, r22
    1d40:	9e af       	std	Y+62, r25	; 0x3e
    1d42:	8d af       	std	Y+61, r24	; 0x3d
    1d44:	8d ad       	ldd	r24, Y+61	; 0x3d
    1d46:	9e ad       	ldd	r25, Y+62	; 0x3e
    1d48:	9a af       	std	Y+58, r25	; 0x3a
    1d4a:	89 af       	std	Y+57, r24	; 0x39
    1d4c:	89 ad       	ldd	r24, Y+57	; 0x39
    1d4e:	9a ad       	ldd	r25, Y+58	; 0x3a
    1d50:	01 97       	sbiw	r24, 0x01	; 1
    1d52:	f1 f7       	brne	.-4      	; 0x1d50 <LCD_sendCommand+0x4a6>
    1d54:	9a af       	std	Y+58, r25	; 0x3a
    1d56:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1);											/* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);	/* Disable LCD E=0 */
    1d58:	80 e0       	ldi	r24, 0x00	; 0
    1d5a:	66 e0       	ldi	r22, 0x06	; 6
    1d5c:	40 e0       	ldi	r20, 0x00	; 0
    1d5e:	0e 94 50 09 	call	0x12a0	; 0x12a0 <GPIO_writePin>
    1d62:	80 e0       	ldi	r24, 0x00	; 0
    1d64:	90 e0       	ldi	r25, 0x00	; 0
    1d66:	a0 e8       	ldi	r26, 0x80	; 128
    1d68:	bf e3       	ldi	r27, 0x3F	; 63
    1d6a:	8d ab       	std	Y+53, r24	; 0x35
    1d6c:	9e ab       	std	Y+54, r25	; 0x36
    1d6e:	af ab       	std	Y+55, r26	; 0x37
    1d70:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d72:	6d a9       	ldd	r22, Y+53	; 0x35
    1d74:	7e a9       	ldd	r23, Y+54	; 0x36
    1d76:	8f a9       	ldd	r24, Y+55	; 0x37
    1d78:	98 ad       	ldd	r25, Y+56	; 0x38
    1d7a:	20 e0       	ldi	r18, 0x00	; 0
    1d7c:	30 e0       	ldi	r19, 0x00	; 0
    1d7e:	4a ef       	ldi	r20, 0xFA	; 250
    1d80:	54 e4       	ldi	r21, 0x44	; 68
    1d82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d86:	dc 01       	movw	r26, r24
    1d88:	cb 01       	movw	r24, r22
    1d8a:	89 ab       	std	Y+49, r24	; 0x31
    1d8c:	9a ab       	std	Y+50, r25	; 0x32
    1d8e:	ab ab       	std	Y+51, r26	; 0x33
    1d90:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1d92:	69 a9       	ldd	r22, Y+49	; 0x31
    1d94:	7a a9       	ldd	r23, Y+50	; 0x32
    1d96:	8b a9       	ldd	r24, Y+51	; 0x33
    1d98:	9c a9       	ldd	r25, Y+52	; 0x34
    1d9a:	20 e0       	ldi	r18, 0x00	; 0
    1d9c:	30 e0       	ldi	r19, 0x00	; 0
    1d9e:	40 e8       	ldi	r20, 0x80	; 128
    1da0:	5f e3       	ldi	r21, 0x3F	; 63
    1da2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1da6:	88 23       	and	r24, r24
    1da8:	2c f4       	brge	.+10     	; 0x1db4 <LCD_sendCommand+0x50a>
		__ticks = 1;
    1daa:	81 e0       	ldi	r24, 0x01	; 1
    1dac:	90 e0       	ldi	r25, 0x00	; 0
    1dae:	98 ab       	std	Y+48, r25	; 0x30
    1db0:	8f a7       	std	Y+47, r24	; 0x2f
    1db2:	3f c0       	rjmp	.+126    	; 0x1e32 <LCD_sendCommand+0x588>
	else if (__tmp > 65535)
    1db4:	69 a9       	ldd	r22, Y+49	; 0x31
    1db6:	7a a9       	ldd	r23, Y+50	; 0x32
    1db8:	8b a9       	ldd	r24, Y+51	; 0x33
    1dba:	9c a9       	ldd	r25, Y+52	; 0x34
    1dbc:	20 e0       	ldi	r18, 0x00	; 0
    1dbe:	3f ef       	ldi	r19, 0xFF	; 255
    1dc0:	4f e7       	ldi	r20, 0x7F	; 127
    1dc2:	57 e4       	ldi	r21, 0x47	; 71
    1dc4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1dc8:	18 16       	cp	r1, r24
    1dca:	4c f5       	brge	.+82     	; 0x1e1e <LCD_sendCommand+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dcc:	6d a9       	ldd	r22, Y+53	; 0x35
    1dce:	7e a9       	ldd	r23, Y+54	; 0x36
    1dd0:	8f a9       	ldd	r24, Y+55	; 0x37
    1dd2:	98 ad       	ldd	r25, Y+56	; 0x38
    1dd4:	20 e0       	ldi	r18, 0x00	; 0
    1dd6:	30 e0       	ldi	r19, 0x00	; 0
    1dd8:	40 e2       	ldi	r20, 0x20	; 32
    1dda:	51 e4       	ldi	r21, 0x41	; 65
    1ddc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1de0:	dc 01       	movw	r26, r24
    1de2:	cb 01       	movw	r24, r22
    1de4:	bc 01       	movw	r22, r24
    1de6:	cd 01       	movw	r24, r26
    1de8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dec:	dc 01       	movw	r26, r24
    1dee:	cb 01       	movw	r24, r22
    1df0:	98 ab       	std	Y+48, r25	; 0x30
    1df2:	8f a7       	std	Y+47, r24	; 0x2f
    1df4:	0f c0       	rjmp	.+30     	; 0x1e14 <LCD_sendCommand+0x56a>
    1df6:	88 ec       	ldi	r24, 0xC8	; 200
    1df8:	90 e0       	ldi	r25, 0x00	; 0
    1dfa:	9e a7       	std	Y+46, r25	; 0x2e
    1dfc:	8d a7       	std	Y+45, r24	; 0x2d
    1dfe:	8d a5       	ldd	r24, Y+45	; 0x2d
    1e00:	9e a5       	ldd	r25, Y+46	; 0x2e
    1e02:	01 97       	sbiw	r24, 0x01	; 1
    1e04:	f1 f7       	brne	.-4      	; 0x1e02 <LCD_sendCommand+0x558>
    1e06:	9e a7       	std	Y+46, r25	; 0x2e
    1e08:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e0a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e0c:	98 a9       	ldd	r25, Y+48	; 0x30
    1e0e:	01 97       	sbiw	r24, 0x01	; 1
    1e10:	98 ab       	std	Y+48, r25	; 0x30
    1e12:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e14:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e16:	98 a9       	ldd	r25, Y+48	; 0x30
    1e18:	00 97       	sbiw	r24, 0x00	; 0
    1e1a:	69 f7       	brne	.-38     	; 0x1df6 <LCD_sendCommand+0x54c>
    1e1c:	14 c0       	rjmp	.+40     	; 0x1e46 <LCD_sendCommand+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e1e:	69 a9       	ldd	r22, Y+49	; 0x31
    1e20:	7a a9       	ldd	r23, Y+50	; 0x32
    1e22:	8b a9       	ldd	r24, Y+51	; 0x33
    1e24:	9c a9       	ldd	r25, Y+52	; 0x34
    1e26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e2a:	dc 01       	movw	r26, r24
    1e2c:	cb 01       	movw	r24, r22
    1e2e:	98 ab       	std	Y+48, r25	; 0x30
    1e30:	8f a7       	std	Y+47, r24	; 0x2f
    1e32:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e34:	98 a9       	ldd	r25, Y+48	; 0x30
    1e36:	9c a7       	std	Y+44, r25	; 0x2c
    1e38:	8b a7       	std	Y+43, r24	; 0x2b
    1e3a:	8b a5       	ldd	r24, Y+43	; 0x2b
    1e3c:	9c a5       	ldd	r25, Y+44	; 0x2c
    1e3e:	01 97       	sbiw	r24, 0x01	; 1
    1e40:	f1 f7       	brne	.-4      	; 0x1e3e <LCD_sendCommand+0x594>
    1e42:	9c a7       	std	Y+44, r25	; 0x2c
    1e44:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);											/* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH); /* Enable LCD E=1 */
    1e46:	80 e0       	ldi	r24, 0x00	; 0
    1e48:	66 e0       	ldi	r22, 0x06	; 6
    1e4a:	41 e0       	ldi	r20, 0x01	; 1
    1e4c:	0e 94 50 09 	call	0x12a0	; 0x12a0 <GPIO_writePin>
    1e50:	80 e0       	ldi	r24, 0x00	; 0
    1e52:	90 e0       	ldi	r25, 0x00	; 0
    1e54:	a0 e8       	ldi	r26, 0x80	; 128
    1e56:	bf e3       	ldi	r27, 0x3F	; 63
    1e58:	8f a3       	std	Y+39, r24	; 0x27
    1e5a:	98 a7       	std	Y+40, r25	; 0x28
    1e5c:	a9 a7       	std	Y+41, r26	; 0x29
    1e5e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e60:	6f a1       	ldd	r22, Y+39	; 0x27
    1e62:	78 a5       	ldd	r23, Y+40	; 0x28
    1e64:	89 a5       	ldd	r24, Y+41	; 0x29
    1e66:	9a a5       	ldd	r25, Y+42	; 0x2a
    1e68:	20 e0       	ldi	r18, 0x00	; 0
    1e6a:	30 e0       	ldi	r19, 0x00	; 0
    1e6c:	4a ef       	ldi	r20, 0xFA	; 250
    1e6e:	54 e4       	ldi	r21, 0x44	; 68
    1e70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e74:	dc 01       	movw	r26, r24
    1e76:	cb 01       	movw	r24, r22
    1e78:	8b a3       	std	Y+35, r24	; 0x23
    1e7a:	9c a3       	std	Y+36, r25	; 0x24
    1e7c:	ad a3       	std	Y+37, r26	; 0x25
    1e7e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1e80:	6b a1       	ldd	r22, Y+35	; 0x23
    1e82:	7c a1       	ldd	r23, Y+36	; 0x24
    1e84:	8d a1       	ldd	r24, Y+37	; 0x25
    1e86:	9e a1       	ldd	r25, Y+38	; 0x26
    1e88:	20 e0       	ldi	r18, 0x00	; 0
    1e8a:	30 e0       	ldi	r19, 0x00	; 0
    1e8c:	40 e8       	ldi	r20, 0x80	; 128
    1e8e:	5f e3       	ldi	r21, 0x3F	; 63
    1e90:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1e94:	88 23       	and	r24, r24
    1e96:	2c f4       	brge	.+10     	; 0x1ea2 <LCD_sendCommand+0x5f8>
		__ticks = 1;
    1e98:	81 e0       	ldi	r24, 0x01	; 1
    1e9a:	90 e0       	ldi	r25, 0x00	; 0
    1e9c:	9a a3       	std	Y+34, r25	; 0x22
    1e9e:	89 a3       	std	Y+33, r24	; 0x21
    1ea0:	3f c0       	rjmp	.+126    	; 0x1f20 <LCD_sendCommand+0x676>
	else if (__tmp > 65535)
    1ea2:	6b a1       	ldd	r22, Y+35	; 0x23
    1ea4:	7c a1       	ldd	r23, Y+36	; 0x24
    1ea6:	8d a1       	ldd	r24, Y+37	; 0x25
    1ea8:	9e a1       	ldd	r25, Y+38	; 0x26
    1eaa:	20 e0       	ldi	r18, 0x00	; 0
    1eac:	3f ef       	ldi	r19, 0xFF	; 255
    1eae:	4f e7       	ldi	r20, 0x7F	; 127
    1eb0:	57 e4       	ldi	r21, 0x47	; 71
    1eb2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1eb6:	18 16       	cp	r1, r24
    1eb8:	4c f5       	brge	.+82     	; 0x1f0c <LCD_sendCommand+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1eba:	6f a1       	ldd	r22, Y+39	; 0x27
    1ebc:	78 a5       	ldd	r23, Y+40	; 0x28
    1ebe:	89 a5       	ldd	r24, Y+41	; 0x29
    1ec0:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ec2:	20 e0       	ldi	r18, 0x00	; 0
    1ec4:	30 e0       	ldi	r19, 0x00	; 0
    1ec6:	40 e2       	ldi	r20, 0x20	; 32
    1ec8:	51 e4       	ldi	r21, 0x41	; 65
    1eca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ece:	dc 01       	movw	r26, r24
    1ed0:	cb 01       	movw	r24, r22
    1ed2:	bc 01       	movw	r22, r24
    1ed4:	cd 01       	movw	r24, r26
    1ed6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1eda:	dc 01       	movw	r26, r24
    1edc:	cb 01       	movw	r24, r22
    1ede:	9a a3       	std	Y+34, r25	; 0x22
    1ee0:	89 a3       	std	Y+33, r24	; 0x21
    1ee2:	0f c0       	rjmp	.+30     	; 0x1f02 <LCD_sendCommand+0x658>
    1ee4:	88 ec       	ldi	r24, 0xC8	; 200
    1ee6:	90 e0       	ldi	r25, 0x00	; 0
    1ee8:	98 a3       	std	Y+32, r25	; 0x20
    1eea:	8f 8f       	std	Y+31, r24	; 0x1f
    1eec:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1eee:	98 a1       	ldd	r25, Y+32	; 0x20
    1ef0:	01 97       	sbiw	r24, 0x01	; 1
    1ef2:	f1 f7       	brne	.-4      	; 0x1ef0 <LCD_sendCommand+0x646>
    1ef4:	98 a3       	std	Y+32, r25	; 0x20
    1ef6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ef8:	89 a1       	ldd	r24, Y+33	; 0x21
    1efa:	9a a1       	ldd	r25, Y+34	; 0x22
    1efc:	01 97       	sbiw	r24, 0x01	; 1
    1efe:	9a a3       	std	Y+34, r25	; 0x22
    1f00:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f02:	89 a1       	ldd	r24, Y+33	; 0x21
    1f04:	9a a1       	ldd	r25, Y+34	; 0x22
    1f06:	00 97       	sbiw	r24, 0x00	; 0
    1f08:	69 f7       	brne	.-38     	; 0x1ee4 <LCD_sendCommand+0x63a>
    1f0a:	14 c0       	rjmp	.+40     	; 0x1f34 <LCD_sendCommand+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f0c:	6b a1       	ldd	r22, Y+35	; 0x23
    1f0e:	7c a1       	ldd	r23, Y+36	; 0x24
    1f10:	8d a1       	ldd	r24, Y+37	; 0x25
    1f12:	9e a1       	ldd	r25, Y+38	; 0x26
    1f14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f18:	dc 01       	movw	r26, r24
    1f1a:	cb 01       	movw	r24, r22
    1f1c:	9a a3       	std	Y+34, r25	; 0x22
    1f1e:	89 a3       	std	Y+33, r24	; 0x21
    1f20:	89 a1       	ldd	r24, Y+33	; 0x21
    1f22:	9a a1       	ldd	r25, Y+34	; 0x22
    1f24:	9e 8f       	std	Y+30, r25	; 0x1e
    1f26:	8d 8f       	std	Y+29, r24	; 0x1d
    1f28:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1f2a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1f2c:	01 97       	sbiw	r24, 0x01	; 1
    1f2e:	f1 f7       	brne	.-4      	; 0x1f2c <LCD_sendCommand+0x682>
    1f30:	9e 8f       	std	Y+30, r25	; 0x1e
    1f32:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);											/* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB4_PIN_ID, GET_BIT(command, 0));
    1f34:	fe 01       	movw	r30, r28
    1f36:	ed 59       	subi	r30, 0x9D	; 157
    1f38:	ff 4f       	sbci	r31, 0xFF	; 255
    1f3a:	80 81       	ld	r24, Z
    1f3c:	98 2f       	mov	r25, r24
    1f3e:	91 70       	andi	r25, 0x01	; 1
    1f40:	80 e0       	ldi	r24, 0x00	; 0
    1f42:	65 e0       	ldi	r22, 0x05	; 5
    1f44:	49 2f       	mov	r20, r25
    1f46:	0e 94 50 09 	call	0x12a0	; 0x12a0 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB5_PIN_ID, GET_BIT(command, 1));
    1f4a:	fe 01       	movw	r30, r28
    1f4c:	ed 59       	subi	r30, 0x9D	; 157
    1f4e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f50:	80 81       	ld	r24, Z
    1f52:	88 2f       	mov	r24, r24
    1f54:	90 e0       	ldi	r25, 0x00	; 0
    1f56:	82 70       	andi	r24, 0x02	; 2
    1f58:	90 70       	andi	r25, 0x00	; 0
    1f5a:	95 95       	asr	r25
    1f5c:	87 95       	ror	r24
    1f5e:	98 2f       	mov	r25, r24
    1f60:	80 e0       	ldi	r24, 0x00	; 0
    1f62:	64 e0       	ldi	r22, 0x04	; 4
    1f64:	49 2f       	mov	r20, r25
    1f66:	0e 94 50 09 	call	0x12a0	; 0x12a0 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB6_PIN_ID, GET_BIT(command, 2));
    1f6a:	fe 01       	movw	r30, r28
    1f6c:	ed 59       	subi	r30, 0x9D	; 157
    1f6e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f70:	80 81       	ld	r24, Z
    1f72:	88 2f       	mov	r24, r24
    1f74:	90 e0       	ldi	r25, 0x00	; 0
    1f76:	84 70       	andi	r24, 0x04	; 4
    1f78:	90 70       	andi	r25, 0x00	; 0
    1f7a:	95 95       	asr	r25
    1f7c:	87 95       	ror	r24
    1f7e:	95 95       	asr	r25
    1f80:	87 95       	ror	r24
    1f82:	98 2f       	mov	r25, r24
    1f84:	80 e0       	ldi	r24, 0x00	; 0
    1f86:	63 e0       	ldi	r22, 0x03	; 3
    1f88:	49 2f       	mov	r20, r25
    1f8a:	0e 94 50 09 	call	0x12a0	; 0x12a0 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB7_PIN_ID, GET_BIT(command, 3));
    1f8e:	fe 01       	movw	r30, r28
    1f90:	ed 59       	subi	r30, 0x9D	; 157
    1f92:	ff 4f       	sbci	r31, 0xFF	; 255
    1f94:	80 81       	ld	r24, Z
    1f96:	88 2f       	mov	r24, r24
    1f98:	90 e0       	ldi	r25, 0x00	; 0
    1f9a:	88 70       	andi	r24, 0x08	; 8
    1f9c:	90 70       	andi	r25, 0x00	; 0
    1f9e:	95 95       	asr	r25
    1fa0:	87 95       	ror	r24
    1fa2:	95 95       	asr	r25
    1fa4:	87 95       	ror	r24
    1fa6:	95 95       	asr	r25
    1fa8:	87 95       	ror	r24
    1faa:	98 2f       	mov	r25, r24
    1fac:	80 e0       	ldi	r24, 0x00	; 0
    1fae:	62 e0       	ldi	r22, 0x02	; 2
    1fb0:	49 2f       	mov	r20, r25
    1fb2:	0e 94 50 09 	call	0x12a0	; 0x12a0 <GPIO_writePin>
    1fb6:	80 e0       	ldi	r24, 0x00	; 0
    1fb8:	90 e0       	ldi	r25, 0x00	; 0
    1fba:	a0 e8       	ldi	r26, 0x80	; 128
    1fbc:	bf e3       	ldi	r27, 0x3F	; 63
    1fbe:	89 8f       	std	Y+25, r24	; 0x19
    1fc0:	9a 8f       	std	Y+26, r25	; 0x1a
    1fc2:	ab 8f       	std	Y+27, r26	; 0x1b
    1fc4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fc6:	69 8d       	ldd	r22, Y+25	; 0x19
    1fc8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1fca:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1fcc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1fce:	20 e0       	ldi	r18, 0x00	; 0
    1fd0:	30 e0       	ldi	r19, 0x00	; 0
    1fd2:	4a ef       	ldi	r20, 0xFA	; 250
    1fd4:	54 e4       	ldi	r21, 0x44	; 68
    1fd6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fda:	dc 01       	movw	r26, r24
    1fdc:	cb 01       	movw	r24, r22
    1fde:	8d 8b       	std	Y+21, r24	; 0x15
    1fe0:	9e 8b       	std	Y+22, r25	; 0x16
    1fe2:	af 8b       	std	Y+23, r26	; 0x17
    1fe4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1fe6:	6d 89       	ldd	r22, Y+21	; 0x15
    1fe8:	7e 89       	ldd	r23, Y+22	; 0x16
    1fea:	8f 89       	ldd	r24, Y+23	; 0x17
    1fec:	98 8d       	ldd	r25, Y+24	; 0x18
    1fee:	20 e0       	ldi	r18, 0x00	; 0
    1ff0:	30 e0       	ldi	r19, 0x00	; 0
    1ff2:	40 e8       	ldi	r20, 0x80	; 128
    1ff4:	5f e3       	ldi	r21, 0x3F	; 63
    1ff6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ffa:	88 23       	and	r24, r24
    1ffc:	2c f4       	brge	.+10     	; 0x2008 <LCD_sendCommand+0x75e>
		__ticks = 1;
    1ffe:	81 e0       	ldi	r24, 0x01	; 1
    2000:	90 e0       	ldi	r25, 0x00	; 0
    2002:	9c 8b       	std	Y+20, r25	; 0x14
    2004:	8b 8b       	std	Y+19, r24	; 0x13
    2006:	3f c0       	rjmp	.+126    	; 0x2086 <LCD_sendCommand+0x7dc>
	else if (__tmp > 65535)
    2008:	6d 89       	ldd	r22, Y+21	; 0x15
    200a:	7e 89       	ldd	r23, Y+22	; 0x16
    200c:	8f 89       	ldd	r24, Y+23	; 0x17
    200e:	98 8d       	ldd	r25, Y+24	; 0x18
    2010:	20 e0       	ldi	r18, 0x00	; 0
    2012:	3f ef       	ldi	r19, 0xFF	; 255
    2014:	4f e7       	ldi	r20, 0x7F	; 127
    2016:	57 e4       	ldi	r21, 0x47	; 71
    2018:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    201c:	18 16       	cp	r1, r24
    201e:	4c f5       	brge	.+82     	; 0x2072 <LCD_sendCommand+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2020:	69 8d       	ldd	r22, Y+25	; 0x19
    2022:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2024:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2026:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2028:	20 e0       	ldi	r18, 0x00	; 0
    202a:	30 e0       	ldi	r19, 0x00	; 0
    202c:	40 e2       	ldi	r20, 0x20	; 32
    202e:	51 e4       	ldi	r21, 0x41	; 65
    2030:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2034:	dc 01       	movw	r26, r24
    2036:	cb 01       	movw	r24, r22
    2038:	bc 01       	movw	r22, r24
    203a:	cd 01       	movw	r24, r26
    203c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2040:	dc 01       	movw	r26, r24
    2042:	cb 01       	movw	r24, r22
    2044:	9c 8b       	std	Y+20, r25	; 0x14
    2046:	8b 8b       	std	Y+19, r24	; 0x13
    2048:	0f c0       	rjmp	.+30     	; 0x2068 <LCD_sendCommand+0x7be>
    204a:	88 ec       	ldi	r24, 0xC8	; 200
    204c:	90 e0       	ldi	r25, 0x00	; 0
    204e:	9a 8b       	std	Y+18, r25	; 0x12
    2050:	89 8b       	std	Y+17, r24	; 0x11
    2052:	89 89       	ldd	r24, Y+17	; 0x11
    2054:	9a 89       	ldd	r25, Y+18	; 0x12
    2056:	01 97       	sbiw	r24, 0x01	; 1
    2058:	f1 f7       	brne	.-4      	; 0x2056 <LCD_sendCommand+0x7ac>
    205a:	9a 8b       	std	Y+18, r25	; 0x12
    205c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    205e:	8b 89       	ldd	r24, Y+19	; 0x13
    2060:	9c 89       	ldd	r25, Y+20	; 0x14
    2062:	01 97       	sbiw	r24, 0x01	; 1
    2064:	9c 8b       	std	Y+20, r25	; 0x14
    2066:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2068:	8b 89       	ldd	r24, Y+19	; 0x13
    206a:	9c 89       	ldd	r25, Y+20	; 0x14
    206c:	00 97       	sbiw	r24, 0x00	; 0
    206e:	69 f7       	brne	.-38     	; 0x204a <LCD_sendCommand+0x7a0>
    2070:	14 c0       	rjmp	.+40     	; 0x209a <LCD_sendCommand+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2072:	6d 89       	ldd	r22, Y+21	; 0x15
    2074:	7e 89       	ldd	r23, Y+22	; 0x16
    2076:	8f 89       	ldd	r24, Y+23	; 0x17
    2078:	98 8d       	ldd	r25, Y+24	; 0x18
    207a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    207e:	dc 01       	movw	r26, r24
    2080:	cb 01       	movw	r24, r22
    2082:	9c 8b       	std	Y+20, r25	; 0x14
    2084:	8b 8b       	std	Y+19, r24	; 0x13
    2086:	8b 89       	ldd	r24, Y+19	; 0x13
    2088:	9c 89       	ldd	r25, Y+20	; 0x14
    208a:	98 8b       	std	Y+16, r25	; 0x10
    208c:	8f 87       	std	Y+15, r24	; 0x0f
    208e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2090:	98 89       	ldd	r25, Y+16	; 0x10
    2092:	01 97       	sbiw	r24, 0x01	; 1
    2094:	f1 f7       	brne	.-4      	; 0x2092 <LCD_sendCommand+0x7e8>
    2096:	98 8b       	std	Y+16, r25	; 0x10
    2098:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1);										   /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW); /* Disable LCD E=0 */
    209a:	80 e0       	ldi	r24, 0x00	; 0
    209c:	66 e0       	ldi	r22, 0x06	; 6
    209e:	40 e0       	ldi	r20, 0x00	; 0
    20a0:	0e 94 50 09 	call	0x12a0	; 0x12a0 <GPIO_writePin>
    20a4:	80 e0       	ldi	r24, 0x00	; 0
    20a6:	90 e0       	ldi	r25, 0x00	; 0
    20a8:	a0 e8       	ldi	r26, 0x80	; 128
    20aa:	bf e3       	ldi	r27, 0x3F	; 63
    20ac:	8b 87       	std	Y+11, r24	; 0x0b
    20ae:	9c 87       	std	Y+12, r25	; 0x0c
    20b0:	ad 87       	std	Y+13, r26	; 0x0d
    20b2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20b4:	6b 85       	ldd	r22, Y+11	; 0x0b
    20b6:	7c 85       	ldd	r23, Y+12	; 0x0c
    20b8:	8d 85       	ldd	r24, Y+13	; 0x0d
    20ba:	9e 85       	ldd	r25, Y+14	; 0x0e
    20bc:	20 e0       	ldi	r18, 0x00	; 0
    20be:	30 e0       	ldi	r19, 0x00	; 0
    20c0:	4a ef       	ldi	r20, 0xFA	; 250
    20c2:	54 e4       	ldi	r21, 0x44	; 68
    20c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20c8:	dc 01       	movw	r26, r24
    20ca:	cb 01       	movw	r24, r22
    20cc:	8f 83       	std	Y+7, r24	; 0x07
    20ce:	98 87       	std	Y+8, r25	; 0x08
    20d0:	a9 87       	std	Y+9, r26	; 0x09
    20d2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    20d4:	6f 81       	ldd	r22, Y+7	; 0x07
    20d6:	78 85       	ldd	r23, Y+8	; 0x08
    20d8:	89 85       	ldd	r24, Y+9	; 0x09
    20da:	9a 85       	ldd	r25, Y+10	; 0x0a
    20dc:	20 e0       	ldi	r18, 0x00	; 0
    20de:	30 e0       	ldi	r19, 0x00	; 0
    20e0:	40 e8       	ldi	r20, 0x80	; 128
    20e2:	5f e3       	ldi	r21, 0x3F	; 63
    20e4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    20e8:	88 23       	and	r24, r24
    20ea:	2c f4       	brge	.+10     	; 0x20f6 <LCD_sendCommand+0x84c>
		__ticks = 1;
    20ec:	81 e0       	ldi	r24, 0x01	; 1
    20ee:	90 e0       	ldi	r25, 0x00	; 0
    20f0:	9e 83       	std	Y+6, r25	; 0x06
    20f2:	8d 83       	std	Y+5, r24	; 0x05
    20f4:	3f c0       	rjmp	.+126    	; 0x2174 <LCD_sendCommand+0x8ca>
	else if (__tmp > 65535)
    20f6:	6f 81       	ldd	r22, Y+7	; 0x07
    20f8:	78 85       	ldd	r23, Y+8	; 0x08
    20fa:	89 85       	ldd	r24, Y+9	; 0x09
    20fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    20fe:	20 e0       	ldi	r18, 0x00	; 0
    2100:	3f ef       	ldi	r19, 0xFF	; 255
    2102:	4f e7       	ldi	r20, 0x7F	; 127
    2104:	57 e4       	ldi	r21, 0x47	; 71
    2106:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    210a:	18 16       	cp	r1, r24
    210c:	4c f5       	brge	.+82     	; 0x2160 <LCD_sendCommand+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    210e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2110:	7c 85       	ldd	r23, Y+12	; 0x0c
    2112:	8d 85       	ldd	r24, Y+13	; 0x0d
    2114:	9e 85       	ldd	r25, Y+14	; 0x0e
    2116:	20 e0       	ldi	r18, 0x00	; 0
    2118:	30 e0       	ldi	r19, 0x00	; 0
    211a:	40 e2       	ldi	r20, 0x20	; 32
    211c:	51 e4       	ldi	r21, 0x41	; 65
    211e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2122:	dc 01       	movw	r26, r24
    2124:	cb 01       	movw	r24, r22
    2126:	bc 01       	movw	r22, r24
    2128:	cd 01       	movw	r24, r26
    212a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    212e:	dc 01       	movw	r26, r24
    2130:	cb 01       	movw	r24, r22
    2132:	9e 83       	std	Y+6, r25	; 0x06
    2134:	8d 83       	std	Y+5, r24	; 0x05
    2136:	0f c0       	rjmp	.+30     	; 0x2156 <LCD_sendCommand+0x8ac>
    2138:	88 ec       	ldi	r24, 0xC8	; 200
    213a:	90 e0       	ldi	r25, 0x00	; 0
    213c:	9c 83       	std	Y+4, r25	; 0x04
    213e:	8b 83       	std	Y+3, r24	; 0x03
    2140:	8b 81       	ldd	r24, Y+3	; 0x03
    2142:	9c 81       	ldd	r25, Y+4	; 0x04
    2144:	01 97       	sbiw	r24, 0x01	; 1
    2146:	f1 f7       	brne	.-4      	; 0x2144 <LCD_sendCommand+0x89a>
    2148:	9c 83       	std	Y+4, r25	; 0x04
    214a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    214c:	8d 81       	ldd	r24, Y+5	; 0x05
    214e:	9e 81       	ldd	r25, Y+6	; 0x06
    2150:	01 97       	sbiw	r24, 0x01	; 1
    2152:	9e 83       	std	Y+6, r25	; 0x06
    2154:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2156:	8d 81       	ldd	r24, Y+5	; 0x05
    2158:	9e 81       	ldd	r25, Y+6	; 0x06
    215a:	00 97       	sbiw	r24, 0x00	; 0
    215c:	69 f7       	brne	.-38     	; 0x2138 <LCD_sendCommand+0x88e>
    215e:	14 c0       	rjmp	.+40     	; 0x2188 <LCD_sendCommand+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2160:	6f 81       	ldd	r22, Y+7	; 0x07
    2162:	78 85       	ldd	r23, Y+8	; 0x08
    2164:	89 85       	ldd	r24, Y+9	; 0x09
    2166:	9a 85       	ldd	r25, Y+10	; 0x0a
    2168:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    216c:	dc 01       	movw	r26, r24
    216e:	cb 01       	movw	r24, r22
    2170:	9e 83       	std	Y+6, r25	; 0x06
    2172:	8d 83       	std	Y+5, r24	; 0x05
    2174:	8d 81       	ldd	r24, Y+5	; 0x05
    2176:	9e 81       	ldd	r25, Y+6	; 0x06
    2178:	9a 83       	std	Y+2, r25	; 0x02
    217a:	89 83       	std	Y+1, r24	; 0x01
    217c:	89 81       	ldd	r24, Y+1	; 0x01
    217e:	9a 81       	ldd	r25, Y+2	; 0x02
    2180:	01 97       	sbiw	r24, 0x01	; 1
    2182:	f1 f7       	brne	.-4      	; 0x2180 <LCD_sendCommand+0x8d6>
    2184:	9a 83       	std	Y+2, r25	; 0x02
    2186:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID, command);			   /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1);										   /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1);										   /* delay for processing Th = 13ns */
#endif
}
    2188:	cd 59       	subi	r28, 0x9D	; 157
    218a:	df 4f       	sbci	r29, 0xFF	; 255
    218c:	0f b6       	in	r0, 0x3f	; 63
    218e:	f8 94       	cli
    2190:	de bf       	out	0x3e, r29	; 62
    2192:	0f be       	out	0x3f, r0	; 63
    2194:	cd bf       	out	0x3d, r28	; 61
    2196:	cf 91       	pop	r28
    2198:	df 91       	pop	r29
    219a:	1f 91       	pop	r17
    219c:	0f 91       	pop	r16
    219e:	08 95       	ret

000021a0 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    21a0:	0f 93       	push	r16
    21a2:	1f 93       	push	r17
    21a4:	df 93       	push	r29
    21a6:	cf 93       	push	r28
    21a8:	cd b7       	in	r28, 0x3d	; 61
    21aa:	de b7       	in	r29, 0x3e	; 62
    21ac:	c3 56       	subi	r28, 0x63	; 99
    21ae:	d0 40       	sbci	r29, 0x00	; 0
    21b0:	0f b6       	in	r0, 0x3f	; 63
    21b2:	f8 94       	cli
    21b4:	de bf       	out	0x3e, r29	; 62
    21b6:	0f be       	out	0x3f, r0	; 63
    21b8:	cd bf       	out	0x3d, r28	; 61
    21ba:	fe 01       	movw	r30, r28
    21bc:	ed 59       	subi	r30, 0x9D	; 157
    21be:	ff 4f       	sbci	r31, 0xFF	; 255
    21c0:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_HIGH); /* Data Mode RS=1 */
    21c2:	80 e0       	ldi	r24, 0x00	; 0
    21c4:	67 e0       	ldi	r22, 0x07	; 7
    21c6:	41 e0       	ldi	r20, 0x01	; 1
    21c8:	0e 94 50 09 	call	0x12a0	; 0x12a0 <GPIO_writePin>
    21cc:	fe 01       	movw	r30, r28
    21ce:	e1 5a       	subi	r30, 0xA1	; 161
    21d0:	ff 4f       	sbci	r31, 0xFF	; 255
    21d2:	80 e0       	ldi	r24, 0x00	; 0
    21d4:	90 e0       	ldi	r25, 0x00	; 0
    21d6:	a0 e8       	ldi	r26, 0x80	; 128
    21d8:	bf e3       	ldi	r27, 0x3F	; 63
    21da:	80 83       	st	Z, r24
    21dc:	91 83       	std	Z+1, r25	; 0x01
    21de:	a2 83       	std	Z+2, r26	; 0x02
    21e0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21e2:	8e 01       	movw	r16, r28
    21e4:	05 5a       	subi	r16, 0xA5	; 165
    21e6:	1f 4f       	sbci	r17, 0xFF	; 255
    21e8:	fe 01       	movw	r30, r28
    21ea:	e1 5a       	subi	r30, 0xA1	; 161
    21ec:	ff 4f       	sbci	r31, 0xFF	; 255
    21ee:	60 81       	ld	r22, Z
    21f0:	71 81       	ldd	r23, Z+1	; 0x01
    21f2:	82 81       	ldd	r24, Z+2	; 0x02
    21f4:	93 81       	ldd	r25, Z+3	; 0x03
    21f6:	20 e0       	ldi	r18, 0x00	; 0
    21f8:	30 e0       	ldi	r19, 0x00	; 0
    21fa:	4a ef       	ldi	r20, 0xFA	; 250
    21fc:	54 e4       	ldi	r21, 0x44	; 68
    21fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2202:	dc 01       	movw	r26, r24
    2204:	cb 01       	movw	r24, r22
    2206:	f8 01       	movw	r30, r16
    2208:	80 83       	st	Z, r24
    220a:	91 83       	std	Z+1, r25	; 0x01
    220c:	a2 83       	std	Z+2, r26	; 0x02
    220e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2210:	fe 01       	movw	r30, r28
    2212:	e5 5a       	subi	r30, 0xA5	; 165
    2214:	ff 4f       	sbci	r31, 0xFF	; 255
    2216:	60 81       	ld	r22, Z
    2218:	71 81       	ldd	r23, Z+1	; 0x01
    221a:	82 81       	ldd	r24, Z+2	; 0x02
    221c:	93 81       	ldd	r25, Z+3	; 0x03
    221e:	20 e0       	ldi	r18, 0x00	; 0
    2220:	30 e0       	ldi	r19, 0x00	; 0
    2222:	40 e8       	ldi	r20, 0x80	; 128
    2224:	5f e3       	ldi	r21, 0x3F	; 63
    2226:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    222a:	88 23       	and	r24, r24
    222c:	44 f4       	brge	.+16     	; 0x223e <LCD_displayCharacter+0x9e>
		__ticks = 1;
    222e:	fe 01       	movw	r30, r28
    2230:	e7 5a       	subi	r30, 0xA7	; 167
    2232:	ff 4f       	sbci	r31, 0xFF	; 255
    2234:	81 e0       	ldi	r24, 0x01	; 1
    2236:	90 e0       	ldi	r25, 0x00	; 0
    2238:	91 83       	std	Z+1, r25	; 0x01
    223a:	80 83       	st	Z, r24
    223c:	64 c0       	rjmp	.+200    	; 0x2306 <LCD_displayCharacter+0x166>
	else if (__tmp > 65535)
    223e:	fe 01       	movw	r30, r28
    2240:	e5 5a       	subi	r30, 0xA5	; 165
    2242:	ff 4f       	sbci	r31, 0xFF	; 255
    2244:	60 81       	ld	r22, Z
    2246:	71 81       	ldd	r23, Z+1	; 0x01
    2248:	82 81       	ldd	r24, Z+2	; 0x02
    224a:	93 81       	ldd	r25, Z+3	; 0x03
    224c:	20 e0       	ldi	r18, 0x00	; 0
    224e:	3f ef       	ldi	r19, 0xFF	; 255
    2250:	4f e7       	ldi	r20, 0x7F	; 127
    2252:	57 e4       	ldi	r21, 0x47	; 71
    2254:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2258:	18 16       	cp	r1, r24
    225a:	0c f0       	brlt	.+2      	; 0x225e <LCD_displayCharacter+0xbe>
    225c:	43 c0       	rjmp	.+134    	; 0x22e4 <LCD_displayCharacter+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    225e:	fe 01       	movw	r30, r28
    2260:	e1 5a       	subi	r30, 0xA1	; 161
    2262:	ff 4f       	sbci	r31, 0xFF	; 255
    2264:	60 81       	ld	r22, Z
    2266:	71 81       	ldd	r23, Z+1	; 0x01
    2268:	82 81       	ldd	r24, Z+2	; 0x02
    226a:	93 81       	ldd	r25, Z+3	; 0x03
    226c:	20 e0       	ldi	r18, 0x00	; 0
    226e:	30 e0       	ldi	r19, 0x00	; 0
    2270:	40 e2       	ldi	r20, 0x20	; 32
    2272:	51 e4       	ldi	r21, 0x41	; 65
    2274:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2278:	dc 01       	movw	r26, r24
    227a:	cb 01       	movw	r24, r22
    227c:	8e 01       	movw	r16, r28
    227e:	07 5a       	subi	r16, 0xA7	; 167
    2280:	1f 4f       	sbci	r17, 0xFF	; 255
    2282:	bc 01       	movw	r22, r24
    2284:	cd 01       	movw	r24, r26
    2286:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    228a:	dc 01       	movw	r26, r24
    228c:	cb 01       	movw	r24, r22
    228e:	f8 01       	movw	r30, r16
    2290:	91 83       	std	Z+1, r25	; 0x01
    2292:	80 83       	st	Z, r24
    2294:	1f c0       	rjmp	.+62     	; 0x22d4 <LCD_displayCharacter+0x134>
    2296:	fe 01       	movw	r30, r28
    2298:	e9 5a       	subi	r30, 0xA9	; 169
    229a:	ff 4f       	sbci	r31, 0xFF	; 255
    229c:	88 ec       	ldi	r24, 0xC8	; 200
    229e:	90 e0       	ldi	r25, 0x00	; 0
    22a0:	91 83       	std	Z+1, r25	; 0x01
    22a2:	80 83       	st	Z, r24
    22a4:	fe 01       	movw	r30, r28
    22a6:	e9 5a       	subi	r30, 0xA9	; 169
    22a8:	ff 4f       	sbci	r31, 0xFF	; 255
    22aa:	80 81       	ld	r24, Z
    22ac:	91 81       	ldd	r25, Z+1	; 0x01
    22ae:	01 97       	sbiw	r24, 0x01	; 1
    22b0:	f1 f7       	brne	.-4      	; 0x22ae <LCD_displayCharacter+0x10e>
    22b2:	fe 01       	movw	r30, r28
    22b4:	e9 5a       	subi	r30, 0xA9	; 169
    22b6:	ff 4f       	sbci	r31, 0xFF	; 255
    22b8:	91 83       	std	Z+1, r25	; 0x01
    22ba:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22bc:	de 01       	movw	r26, r28
    22be:	a7 5a       	subi	r26, 0xA7	; 167
    22c0:	bf 4f       	sbci	r27, 0xFF	; 255
    22c2:	fe 01       	movw	r30, r28
    22c4:	e7 5a       	subi	r30, 0xA7	; 167
    22c6:	ff 4f       	sbci	r31, 0xFF	; 255
    22c8:	80 81       	ld	r24, Z
    22ca:	91 81       	ldd	r25, Z+1	; 0x01
    22cc:	01 97       	sbiw	r24, 0x01	; 1
    22ce:	11 96       	adiw	r26, 0x01	; 1
    22d0:	9c 93       	st	X, r25
    22d2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22d4:	fe 01       	movw	r30, r28
    22d6:	e7 5a       	subi	r30, 0xA7	; 167
    22d8:	ff 4f       	sbci	r31, 0xFF	; 255
    22da:	80 81       	ld	r24, Z
    22dc:	91 81       	ldd	r25, Z+1	; 0x01
    22de:	00 97       	sbiw	r24, 0x00	; 0
    22e0:	d1 f6       	brne	.-76     	; 0x2296 <LCD_displayCharacter+0xf6>
    22e2:	27 c0       	rjmp	.+78     	; 0x2332 <LCD_displayCharacter+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22e4:	8e 01       	movw	r16, r28
    22e6:	07 5a       	subi	r16, 0xA7	; 167
    22e8:	1f 4f       	sbci	r17, 0xFF	; 255
    22ea:	fe 01       	movw	r30, r28
    22ec:	e5 5a       	subi	r30, 0xA5	; 165
    22ee:	ff 4f       	sbci	r31, 0xFF	; 255
    22f0:	60 81       	ld	r22, Z
    22f2:	71 81       	ldd	r23, Z+1	; 0x01
    22f4:	82 81       	ldd	r24, Z+2	; 0x02
    22f6:	93 81       	ldd	r25, Z+3	; 0x03
    22f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22fc:	dc 01       	movw	r26, r24
    22fe:	cb 01       	movw	r24, r22
    2300:	f8 01       	movw	r30, r16
    2302:	91 83       	std	Z+1, r25	; 0x01
    2304:	80 83       	st	Z, r24
    2306:	de 01       	movw	r26, r28
    2308:	ab 5a       	subi	r26, 0xAB	; 171
    230a:	bf 4f       	sbci	r27, 0xFF	; 255
    230c:	fe 01       	movw	r30, r28
    230e:	e7 5a       	subi	r30, 0xA7	; 167
    2310:	ff 4f       	sbci	r31, 0xFF	; 255
    2312:	80 81       	ld	r24, Z
    2314:	91 81       	ldd	r25, Z+1	; 0x01
    2316:	8d 93       	st	X+, r24
    2318:	9c 93       	st	X, r25
    231a:	fe 01       	movw	r30, r28
    231c:	eb 5a       	subi	r30, 0xAB	; 171
    231e:	ff 4f       	sbci	r31, 0xFF	; 255
    2320:	80 81       	ld	r24, Z
    2322:	91 81       	ldd	r25, Z+1	; 0x01
    2324:	01 97       	sbiw	r24, 0x01	; 1
    2326:	f1 f7       	brne	.-4      	; 0x2324 <LCD_displayCharacter+0x184>
    2328:	fe 01       	movw	r30, r28
    232a:	eb 5a       	subi	r30, 0xAB	; 171
    232c:	ff 4f       	sbci	r31, 0xFF	; 255
    232e:	91 83       	std	Z+1, r25	; 0x01
    2330:	80 83       	st	Z, r24
	_delay_ms(1);											  /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH);	  /* Enable LCD E=1 */
    2332:	80 e0       	ldi	r24, 0x00	; 0
    2334:	66 e0       	ldi	r22, 0x06	; 6
    2336:	41 e0       	ldi	r20, 0x01	; 1
    2338:	0e 94 50 09 	call	0x12a0	; 0x12a0 <GPIO_writePin>
    233c:	fe 01       	movw	r30, r28
    233e:	ef 5a       	subi	r30, 0xAF	; 175
    2340:	ff 4f       	sbci	r31, 0xFF	; 255
    2342:	80 e0       	ldi	r24, 0x00	; 0
    2344:	90 e0       	ldi	r25, 0x00	; 0
    2346:	a0 e8       	ldi	r26, 0x80	; 128
    2348:	bf e3       	ldi	r27, 0x3F	; 63
    234a:	80 83       	st	Z, r24
    234c:	91 83       	std	Z+1, r25	; 0x01
    234e:	a2 83       	std	Z+2, r26	; 0x02
    2350:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2352:	8e 01       	movw	r16, r28
    2354:	03 5b       	subi	r16, 0xB3	; 179
    2356:	1f 4f       	sbci	r17, 0xFF	; 255
    2358:	fe 01       	movw	r30, r28
    235a:	ef 5a       	subi	r30, 0xAF	; 175
    235c:	ff 4f       	sbci	r31, 0xFF	; 255
    235e:	60 81       	ld	r22, Z
    2360:	71 81       	ldd	r23, Z+1	; 0x01
    2362:	82 81       	ldd	r24, Z+2	; 0x02
    2364:	93 81       	ldd	r25, Z+3	; 0x03
    2366:	20 e0       	ldi	r18, 0x00	; 0
    2368:	30 e0       	ldi	r19, 0x00	; 0
    236a:	4a ef       	ldi	r20, 0xFA	; 250
    236c:	54 e4       	ldi	r21, 0x44	; 68
    236e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2372:	dc 01       	movw	r26, r24
    2374:	cb 01       	movw	r24, r22
    2376:	f8 01       	movw	r30, r16
    2378:	80 83       	st	Z, r24
    237a:	91 83       	std	Z+1, r25	; 0x01
    237c:	a2 83       	std	Z+2, r26	; 0x02
    237e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2380:	fe 01       	movw	r30, r28
    2382:	e3 5b       	subi	r30, 0xB3	; 179
    2384:	ff 4f       	sbci	r31, 0xFF	; 255
    2386:	60 81       	ld	r22, Z
    2388:	71 81       	ldd	r23, Z+1	; 0x01
    238a:	82 81       	ldd	r24, Z+2	; 0x02
    238c:	93 81       	ldd	r25, Z+3	; 0x03
    238e:	20 e0       	ldi	r18, 0x00	; 0
    2390:	30 e0       	ldi	r19, 0x00	; 0
    2392:	40 e8       	ldi	r20, 0x80	; 128
    2394:	5f e3       	ldi	r21, 0x3F	; 63
    2396:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    239a:	88 23       	and	r24, r24
    239c:	44 f4       	brge	.+16     	; 0x23ae <LCD_displayCharacter+0x20e>
		__ticks = 1;
    239e:	fe 01       	movw	r30, r28
    23a0:	e5 5b       	subi	r30, 0xB5	; 181
    23a2:	ff 4f       	sbci	r31, 0xFF	; 255
    23a4:	81 e0       	ldi	r24, 0x01	; 1
    23a6:	90 e0       	ldi	r25, 0x00	; 0
    23a8:	91 83       	std	Z+1, r25	; 0x01
    23aa:	80 83       	st	Z, r24
    23ac:	64 c0       	rjmp	.+200    	; 0x2476 <LCD_displayCharacter+0x2d6>
	else if (__tmp > 65535)
    23ae:	fe 01       	movw	r30, r28
    23b0:	e3 5b       	subi	r30, 0xB3	; 179
    23b2:	ff 4f       	sbci	r31, 0xFF	; 255
    23b4:	60 81       	ld	r22, Z
    23b6:	71 81       	ldd	r23, Z+1	; 0x01
    23b8:	82 81       	ldd	r24, Z+2	; 0x02
    23ba:	93 81       	ldd	r25, Z+3	; 0x03
    23bc:	20 e0       	ldi	r18, 0x00	; 0
    23be:	3f ef       	ldi	r19, 0xFF	; 255
    23c0:	4f e7       	ldi	r20, 0x7F	; 127
    23c2:	57 e4       	ldi	r21, 0x47	; 71
    23c4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    23c8:	18 16       	cp	r1, r24
    23ca:	0c f0       	brlt	.+2      	; 0x23ce <LCD_displayCharacter+0x22e>
    23cc:	43 c0       	rjmp	.+134    	; 0x2454 <LCD_displayCharacter+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23ce:	fe 01       	movw	r30, r28
    23d0:	ef 5a       	subi	r30, 0xAF	; 175
    23d2:	ff 4f       	sbci	r31, 0xFF	; 255
    23d4:	60 81       	ld	r22, Z
    23d6:	71 81       	ldd	r23, Z+1	; 0x01
    23d8:	82 81       	ldd	r24, Z+2	; 0x02
    23da:	93 81       	ldd	r25, Z+3	; 0x03
    23dc:	20 e0       	ldi	r18, 0x00	; 0
    23de:	30 e0       	ldi	r19, 0x00	; 0
    23e0:	40 e2       	ldi	r20, 0x20	; 32
    23e2:	51 e4       	ldi	r21, 0x41	; 65
    23e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23e8:	dc 01       	movw	r26, r24
    23ea:	cb 01       	movw	r24, r22
    23ec:	8e 01       	movw	r16, r28
    23ee:	05 5b       	subi	r16, 0xB5	; 181
    23f0:	1f 4f       	sbci	r17, 0xFF	; 255
    23f2:	bc 01       	movw	r22, r24
    23f4:	cd 01       	movw	r24, r26
    23f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23fa:	dc 01       	movw	r26, r24
    23fc:	cb 01       	movw	r24, r22
    23fe:	f8 01       	movw	r30, r16
    2400:	91 83       	std	Z+1, r25	; 0x01
    2402:	80 83       	st	Z, r24
    2404:	1f c0       	rjmp	.+62     	; 0x2444 <LCD_displayCharacter+0x2a4>
    2406:	fe 01       	movw	r30, r28
    2408:	e7 5b       	subi	r30, 0xB7	; 183
    240a:	ff 4f       	sbci	r31, 0xFF	; 255
    240c:	88 ec       	ldi	r24, 0xC8	; 200
    240e:	90 e0       	ldi	r25, 0x00	; 0
    2410:	91 83       	std	Z+1, r25	; 0x01
    2412:	80 83       	st	Z, r24
    2414:	fe 01       	movw	r30, r28
    2416:	e7 5b       	subi	r30, 0xB7	; 183
    2418:	ff 4f       	sbci	r31, 0xFF	; 255
    241a:	80 81       	ld	r24, Z
    241c:	91 81       	ldd	r25, Z+1	; 0x01
    241e:	01 97       	sbiw	r24, 0x01	; 1
    2420:	f1 f7       	brne	.-4      	; 0x241e <LCD_displayCharacter+0x27e>
    2422:	fe 01       	movw	r30, r28
    2424:	e7 5b       	subi	r30, 0xB7	; 183
    2426:	ff 4f       	sbci	r31, 0xFF	; 255
    2428:	91 83       	std	Z+1, r25	; 0x01
    242a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    242c:	de 01       	movw	r26, r28
    242e:	a5 5b       	subi	r26, 0xB5	; 181
    2430:	bf 4f       	sbci	r27, 0xFF	; 255
    2432:	fe 01       	movw	r30, r28
    2434:	e5 5b       	subi	r30, 0xB5	; 181
    2436:	ff 4f       	sbci	r31, 0xFF	; 255
    2438:	80 81       	ld	r24, Z
    243a:	91 81       	ldd	r25, Z+1	; 0x01
    243c:	01 97       	sbiw	r24, 0x01	; 1
    243e:	11 96       	adiw	r26, 0x01	; 1
    2440:	9c 93       	st	X, r25
    2442:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2444:	fe 01       	movw	r30, r28
    2446:	e5 5b       	subi	r30, 0xB5	; 181
    2448:	ff 4f       	sbci	r31, 0xFF	; 255
    244a:	80 81       	ld	r24, Z
    244c:	91 81       	ldd	r25, Z+1	; 0x01
    244e:	00 97       	sbiw	r24, 0x00	; 0
    2450:	d1 f6       	brne	.-76     	; 0x2406 <LCD_displayCharacter+0x266>
    2452:	27 c0       	rjmp	.+78     	; 0x24a2 <LCD_displayCharacter+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2454:	8e 01       	movw	r16, r28
    2456:	05 5b       	subi	r16, 0xB5	; 181
    2458:	1f 4f       	sbci	r17, 0xFF	; 255
    245a:	fe 01       	movw	r30, r28
    245c:	e3 5b       	subi	r30, 0xB3	; 179
    245e:	ff 4f       	sbci	r31, 0xFF	; 255
    2460:	60 81       	ld	r22, Z
    2462:	71 81       	ldd	r23, Z+1	; 0x01
    2464:	82 81       	ldd	r24, Z+2	; 0x02
    2466:	93 81       	ldd	r25, Z+3	; 0x03
    2468:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    246c:	dc 01       	movw	r26, r24
    246e:	cb 01       	movw	r24, r22
    2470:	f8 01       	movw	r30, r16
    2472:	91 83       	std	Z+1, r25	; 0x01
    2474:	80 83       	st	Z, r24
    2476:	de 01       	movw	r26, r28
    2478:	a9 5b       	subi	r26, 0xB9	; 185
    247a:	bf 4f       	sbci	r27, 0xFF	; 255
    247c:	fe 01       	movw	r30, r28
    247e:	e5 5b       	subi	r30, 0xB5	; 181
    2480:	ff 4f       	sbci	r31, 0xFF	; 255
    2482:	80 81       	ld	r24, Z
    2484:	91 81       	ldd	r25, Z+1	; 0x01
    2486:	8d 93       	st	X+, r24
    2488:	9c 93       	st	X, r25
    248a:	fe 01       	movw	r30, r28
    248c:	e9 5b       	subi	r30, 0xB9	; 185
    248e:	ff 4f       	sbci	r31, 0xFF	; 255
    2490:	80 81       	ld	r24, Z
    2492:	91 81       	ldd	r25, Z+1	; 0x01
    2494:	01 97       	sbiw	r24, 0x01	; 1
    2496:	f1 f7       	brne	.-4      	; 0x2494 <LCD_displayCharacter+0x2f4>
    2498:	fe 01       	movw	r30, r28
    249a:	e9 5b       	subi	r30, 0xB9	; 185
    249c:	ff 4f       	sbci	r31, 0xFF	; 255
    249e:	91 83       	std	Z+1, r25	; 0x01
    24a0:	80 83       	st	Z, r24
	_delay_ms(1);											  /* delay for processing Tpw - Tdws = 190ns */

#if (LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB4_PIN_ID, GET_BIT(data, 4));
    24a2:	fe 01       	movw	r30, r28
    24a4:	ed 59       	subi	r30, 0x9D	; 157
    24a6:	ff 4f       	sbci	r31, 0xFF	; 255
    24a8:	80 81       	ld	r24, Z
    24aa:	88 2f       	mov	r24, r24
    24ac:	90 e0       	ldi	r25, 0x00	; 0
    24ae:	80 71       	andi	r24, 0x10	; 16
    24b0:	90 70       	andi	r25, 0x00	; 0
    24b2:	95 95       	asr	r25
    24b4:	87 95       	ror	r24
    24b6:	95 95       	asr	r25
    24b8:	87 95       	ror	r24
    24ba:	95 95       	asr	r25
    24bc:	87 95       	ror	r24
    24be:	95 95       	asr	r25
    24c0:	87 95       	ror	r24
    24c2:	98 2f       	mov	r25, r24
    24c4:	80 e0       	ldi	r24, 0x00	; 0
    24c6:	65 e0       	ldi	r22, 0x05	; 5
    24c8:	49 2f       	mov	r20, r25
    24ca:	0e 94 50 09 	call	0x12a0	; 0x12a0 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB5_PIN_ID, GET_BIT(data, 5));
    24ce:	fe 01       	movw	r30, r28
    24d0:	ed 59       	subi	r30, 0x9D	; 157
    24d2:	ff 4f       	sbci	r31, 0xFF	; 255
    24d4:	80 81       	ld	r24, Z
    24d6:	88 2f       	mov	r24, r24
    24d8:	90 e0       	ldi	r25, 0x00	; 0
    24da:	80 72       	andi	r24, 0x20	; 32
    24dc:	90 70       	andi	r25, 0x00	; 0
    24de:	95 95       	asr	r25
    24e0:	87 95       	ror	r24
    24e2:	95 95       	asr	r25
    24e4:	87 95       	ror	r24
    24e6:	95 95       	asr	r25
    24e8:	87 95       	ror	r24
    24ea:	95 95       	asr	r25
    24ec:	87 95       	ror	r24
    24ee:	95 95       	asr	r25
    24f0:	87 95       	ror	r24
    24f2:	98 2f       	mov	r25, r24
    24f4:	80 e0       	ldi	r24, 0x00	; 0
    24f6:	64 e0       	ldi	r22, 0x04	; 4
    24f8:	49 2f       	mov	r20, r25
    24fa:	0e 94 50 09 	call	0x12a0	; 0x12a0 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB6_PIN_ID, GET_BIT(data, 6));
    24fe:	fe 01       	movw	r30, r28
    2500:	ed 59       	subi	r30, 0x9D	; 157
    2502:	ff 4f       	sbci	r31, 0xFF	; 255
    2504:	80 81       	ld	r24, Z
    2506:	88 2f       	mov	r24, r24
    2508:	90 e0       	ldi	r25, 0x00	; 0
    250a:	80 74       	andi	r24, 0x40	; 64
    250c:	90 70       	andi	r25, 0x00	; 0
    250e:	08 2e       	mov	r0, r24
    2510:	89 2f       	mov	r24, r25
    2512:	00 0c       	add	r0, r0
    2514:	88 1f       	adc	r24, r24
    2516:	99 0b       	sbc	r25, r25
    2518:	00 0c       	add	r0, r0
    251a:	88 1f       	adc	r24, r24
    251c:	99 1f       	adc	r25, r25
    251e:	98 2f       	mov	r25, r24
    2520:	80 e0       	ldi	r24, 0x00	; 0
    2522:	63 e0       	ldi	r22, 0x03	; 3
    2524:	49 2f       	mov	r20, r25
    2526:	0e 94 50 09 	call	0x12a0	; 0x12a0 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB7_PIN_ID, GET_BIT(data, 7));
    252a:	fe 01       	movw	r30, r28
    252c:	ed 59       	subi	r30, 0x9D	; 157
    252e:	ff 4f       	sbci	r31, 0xFF	; 255
    2530:	80 81       	ld	r24, Z
    2532:	98 2f       	mov	r25, r24
    2534:	99 1f       	adc	r25, r25
    2536:	99 27       	eor	r25, r25
    2538:	99 1f       	adc	r25, r25
    253a:	80 e0       	ldi	r24, 0x00	; 0
    253c:	62 e0       	ldi	r22, 0x02	; 2
    253e:	49 2f       	mov	r20, r25
    2540:	0e 94 50 09 	call	0x12a0	; 0x12a0 <GPIO_writePin>
    2544:	fe 01       	movw	r30, r28
    2546:	ed 5b       	subi	r30, 0xBD	; 189
    2548:	ff 4f       	sbci	r31, 0xFF	; 255
    254a:	80 e0       	ldi	r24, 0x00	; 0
    254c:	90 e0       	ldi	r25, 0x00	; 0
    254e:	a0 e8       	ldi	r26, 0x80	; 128
    2550:	bf e3       	ldi	r27, 0x3F	; 63
    2552:	80 83       	st	Z, r24
    2554:	91 83       	std	Z+1, r25	; 0x01
    2556:	a2 83       	std	Z+2, r26	; 0x02
    2558:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    255a:	8e 01       	movw	r16, r28
    255c:	01 5c       	subi	r16, 0xC1	; 193
    255e:	1f 4f       	sbci	r17, 0xFF	; 255
    2560:	fe 01       	movw	r30, r28
    2562:	ed 5b       	subi	r30, 0xBD	; 189
    2564:	ff 4f       	sbci	r31, 0xFF	; 255
    2566:	60 81       	ld	r22, Z
    2568:	71 81       	ldd	r23, Z+1	; 0x01
    256a:	82 81       	ldd	r24, Z+2	; 0x02
    256c:	93 81       	ldd	r25, Z+3	; 0x03
    256e:	20 e0       	ldi	r18, 0x00	; 0
    2570:	30 e0       	ldi	r19, 0x00	; 0
    2572:	4a ef       	ldi	r20, 0xFA	; 250
    2574:	54 e4       	ldi	r21, 0x44	; 68
    2576:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    257a:	dc 01       	movw	r26, r24
    257c:	cb 01       	movw	r24, r22
    257e:	f8 01       	movw	r30, r16
    2580:	80 83       	st	Z, r24
    2582:	91 83       	std	Z+1, r25	; 0x01
    2584:	a2 83       	std	Z+2, r26	; 0x02
    2586:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2588:	fe 01       	movw	r30, r28
    258a:	ff 96       	adiw	r30, 0x3f	; 63
    258c:	60 81       	ld	r22, Z
    258e:	71 81       	ldd	r23, Z+1	; 0x01
    2590:	82 81       	ldd	r24, Z+2	; 0x02
    2592:	93 81       	ldd	r25, Z+3	; 0x03
    2594:	20 e0       	ldi	r18, 0x00	; 0
    2596:	30 e0       	ldi	r19, 0x00	; 0
    2598:	40 e8       	ldi	r20, 0x80	; 128
    259a:	5f e3       	ldi	r21, 0x3F	; 63
    259c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    25a0:	88 23       	and	r24, r24
    25a2:	2c f4       	brge	.+10     	; 0x25ae <LCD_displayCharacter+0x40e>
		__ticks = 1;
    25a4:	81 e0       	ldi	r24, 0x01	; 1
    25a6:	90 e0       	ldi	r25, 0x00	; 0
    25a8:	9e af       	std	Y+62, r25	; 0x3e
    25aa:	8d af       	std	Y+61, r24	; 0x3d
    25ac:	46 c0       	rjmp	.+140    	; 0x263a <LCD_displayCharacter+0x49a>
	else if (__tmp > 65535)
    25ae:	fe 01       	movw	r30, r28
    25b0:	ff 96       	adiw	r30, 0x3f	; 63
    25b2:	60 81       	ld	r22, Z
    25b4:	71 81       	ldd	r23, Z+1	; 0x01
    25b6:	82 81       	ldd	r24, Z+2	; 0x02
    25b8:	93 81       	ldd	r25, Z+3	; 0x03
    25ba:	20 e0       	ldi	r18, 0x00	; 0
    25bc:	3f ef       	ldi	r19, 0xFF	; 255
    25be:	4f e7       	ldi	r20, 0x7F	; 127
    25c0:	57 e4       	ldi	r21, 0x47	; 71
    25c2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    25c6:	18 16       	cp	r1, r24
    25c8:	64 f5       	brge	.+88     	; 0x2622 <LCD_displayCharacter+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25ca:	fe 01       	movw	r30, r28
    25cc:	ed 5b       	subi	r30, 0xBD	; 189
    25ce:	ff 4f       	sbci	r31, 0xFF	; 255
    25d0:	60 81       	ld	r22, Z
    25d2:	71 81       	ldd	r23, Z+1	; 0x01
    25d4:	82 81       	ldd	r24, Z+2	; 0x02
    25d6:	93 81       	ldd	r25, Z+3	; 0x03
    25d8:	20 e0       	ldi	r18, 0x00	; 0
    25da:	30 e0       	ldi	r19, 0x00	; 0
    25dc:	40 e2       	ldi	r20, 0x20	; 32
    25de:	51 e4       	ldi	r21, 0x41	; 65
    25e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25e4:	dc 01       	movw	r26, r24
    25e6:	cb 01       	movw	r24, r22
    25e8:	bc 01       	movw	r22, r24
    25ea:	cd 01       	movw	r24, r26
    25ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25f0:	dc 01       	movw	r26, r24
    25f2:	cb 01       	movw	r24, r22
    25f4:	9e af       	std	Y+62, r25	; 0x3e
    25f6:	8d af       	std	Y+61, r24	; 0x3d
    25f8:	0f c0       	rjmp	.+30     	; 0x2618 <LCD_displayCharacter+0x478>
    25fa:	88 ec       	ldi	r24, 0xC8	; 200
    25fc:	90 e0       	ldi	r25, 0x00	; 0
    25fe:	9c af       	std	Y+60, r25	; 0x3c
    2600:	8b af       	std	Y+59, r24	; 0x3b
    2602:	8b ad       	ldd	r24, Y+59	; 0x3b
    2604:	9c ad       	ldd	r25, Y+60	; 0x3c
    2606:	01 97       	sbiw	r24, 0x01	; 1
    2608:	f1 f7       	brne	.-4      	; 0x2606 <LCD_displayCharacter+0x466>
    260a:	9c af       	std	Y+60, r25	; 0x3c
    260c:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    260e:	8d ad       	ldd	r24, Y+61	; 0x3d
    2610:	9e ad       	ldd	r25, Y+62	; 0x3e
    2612:	01 97       	sbiw	r24, 0x01	; 1
    2614:	9e af       	std	Y+62, r25	; 0x3e
    2616:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2618:	8d ad       	ldd	r24, Y+61	; 0x3d
    261a:	9e ad       	ldd	r25, Y+62	; 0x3e
    261c:	00 97       	sbiw	r24, 0x00	; 0
    261e:	69 f7       	brne	.-38     	; 0x25fa <LCD_displayCharacter+0x45a>
    2620:	16 c0       	rjmp	.+44     	; 0x264e <LCD_displayCharacter+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2622:	fe 01       	movw	r30, r28
    2624:	ff 96       	adiw	r30, 0x3f	; 63
    2626:	60 81       	ld	r22, Z
    2628:	71 81       	ldd	r23, Z+1	; 0x01
    262a:	82 81       	ldd	r24, Z+2	; 0x02
    262c:	93 81       	ldd	r25, Z+3	; 0x03
    262e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2632:	dc 01       	movw	r26, r24
    2634:	cb 01       	movw	r24, r22
    2636:	9e af       	std	Y+62, r25	; 0x3e
    2638:	8d af       	std	Y+61, r24	; 0x3d
    263a:	8d ad       	ldd	r24, Y+61	; 0x3d
    263c:	9e ad       	ldd	r25, Y+62	; 0x3e
    263e:	9a af       	std	Y+58, r25	; 0x3a
    2640:	89 af       	std	Y+57, r24	; 0x39
    2642:	89 ad       	ldd	r24, Y+57	; 0x39
    2644:	9a ad       	ldd	r25, Y+58	; 0x3a
    2646:	01 97       	sbiw	r24, 0x01	; 1
    2648:	f1 f7       	brne	.-4      	; 0x2646 <LCD_displayCharacter+0x4a6>
    264a:	9a af       	std	Y+58, r25	; 0x3a
    264c:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1);											/* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);	/* Disable LCD E=0 */
    264e:	80 e0       	ldi	r24, 0x00	; 0
    2650:	66 e0       	ldi	r22, 0x06	; 6
    2652:	40 e0       	ldi	r20, 0x00	; 0
    2654:	0e 94 50 09 	call	0x12a0	; 0x12a0 <GPIO_writePin>
    2658:	80 e0       	ldi	r24, 0x00	; 0
    265a:	90 e0       	ldi	r25, 0x00	; 0
    265c:	a0 e8       	ldi	r26, 0x80	; 128
    265e:	bf e3       	ldi	r27, 0x3F	; 63
    2660:	8d ab       	std	Y+53, r24	; 0x35
    2662:	9e ab       	std	Y+54, r25	; 0x36
    2664:	af ab       	std	Y+55, r26	; 0x37
    2666:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2668:	6d a9       	ldd	r22, Y+53	; 0x35
    266a:	7e a9       	ldd	r23, Y+54	; 0x36
    266c:	8f a9       	ldd	r24, Y+55	; 0x37
    266e:	98 ad       	ldd	r25, Y+56	; 0x38
    2670:	20 e0       	ldi	r18, 0x00	; 0
    2672:	30 e0       	ldi	r19, 0x00	; 0
    2674:	4a ef       	ldi	r20, 0xFA	; 250
    2676:	54 e4       	ldi	r21, 0x44	; 68
    2678:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    267c:	dc 01       	movw	r26, r24
    267e:	cb 01       	movw	r24, r22
    2680:	89 ab       	std	Y+49, r24	; 0x31
    2682:	9a ab       	std	Y+50, r25	; 0x32
    2684:	ab ab       	std	Y+51, r26	; 0x33
    2686:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2688:	69 a9       	ldd	r22, Y+49	; 0x31
    268a:	7a a9       	ldd	r23, Y+50	; 0x32
    268c:	8b a9       	ldd	r24, Y+51	; 0x33
    268e:	9c a9       	ldd	r25, Y+52	; 0x34
    2690:	20 e0       	ldi	r18, 0x00	; 0
    2692:	30 e0       	ldi	r19, 0x00	; 0
    2694:	40 e8       	ldi	r20, 0x80	; 128
    2696:	5f e3       	ldi	r21, 0x3F	; 63
    2698:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    269c:	88 23       	and	r24, r24
    269e:	2c f4       	brge	.+10     	; 0x26aa <LCD_displayCharacter+0x50a>
		__ticks = 1;
    26a0:	81 e0       	ldi	r24, 0x01	; 1
    26a2:	90 e0       	ldi	r25, 0x00	; 0
    26a4:	98 ab       	std	Y+48, r25	; 0x30
    26a6:	8f a7       	std	Y+47, r24	; 0x2f
    26a8:	3f c0       	rjmp	.+126    	; 0x2728 <LCD_displayCharacter+0x588>
	else if (__tmp > 65535)
    26aa:	69 a9       	ldd	r22, Y+49	; 0x31
    26ac:	7a a9       	ldd	r23, Y+50	; 0x32
    26ae:	8b a9       	ldd	r24, Y+51	; 0x33
    26b0:	9c a9       	ldd	r25, Y+52	; 0x34
    26b2:	20 e0       	ldi	r18, 0x00	; 0
    26b4:	3f ef       	ldi	r19, 0xFF	; 255
    26b6:	4f e7       	ldi	r20, 0x7F	; 127
    26b8:	57 e4       	ldi	r21, 0x47	; 71
    26ba:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    26be:	18 16       	cp	r1, r24
    26c0:	4c f5       	brge	.+82     	; 0x2714 <LCD_displayCharacter+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26c2:	6d a9       	ldd	r22, Y+53	; 0x35
    26c4:	7e a9       	ldd	r23, Y+54	; 0x36
    26c6:	8f a9       	ldd	r24, Y+55	; 0x37
    26c8:	98 ad       	ldd	r25, Y+56	; 0x38
    26ca:	20 e0       	ldi	r18, 0x00	; 0
    26cc:	30 e0       	ldi	r19, 0x00	; 0
    26ce:	40 e2       	ldi	r20, 0x20	; 32
    26d0:	51 e4       	ldi	r21, 0x41	; 65
    26d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26d6:	dc 01       	movw	r26, r24
    26d8:	cb 01       	movw	r24, r22
    26da:	bc 01       	movw	r22, r24
    26dc:	cd 01       	movw	r24, r26
    26de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26e2:	dc 01       	movw	r26, r24
    26e4:	cb 01       	movw	r24, r22
    26e6:	98 ab       	std	Y+48, r25	; 0x30
    26e8:	8f a7       	std	Y+47, r24	; 0x2f
    26ea:	0f c0       	rjmp	.+30     	; 0x270a <LCD_displayCharacter+0x56a>
    26ec:	88 ec       	ldi	r24, 0xC8	; 200
    26ee:	90 e0       	ldi	r25, 0x00	; 0
    26f0:	9e a7       	std	Y+46, r25	; 0x2e
    26f2:	8d a7       	std	Y+45, r24	; 0x2d
    26f4:	8d a5       	ldd	r24, Y+45	; 0x2d
    26f6:	9e a5       	ldd	r25, Y+46	; 0x2e
    26f8:	01 97       	sbiw	r24, 0x01	; 1
    26fa:	f1 f7       	brne	.-4      	; 0x26f8 <LCD_displayCharacter+0x558>
    26fc:	9e a7       	std	Y+46, r25	; 0x2e
    26fe:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2700:	8f a5       	ldd	r24, Y+47	; 0x2f
    2702:	98 a9       	ldd	r25, Y+48	; 0x30
    2704:	01 97       	sbiw	r24, 0x01	; 1
    2706:	98 ab       	std	Y+48, r25	; 0x30
    2708:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    270a:	8f a5       	ldd	r24, Y+47	; 0x2f
    270c:	98 a9       	ldd	r25, Y+48	; 0x30
    270e:	00 97       	sbiw	r24, 0x00	; 0
    2710:	69 f7       	brne	.-38     	; 0x26ec <LCD_displayCharacter+0x54c>
    2712:	14 c0       	rjmp	.+40     	; 0x273c <LCD_displayCharacter+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2714:	69 a9       	ldd	r22, Y+49	; 0x31
    2716:	7a a9       	ldd	r23, Y+50	; 0x32
    2718:	8b a9       	ldd	r24, Y+51	; 0x33
    271a:	9c a9       	ldd	r25, Y+52	; 0x34
    271c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2720:	dc 01       	movw	r26, r24
    2722:	cb 01       	movw	r24, r22
    2724:	98 ab       	std	Y+48, r25	; 0x30
    2726:	8f a7       	std	Y+47, r24	; 0x2f
    2728:	8f a5       	ldd	r24, Y+47	; 0x2f
    272a:	98 a9       	ldd	r25, Y+48	; 0x30
    272c:	9c a7       	std	Y+44, r25	; 0x2c
    272e:	8b a7       	std	Y+43, r24	; 0x2b
    2730:	8b a5       	ldd	r24, Y+43	; 0x2b
    2732:	9c a5       	ldd	r25, Y+44	; 0x2c
    2734:	01 97       	sbiw	r24, 0x01	; 1
    2736:	f1 f7       	brne	.-4      	; 0x2734 <LCD_displayCharacter+0x594>
    2738:	9c a7       	std	Y+44, r25	; 0x2c
    273a:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);											/* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH); /* Enable LCD E=1 */
    273c:	80 e0       	ldi	r24, 0x00	; 0
    273e:	66 e0       	ldi	r22, 0x06	; 6
    2740:	41 e0       	ldi	r20, 0x01	; 1
    2742:	0e 94 50 09 	call	0x12a0	; 0x12a0 <GPIO_writePin>
    2746:	80 e0       	ldi	r24, 0x00	; 0
    2748:	90 e0       	ldi	r25, 0x00	; 0
    274a:	a0 e8       	ldi	r26, 0x80	; 128
    274c:	bf e3       	ldi	r27, 0x3F	; 63
    274e:	8f a3       	std	Y+39, r24	; 0x27
    2750:	98 a7       	std	Y+40, r25	; 0x28
    2752:	a9 a7       	std	Y+41, r26	; 0x29
    2754:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2756:	6f a1       	ldd	r22, Y+39	; 0x27
    2758:	78 a5       	ldd	r23, Y+40	; 0x28
    275a:	89 a5       	ldd	r24, Y+41	; 0x29
    275c:	9a a5       	ldd	r25, Y+42	; 0x2a
    275e:	20 e0       	ldi	r18, 0x00	; 0
    2760:	30 e0       	ldi	r19, 0x00	; 0
    2762:	4a ef       	ldi	r20, 0xFA	; 250
    2764:	54 e4       	ldi	r21, 0x44	; 68
    2766:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    276a:	dc 01       	movw	r26, r24
    276c:	cb 01       	movw	r24, r22
    276e:	8b a3       	std	Y+35, r24	; 0x23
    2770:	9c a3       	std	Y+36, r25	; 0x24
    2772:	ad a3       	std	Y+37, r26	; 0x25
    2774:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2776:	6b a1       	ldd	r22, Y+35	; 0x23
    2778:	7c a1       	ldd	r23, Y+36	; 0x24
    277a:	8d a1       	ldd	r24, Y+37	; 0x25
    277c:	9e a1       	ldd	r25, Y+38	; 0x26
    277e:	20 e0       	ldi	r18, 0x00	; 0
    2780:	30 e0       	ldi	r19, 0x00	; 0
    2782:	40 e8       	ldi	r20, 0x80	; 128
    2784:	5f e3       	ldi	r21, 0x3F	; 63
    2786:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    278a:	88 23       	and	r24, r24
    278c:	2c f4       	brge	.+10     	; 0x2798 <LCD_displayCharacter+0x5f8>
		__ticks = 1;
    278e:	81 e0       	ldi	r24, 0x01	; 1
    2790:	90 e0       	ldi	r25, 0x00	; 0
    2792:	9a a3       	std	Y+34, r25	; 0x22
    2794:	89 a3       	std	Y+33, r24	; 0x21
    2796:	3f c0       	rjmp	.+126    	; 0x2816 <LCD_displayCharacter+0x676>
	else if (__tmp > 65535)
    2798:	6b a1       	ldd	r22, Y+35	; 0x23
    279a:	7c a1       	ldd	r23, Y+36	; 0x24
    279c:	8d a1       	ldd	r24, Y+37	; 0x25
    279e:	9e a1       	ldd	r25, Y+38	; 0x26
    27a0:	20 e0       	ldi	r18, 0x00	; 0
    27a2:	3f ef       	ldi	r19, 0xFF	; 255
    27a4:	4f e7       	ldi	r20, 0x7F	; 127
    27a6:	57 e4       	ldi	r21, 0x47	; 71
    27a8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    27ac:	18 16       	cp	r1, r24
    27ae:	4c f5       	brge	.+82     	; 0x2802 <LCD_displayCharacter+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27b0:	6f a1       	ldd	r22, Y+39	; 0x27
    27b2:	78 a5       	ldd	r23, Y+40	; 0x28
    27b4:	89 a5       	ldd	r24, Y+41	; 0x29
    27b6:	9a a5       	ldd	r25, Y+42	; 0x2a
    27b8:	20 e0       	ldi	r18, 0x00	; 0
    27ba:	30 e0       	ldi	r19, 0x00	; 0
    27bc:	40 e2       	ldi	r20, 0x20	; 32
    27be:	51 e4       	ldi	r21, 0x41	; 65
    27c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27c4:	dc 01       	movw	r26, r24
    27c6:	cb 01       	movw	r24, r22
    27c8:	bc 01       	movw	r22, r24
    27ca:	cd 01       	movw	r24, r26
    27cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27d0:	dc 01       	movw	r26, r24
    27d2:	cb 01       	movw	r24, r22
    27d4:	9a a3       	std	Y+34, r25	; 0x22
    27d6:	89 a3       	std	Y+33, r24	; 0x21
    27d8:	0f c0       	rjmp	.+30     	; 0x27f8 <LCD_displayCharacter+0x658>
    27da:	88 ec       	ldi	r24, 0xC8	; 200
    27dc:	90 e0       	ldi	r25, 0x00	; 0
    27de:	98 a3       	std	Y+32, r25	; 0x20
    27e0:	8f 8f       	std	Y+31, r24	; 0x1f
    27e2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    27e4:	98 a1       	ldd	r25, Y+32	; 0x20
    27e6:	01 97       	sbiw	r24, 0x01	; 1
    27e8:	f1 f7       	brne	.-4      	; 0x27e6 <LCD_displayCharacter+0x646>
    27ea:	98 a3       	std	Y+32, r25	; 0x20
    27ec:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27ee:	89 a1       	ldd	r24, Y+33	; 0x21
    27f0:	9a a1       	ldd	r25, Y+34	; 0x22
    27f2:	01 97       	sbiw	r24, 0x01	; 1
    27f4:	9a a3       	std	Y+34, r25	; 0x22
    27f6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27f8:	89 a1       	ldd	r24, Y+33	; 0x21
    27fa:	9a a1       	ldd	r25, Y+34	; 0x22
    27fc:	00 97       	sbiw	r24, 0x00	; 0
    27fe:	69 f7       	brne	.-38     	; 0x27da <LCD_displayCharacter+0x63a>
    2800:	14 c0       	rjmp	.+40     	; 0x282a <LCD_displayCharacter+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2802:	6b a1       	ldd	r22, Y+35	; 0x23
    2804:	7c a1       	ldd	r23, Y+36	; 0x24
    2806:	8d a1       	ldd	r24, Y+37	; 0x25
    2808:	9e a1       	ldd	r25, Y+38	; 0x26
    280a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    280e:	dc 01       	movw	r26, r24
    2810:	cb 01       	movw	r24, r22
    2812:	9a a3       	std	Y+34, r25	; 0x22
    2814:	89 a3       	std	Y+33, r24	; 0x21
    2816:	89 a1       	ldd	r24, Y+33	; 0x21
    2818:	9a a1       	ldd	r25, Y+34	; 0x22
    281a:	9e 8f       	std	Y+30, r25	; 0x1e
    281c:	8d 8f       	std	Y+29, r24	; 0x1d
    281e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2820:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2822:	01 97       	sbiw	r24, 0x01	; 1
    2824:	f1 f7       	brne	.-4      	; 0x2822 <LCD_displayCharacter+0x682>
    2826:	9e 8f       	std	Y+30, r25	; 0x1e
    2828:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);											/* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB4_PIN_ID, GET_BIT(data, 0));
    282a:	fe 01       	movw	r30, r28
    282c:	ed 59       	subi	r30, 0x9D	; 157
    282e:	ff 4f       	sbci	r31, 0xFF	; 255
    2830:	80 81       	ld	r24, Z
    2832:	98 2f       	mov	r25, r24
    2834:	91 70       	andi	r25, 0x01	; 1
    2836:	80 e0       	ldi	r24, 0x00	; 0
    2838:	65 e0       	ldi	r22, 0x05	; 5
    283a:	49 2f       	mov	r20, r25
    283c:	0e 94 50 09 	call	0x12a0	; 0x12a0 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB5_PIN_ID, GET_BIT(data, 1));
    2840:	fe 01       	movw	r30, r28
    2842:	ed 59       	subi	r30, 0x9D	; 157
    2844:	ff 4f       	sbci	r31, 0xFF	; 255
    2846:	80 81       	ld	r24, Z
    2848:	88 2f       	mov	r24, r24
    284a:	90 e0       	ldi	r25, 0x00	; 0
    284c:	82 70       	andi	r24, 0x02	; 2
    284e:	90 70       	andi	r25, 0x00	; 0
    2850:	95 95       	asr	r25
    2852:	87 95       	ror	r24
    2854:	98 2f       	mov	r25, r24
    2856:	80 e0       	ldi	r24, 0x00	; 0
    2858:	64 e0       	ldi	r22, 0x04	; 4
    285a:	49 2f       	mov	r20, r25
    285c:	0e 94 50 09 	call	0x12a0	; 0x12a0 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB6_PIN_ID, GET_BIT(data, 2));
    2860:	fe 01       	movw	r30, r28
    2862:	ed 59       	subi	r30, 0x9D	; 157
    2864:	ff 4f       	sbci	r31, 0xFF	; 255
    2866:	80 81       	ld	r24, Z
    2868:	88 2f       	mov	r24, r24
    286a:	90 e0       	ldi	r25, 0x00	; 0
    286c:	84 70       	andi	r24, 0x04	; 4
    286e:	90 70       	andi	r25, 0x00	; 0
    2870:	95 95       	asr	r25
    2872:	87 95       	ror	r24
    2874:	95 95       	asr	r25
    2876:	87 95       	ror	r24
    2878:	98 2f       	mov	r25, r24
    287a:	80 e0       	ldi	r24, 0x00	; 0
    287c:	63 e0       	ldi	r22, 0x03	; 3
    287e:	49 2f       	mov	r20, r25
    2880:	0e 94 50 09 	call	0x12a0	; 0x12a0 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB7_PIN_ID, GET_BIT(data, 3));
    2884:	fe 01       	movw	r30, r28
    2886:	ed 59       	subi	r30, 0x9D	; 157
    2888:	ff 4f       	sbci	r31, 0xFF	; 255
    288a:	80 81       	ld	r24, Z
    288c:	88 2f       	mov	r24, r24
    288e:	90 e0       	ldi	r25, 0x00	; 0
    2890:	88 70       	andi	r24, 0x08	; 8
    2892:	90 70       	andi	r25, 0x00	; 0
    2894:	95 95       	asr	r25
    2896:	87 95       	ror	r24
    2898:	95 95       	asr	r25
    289a:	87 95       	ror	r24
    289c:	95 95       	asr	r25
    289e:	87 95       	ror	r24
    28a0:	98 2f       	mov	r25, r24
    28a2:	80 e0       	ldi	r24, 0x00	; 0
    28a4:	62 e0       	ldi	r22, 0x02	; 2
    28a6:	49 2f       	mov	r20, r25
    28a8:	0e 94 50 09 	call	0x12a0	; 0x12a0 <GPIO_writePin>
    28ac:	80 e0       	ldi	r24, 0x00	; 0
    28ae:	90 e0       	ldi	r25, 0x00	; 0
    28b0:	a0 e8       	ldi	r26, 0x80	; 128
    28b2:	bf e3       	ldi	r27, 0x3F	; 63
    28b4:	89 8f       	std	Y+25, r24	; 0x19
    28b6:	9a 8f       	std	Y+26, r25	; 0x1a
    28b8:	ab 8f       	std	Y+27, r26	; 0x1b
    28ba:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28bc:	69 8d       	ldd	r22, Y+25	; 0x19
    28be:	7a 8d       	ldd	r23, Y+26	; 0x1a
    28c0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    28c2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    28c4:	20 e0       	ldi	r18, 0x00	; 0
    28c6:	30 e0       	ldi	r19, 0x00	; 0
    28c8:	4a ef       	ldi	r20, 0xFA	; 250
    28ca:	54 e4       	ldi	r21, 0x44	; 68
    28cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28d0:	dc 01       	movw	r26, r24
    28d2:	cb 01       	movw	r24, r22
    28d4:	8d 8b       	std	Y+21, r24	; 0x15
    28d6:	9e 8b       	std	Y+22, r25	; 0x16
    28d8:	af 8b       	std	Y+23, r26	; 0x17
    28da:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    28dc:	6d 89       	ldd	r22, Y+21	; 0x15
    28de:	7e 89       	ldd	r23, Y+22	; 0x16
    28e0:	8f 89       	ldd	r24, Y+23	; 0x17
    28e2:	98 8d       	ldd	r25, Y+24	; 0x18
    28e4:	20 e0       	ldi	r18, 0x00	; 0
    28e6:	30 e0       	ldi	r19, 0x00	; 0
    28e8:	40 e8       	ldi	r20, 0x80	; 128
    28ea:	5f e3       	ldi	r21, 0x3F	; 63
    28ec:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    28f0:	88 23       	and	r24, r24
    28f2:	2c f4       	brge	.+10     	; 0x28fe <LCD_displayCharacter+0x75e>
		__ticks = 1;
    28f4:	81 e0       	ldi	r24, 0x01	; 1
    28f6:	90 e0       	ldi	r25, 0x00	; 0
    28f8:	9c 8b       	std	Y+20, r25	; 0x14
    28fa:	8b 8b       	std	Y+19, r24	; 0x13
    28fc:	3f c0       	rjmp	.+126    	; 0x297c <LCD_displayCharacter+0x7dc>
	else if (__tmp > 65535)
    28fe:	6d 89       	ldd	r22, Y+21	; 0x15
    2900:	7e 89       	ldd	r23, Y+22	; 0x16
    2902:	8f 89       	ldd	r24, Y+23	; 0x17
    2904:	98 8d       	ldd	r25, Y+24	; 0x18
    2906:	20 e0       	ldi	r18, 0x00	; 0
    2908:	3f ef       	ldi	r19, 0xFF	; 255
    290a:	4f e7       	ldi	r20, 0x7F	; 127
    290c:	57 e4       	ldi	r21, 0x47	; 71
    290e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2912:	18 16       	cp	r1, r24
    2914:	4c f5       	brge	.+82     	; 0x2968 <LCD_displayCharacter+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2916:	69 8d       	ldd	r22, Y+25	; 0x19
    2918:	7a 8d       	ldd	r23, Y+26	; 0x1a
    291a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    291c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    291e:	20 e0       	ldi	r18, 0x00	; 0
    2920:	30 e0       	ldi	r19, 0x00	; 0
    2922:	40 e2       	ldi	r20, 0x20	; 32
    2924:	51 e4       	ldi	r21, 0x41	; 65
    2926:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    292a:	dc 01       	movw	r26, r24
    292c:	cb 01       	movw	r24, r22
    292e:	bc 01       	movw	r22, r24
    2930:	cd 01       	movw	r24, r26
    2932:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2936:	dc 01       	movw	r26, r24
    2938:	cb 01       	movw	r24, r22
    293a:	9c 8b       	std	Y+20, r25	; 0x14
    293c:	8b 8b       	std	Y+19, r24	; 0x13
    293e:	0f c0       	rjmp	.+30     	; 0x295e <LCD_displayCharacter+0x7be>
    2940:	88 ec       	ldi	r24, 0xC8	; 200
    2942:	90 e0       	ldi	r25, 0x00	; 0
    2944:	9a 8b       	std	Y+18, r25	; 0x12
    2946:	89 8b       	std	Y+17, r24	; 0x11
    2948:	89 89       	ldd	r24, Y+17	; 0x11
    294a:	9a 89       	ldd	r25, Y+18	; 0x12
    294c:	01 97       	sbiw	r24, 0x01	; 1
    294e:	f1 f7       	brne	.-4      	; 0x294c <LCD_displayCharacter+0x7ac>
    2950:	9a 8b       	std	Y+18, r25	; 0x12
    2952:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2954:	8b 89       	ldd	r24, Y+19	; 0x13
    2956:	9c 89       	ldd	r25, Y+20	; 0x14
    2958:	01 97       	sbiw	r24, 0x01	; 1
    295a:	9c 8b       	std	Y+20, r25	; 0x14
    295c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    295e:	8b 89       	ldd	r24, Y+19	; 0x13
    2960:	9c 89       	ldd	r25, Y+20	; 0x14
    2962:	00 97       	sbiw	r24, 0x00	; 0
    2964:	69 f7       	brne	.-38     	; 0x2940 <LCD_displayCharacter+0x7a0>
    2966:	14 c0       	rjmp	.+40     	; 0x2990 <LCD_displayCharacter+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2968:	6d 89       	ldd	r22, Y+21	; 0x15
    296a:	7e 89       	ldd	r23, Y+22	; 0x16
    296c:	8f 89       	ldd	r24, Y+23	; 0x17
    296e:	98 8d       	ldd	r25, Y+24	; 0x18
    2970:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2974:	dc 01       	movw	r26, r24
    2976:	cb 01       	movw	r24, r22
    2978:	9c 8b       	std	Y+20, r25	; 0x14
    297a:	8b 8b       	std	Y+19, r24	; 0x13
    297c:	8b 89       	ldd	r24, Y+19	; 0x13
    297e:	9c 89       	ldd	r25, Y+20	; 0x14
    2980:	98 8b       	std	Y+16, r25	; 0x10
    2982:	8f 87       	std	Y+15, r24	; 0x0f
    2984:	8f 85       	ldd	r24, Y+15	; 0x0f
    2986:	98 89       	ldd	r25, Y+16	; 0x10
    2988:	01 97       	sbiw	r24, 0x01	; 1
    298a:	f1 f7       	brne	.-4      	; 0x2988 <LCD_displayCharacter+0x7e8>
    298c:	98 8b       	std	Y+16, r25	; 0x10
    298e:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1);										   /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW); /* Disable LCD E=0 */
    2990:	80 e0       	ldi	r24, 0x00	; 0
    2992:	66 e0       	ldi	r22, 0x06	; 6
    2994:	40 e0       	ldi	r20, 0x00	; 0
    2996:	0e 94 50 09 	call	0x12a0	; 0x12a0 <GPIO_writePin>
    299a:	80 e0       	ldi	r24, 0x00	; 0
    299c:	90 e0       	ldi	r25, 0x00	; 0
    299e:	a0 e8       	ldi	r26, 0x80	; 128
    29a0:	bf e3       	ldi	r27, 0x3F	; 63
    29a2:	8b 87       	std	Y+11, r24	; 0x0b
    29a4:	9c 87       	std	Y+12, r25	; 0x0c
    29a6:	ad 87       	std	Y+13, r26	; 0x0d
    29a8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29aa:	6b 85       	ldd	r22, Y+11	; 0x0b
    29ac:	7c 85       	ldd	r23, Y+12	; 0x0c
    29ae:	8d 85       	ldd	r24, Y+13	; 0x0d
    29b0:	9e 85       	ldd	r25, Y+14	; 0x0e
    29b2:	20 e0       	ldi	r18, 0x00	; 0
    29b4:	30 e0       	ldi	r19, 0x00	; 0
    29b6:	4a ef       	ldi	r20, 0xFA	; 250
    29b8:	54 e4       	ldi	r21, 0x44	; 68
    29ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29be:	dc 01       	movw	r26, r24
    29c0:	cb 01       	movw	r24, r22
    29c2:	8f 83       	std	Y+7, r24	; 0x07
    29c4:	98 87       	std	Y+8, r25	; 0x08
    29c6:	a9 87       	std	Y+9, r26	; 0x09
    29c8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    29ca:	6f 81       	ldd	r22, Y+7	; 0x07
    29cc:	78 85       	ldd	r23, Y+8	; 0x08
    29ce:	89 85       	ldd	r24, Y+9	; 0x09
    29d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    29d2:	20 e0       	ldi	r18, 0x00	; 0
    29d4:	30 e0       	ldi	r19, 0x00	; 0
    29d6:	40 e8       	ldi	r20, 0x80	; 128
    29d8:	5f e3       	ldi	r21, 0x3F	; 63
    29da:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    29de:	88 23       	and	r24, r24
    29e0:	2c f4       	brge	.+10     	; 0x29ec <LCD_displayCharacter+0x84c>
		__ticks = 1;
    29e2:	81 e0       	ldi	r24, 0x01	; 1
    29e4:	90 e0       	ldi	r25, 0x00	; 0
    29e6:	9e 83       	std	Y+6, r25	; 0x06
    29e8:	8d 83       	std	Y+5, r24	; 0x05
    29ea:	3f c0       	rjmp	.+126    	; 0x2a6a <LCD_displayCharacter+0x8ca>
	else if (__tmp > 65535)
    29ec:	6f 81       	ldd	r22, Y+7	; 0x07
    29ee:	78 85       	ldd	r23, Y+8	; 0x08
    29f0:	89 85       	ldd	r24, Y+9	; 0x09
    29f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    29f4:	20 e0       	ldi	r18, 0x00	; 0
    29f6:	3f ef       	ldi	r19, 0xFF	; 255
    29f8:	4f e7       	ldi	r20, 0x7F	; 127
    29fa:	57 e4       	ldi	r21, 0x47	; 71
    29fc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2a00:	18 16       	cp	r1, r24
    2a02:	4c f5       	brge	.+82     	; 0x2a56 <LCD_displayCharacter+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a04:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a06:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a08:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a0a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a0c:	20 e0       	ldi	r18, 0x00	; 0
    2a0e:	30 e0       	ldi	r19, 0x00	; 0
    2a10:	40 e2       	ldi	r20, 0x20	; 32
    2a12:	51 e4       	ldi	r21, 0x41	; 65
    2a14:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a18:	dc 01       	movw	r26, r24
    2a1a:	cb 01       	movw	r24, r22
    2a1c:	bc 01       	movw	r22, r24
    2a1e:	cd 01       	movw	r24, r26
    2a20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a24:	dc 01       	movw	r26, r24
    2a26:	cb 01       	movw	r24, r22
    2a28:	9e 83       	std	Y+6, r25	; 0x06
    2a2a:	8d 83       	std	Y+5, r24	; 0x05
    2a2c:	0f c0       	rjmp	.+30     	; 0x2a4c <LCD_displayCharacter+0x8ac>
    2a2e:	88 ec       	ldi	r24, 0xC8	; 200
    2a30:	90 e0       	ldi	r25, 0x00	; 0
    2a32:	9c 83       	std	Y+4, r25	; 0x04
    2a34:	8b 83       	std	Y+3, r24	; 0x03
    2a36:	8b 81       	ldd	r24, Y+3	; 0x03
    2a38:	9c 81       	ldd	r25, Y+4	; 0x04
    2a3a:	01 97       	sbiw	r24, 0x01	; 1
    2a3c:	f1 f7       	brne	.-4      	; 0x2a3a <LCD_displayCharacter+0x89a>
    2a3e:	9c 83       	std	Y+4, r25	; 0x04
    2a40:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a42:	8d 81       	ldd	r24, Y+5	; 0x05
    2a44:	9e 81       	ldd	r25, Y+6	; 0x06
    2a46:	01 97       	sbiw	r24, 0x01	; 1
    2a48:	9e 83       	std	Y+6, r25	; 0x06
    2a4a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a4c:	8d 81       	ldd	r24, Y+5	; 0x05
    2a4e:	9e 81       	ldd	r25, Y+6	; 0x06
    2a50:	00 97       	sbiw	r24, 0x00	; 0
    2a52:	69 f7       	brne	.-38     	; 0x2a2e <LCD_displayCharacter+0x88e>
    2a54:	14 c0       	rjmp	.+40     	; 0x2a7e <LCD_displayCharacter+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a56:	6f 81       	ldd	r22, Y+7	; 0x07
    2a58:	78 85       	ldd	r23, Y+8	; 0x08
    2a5a:	89 85       	ldd	r24, Y+9	; 0x09
    2a5c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a62:	dc 01       	movw	r26, r24
    2a64:	cb 01       	movw	r24, r22
    2a66:	9e 83       	std	Y+6, r25	; 0x06
    2a68:	8d 83       	std	Y+5, r24	; 0x05
    2a6a:	8d 81       	ldd	r24, Y+5	; 0x05
    2a6c:	9e 81       	ldd	r25, Y+6	; 0x06
    2a6e:	9a 83       	std	Y+2, r25	; 0x02
    2a70:	89 83       	std	Y+1, r24	; 0x01
    2a72:	89 81       	ldd	r24, Y+1	; 0x01
    2a74:	9a 81       	ldd	r25, Y+2	; 0x02
    2a76:	01 97       	sbiw	r24, 0x01	; 1
    2a78:	f1 f7       	brne	.-4      	; 0x2a76 <LCD_displayCharacter+0x8d6>
    2a7a:	9a 83       	std	Y+2, r25	; 0x02
    2a7c:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID, data);				   /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1);										   /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1);										   /* delay for processing Th = 13ns */
#endif
}
    2a7e:	cd 59       	subi	r28, 0x9D	; 157
    2a80:	df 4f       	sbci	r29, 0xFF	; 255
    2a82:	0f b6       	in	r0, 0x3f	; 63
    2a84:	f8 94       	cli
    2a86:	de bf       	out	0x3e, r29	; 62
    2a88:	0f be       	out	0x3f, r0	; 63
    2a8a:	cd bf       	out	0x3d, r28	; 61
    2a8c:	cf 91       	pop	r28
    2a8e:	df 91       	pop	r29
    2a90:	1f 91       	pop	r17
    2a92:	0f 91       	pop	r16
    2a94:	08 95       	ret

00002a96 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    2a96:	df 93       	push	r29
    2a98:	cf 93       	push	r28
    2a9a:	00 d0       	rcall	.+0      	; 0x2a9c <LCD_displayString+0x6>
    2a9c:	0f 92       	push	r0
    2a9e:	cd b7       	in	r28, 0x3d	; 61
    2aa0:	de b7       	in	r29, 0x3e	; 62
    2aa2:	9b 83       	std	Y+3, r25	; 0x03
    2aa4:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2aa6:	19 82       	std	Y+1, r1	; 0x01
    2aa8:	0e c0       	rjmp	.+28     	; 0x2ac6 <LCD_displayString+0x30>
	while (Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    2aaa:	89 81       	ldd	r24, Y+1	; 0x01
    2aac:	28 2f       	mov	r18, r24
    2aae:	30 e0       	ldi	r19, 0x00	; 0
    2ab0:	8a 81       	ldd	r24, Y+2	; 0x02
    2ab2:	9b 81       	ldd	r25, Y+3	; 0x03
    2ab4:	fc 01       	movw	r30, r24
    2ab6:	e2 0f       	add	r30, r18
    2ab8:	f3 1f       	adc	r31, r19
    2aba:	80 81       	ld	r24, Z
    2abc:	0e 94 d0 10 	call	0x21a0	; 0x21a0 <LCD_displayCharacter>
		i++;
    2ac0:	89 81       	ldd	r24, Y+1	; 0x01
    2ac2:	8f 5f       	subi	r24, 0xFF	; 255
    2ac4:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while (Str[i] != '\0')
    2ac6:	89 81       	ldd	r24, Y+1	; 0x01
    2ac8:	28 2f       	mov	r18, r24
    2aca:	30 e0       	ldi	r19, 0x00	; 0
    2acc:	8a 81       	ldd	r24, Y+2	; 0x02
    2ace:	9b 81       	ldd	r25, Y+3	; 0x03
    2ad0:	fc 01       	movw	r30, r24
    2ad2:	e2 0f       	add	r30, r18
    2ad4:	f3 1f       	adc	r31, r19
    2ad6:	80 81       	ld	r24, Z
    2ad8:	88 23       	and	r24, r24
    2ada:	39 f7       	brne	.-50     	; 0x2aaa <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}
	*********************************************************/
}
    2adc:	0f 90       	pop	r0
    2ade:	0f 90       	pop	r0
    2ae0:	0f 90       	pop	r0
    2ae2:	cf 91       	pop	r28
    2ae4:	df 91       	pop	r29
    2ae6:	08 95       	ret

00002ae8 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row, uint8 col)
{
    2ae8:	df 93       	push	r29
    2aea:	cf 93       	push	r28
    2aec:	00 d0       	rcall	.+0      	; 0x2aee <LCD_moveCursor+0x6>
    2aee:	00 d0       	rcall	.+0      	; 0x2af0 <LCD_moveCursor+0x8>
    2af0:	0f 92       	push	r0
    2af2:	cd b7       	in	r28, 0x3d	; 61
    2af4:	de b7       	in	r29, 0x3e	; 62
    2af6:	8a 83       	std	Y+2, r24	; 0x02
    2af8:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;

	/* Calculate the required address in the LCD DDRAM */
	switch (row)
    2afa:	8a 81       	ldd	r24, Y+2	; 0x02
    2afc:	28 2f       	mov	r18, r24
    2afe:	30 e0       	ldi	r19, 0x00	; 0
    2b00:	3d 83       	std	Y+5, r19	; 0x05
    2b02:	2c 83       	std	Y+4, r18	; 0x04
    2b04:	8c 81       	ldd	r24, Y+4	; 0x04
    2b06:	9d 81       	ldd	r25, Y+5	; 0x05
    2b08:	81 30       	cpi	r24, 0x01	; 1
    2b0a:	91 05       	cpc	r25, r1
    2b0c:	c1 f0       	breq	.+48     	; 0x2b3e <LCD_moveCursor+0x56>
    2b0e:	2c 81       	ldd	r18, Y+4	; 0x04
    2b10:	3d 81       	ldd	r19, Y+5	; 0x05
    2b12:	22 30       	cpi	r18, 0x02	; 2
    2b14:	31 05       	cpc	r19, r1
    2b16:	2c f4       	brge	.+10     	; 0x2b22 <LCD_moveCursor+0x3a>
    2b18:	8c 81       	ldd	r24, Y+4	; 0x04
    2b1a:	9d 81       	ldd	r25, Y+5	; 0x05
    2b1c:	00 97       	sbiw	r24, 0x00	; 0
    2b1e:	61 f0       	breq	.+24     	; 0x2b38 <LCD_moveCursor+0x50>
    2b20:	19 c0       	rjmp	.+50     	; 0x2b54 <LCD_moveCursor+0x6c>
    2b22:	2c 81       	ldd	r18, Y+4	; 0x04
    2b24:	3d 81       	ldd	r19, Y+5	; 0x05
    2b26:	22 30       	cpi	r18, 0x02	; 2
    2b28:	31 05       	cpc	r19, r1
    2b2a:	69 f0       	breq	.+26     	; 0x2b46 <LCD_moveCursor+0x5e>
    2b2c:	8c 81       	ldd	r24, Y+4	; 0x04
    2b2e:	9d 81       	ldd	r25, Y+5	; 0x05
    2b30:	83 30       	cpi	r24, 0x03	; 3
    2b32:	91 05       	cpc	r25, r1
    2b34:	61 f0       	breq	.+24     	; 0x2b4e <LCD_moveCursor+0x66>
    2b36:	0e c0       	rjmp	.+28     	; 0x2b54 <LCD_moveCursor+0x6c>
	{
	case 0:
		lcd_memory_address = col;
    2b38:	8b 81       	ldd	r24, Y+3	; 0x03
    2b3a:	89 83       	std	Y+1, r24	; 0x01
    2b3c:	0b c0       	rjmp	.+22     	; 0x2b54 <LCD_moveCursor+0x6c>
		break;
	case 1:
		lcd_memory_address = col + 0x40;
    2b3e:	8b 81       	ldd	r24, Y+3	; 0x03
    2b40:	80 5c       	subi	r24, 0xC0	; 192
    2b42:	89 83       	std	Y+1, r24	; 0x01
    2b44:	07 c0       	rjmp	.+14     	; 0x2b54 <LCD_moveCursor+0x6c>
		break;
	case 2:
		lcd_memory_address = col + 0x10;
    2b46:	8b 81       	ldd	r24, Y+3	; 0x03
    2b48:	80 5f       	subi	r24, 0xF0	; 240
    2b4a:	89 83       	std	Y+1, r24	; 0x01
    2b4c:	03 c0       	rjmp	.+6      	; 0x2b54 <LCD_moveCursor+0x6c>
		break;
	case 3:
		lcd_memory_address = col + 0x50;
    2b4e:	8b 81       	ldd	r24, Y+3	; 0x03
    2b50:	80 5b       	subi	r24, 0xB0	; 176
    2b52:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    2b54:	89 81       	ldd	r24, Y+1	; 0x01
    2b56:	80 68       	ori	r24, 0x80	; 128
    2b58:	0e 94 55 0c 	call	0x18aa	; 0x18aa <LCD_sendCommand>
}
    2b5c:	0f 90       	pop	r0
    2b5e:	0f 90       	pop	r0
    2b60:	0f 90       	pop	r0
    2b62:	0f 90       	pop	r0
    2b64:	0f 90       	pop	r0
    2b66:	cf 91       	pop	r28
    2b68:	df 91       	pop	r29
    2b6a:	08 95       	ret

00002b6c <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row, uint8 col, const char *Str)
{
    2b6c:	df 93       	push	r29
    2b6e:	cf 93       	push	r28
    2b70:	00 d0       	rcall	.+0      	; 0x2b72 <LCD_displayStringRowColumn+0x6>
    2b72:	00 d0       	rcall	.+0      	; 0x2b74 <LCD_displayStringRowColumn+0x8>
    2b74:	cd b7       	in	r28, 0x3d	; 61
    2b76:	de b7       	in	r29, 0x3e	; 62
    2b78:	89 83       	std	Y+1, r24	; 0x01
    2b7a:	6a 83       	std	Y+2, r22	; 0x02
    2b7c:	5c 83       	std	Y+4, r21	; 0x04
    2b7e:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row, col); /* go to to the required LCD position */
    2b80:	89 81       	ldd	r24, Y+1	; 0x01
    2b82:	6a 81       	ldd	r22, Y+2	; 0x02
    2b84:	0e 94 74 15 	call	0x2ae8	; 0x2ae8 <LCD_moveCursor>
	LCD_displayString(Str);	  /* display the string */
    2b88:	8b 81       	ldd	r24, Y+3	; 0x03
    2b8a:	9c 81       	ldd	r25, Y+4	; 0x04
    2b8c:	0e 94 4b 15 	call	0x2a96	; 0x2a96 <LCD_displayString>
}
    2b90:	0f 90       	pop	r0
    2b92:	0f 90       	pop	r0
    2b94:	0f 90       	pop	r0
    2b96:	0f 90       	pop	r0
    2b98:	cf 91       	pop	r28
    2b9a:	df 91       	pop	r29
    2b9c:	08 95       	ret

00002b9e <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    2b9e:	df 93       	push	r29
    2ba0:	cf 93       	push	r28
    2ba2:	cd b7       	in	r28, 0x3d	; 61
    2ba4:	de b7       	in	r29, 0x3e	; 62
    2ba6:	62 97       	sbiw	r28, 0x12	; 18
    2ba8:	0f b6       	in	r0, 0x3f	; 63
    2baa:	f8 94       	cli
    2bac:	de bf       	out	0x3e, r29	; 62
    2bae:	0f be       	out	0x3f, r0	; 63
    2bb0:	cd bf       	out	0x3d, r28	; 61
    2bb2:	9a 8b       	std	Y+18, r25	; 0x12
    2bb4:	89 8b       	std	Y+17, r24	; 0x11
	char buff[16];			 /* String to hold the ascii result */
	itoa(data, buff, 10);	 /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    2bb6:	89 89       	ldd	r24, Y+17	; 0x11
    2bb8:	9a 89       	ldd	r25, Y+18	; 0x12
    2bba:	9e 01       	movw	r18, r28
    2bbc:	2f 5f       	subi	r18, 0xFF	; 255
    2bbe:	3f 4f       	sbci	r19, 0xFF	; 255
    2bc0:	b9 01       	movw	r22, r18
    2bc2:	4a e0       	ldi	r20, 0x0A	; 10
    2bc4:	50 e0       	ldi	r21, 0x00	; 0
    2bc6:	0e 94 64 1c 	call	0x38c8	; 0x38c8 <itoa>
	LCD_displayString(buff); /* Display the string */
    2bca:	ce 01       	movw	r24, r28
    2bcc:	01 96       	adiw	r24, 0x01	; 1
    2bce:	0e 94 4b 15 	call	0x2a96	; 0x2a96 <LCD_displayString>
}
    2bd2:	62 96       	adiw	r28, 0x12	; 18
    2bd4:	0f b6       	in	r0, 0x3f	; 63
    2bd6:	f8 94       	cli
    2bd8:	de bf       	out	0x3e, r29	; 62
    2bda:	0f be       	out	0x3f, r0	; 63
    2bdc:	cd bf       	out	0x3d, r28	; 61
    2bde:	cf 91       	pop	r28
    2be0:	df 91       	pop	r29
    2be2:	08 95       	ret

00002be4 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    2be4:	df 93       	push	r29
    2be6:	cf 93       	push	r28
    2be8:	cd b7       	in	r28, 0x3d	; 61
    2bea:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    2bec:	81 e0       	ldi	r24, 0x01	; 1
    2bee:	0e 94 55 0c 	call	0x18aa	; 0x18aa <LCD_sendCommand>
}
    2bf2:	cf 91       	pop	r28
    2bf4:	df 91       	pop	r29
    2bf6:	08 95       	ret

00002bf8 <main>:
UART_ConfigType UART_Configuration_data = {bit_8, even_parity, stop_1_bit, 9600};
TWI_ConfigType TWI_Configuration_data = {0x10, Fast_Mode};
Timer1_ConfigType Timer_Configuration_data = {0, 7812, F_cpu_1024, Compare_mode};

int main(void)
{
    2bf8:	df 93       	push	r29
    2bfa:	cf 93       	push	r28
    2bfc:	cd b7       	in	r28, 0x3d	; 61
    2bfe:	de b7       	in	r29, 0x3e	; 62
	CECU_init();
    2c00:	0e 94 11 16 	call	0x2c22	; 0x2c22 <CECU_init>
	while (1)
	{
		UART_sendByte(CONTROL_ECU_READY);
    2c04:	80 e1       	ldi	r24, 0x10	; 16
    2c06:	0e 94 79 1b 	call	0x36f2	; 0x36f2 <UART_sendByte>
		createPassword();
    2c0a:	0e 94 79 17 	call	0x2ef2	; 0x2ef2 <createPassword>
		while (UART_recieveByte() != HMI_ECU_READY)
    2c0e:	0e 94 90 1b 	call	0x3720	; 0x3720 <UART_recieveByte>
    2c12:	82 31       	cpi	r24, 0x12	; 18
    2c14:	e1 f7       	brne	.-8      	; 0x2c0e <main+0x16>
		{
		};
		UART_sendByte(CONTROL_ECU_WAITING_FOR_MENU_OPTION);
    2c16:	86 e1       	ldi	r24, 0x16	; 22
    2c18:	0e 94 79 1b 	call	0x36f2	; 0x36f2 <UART_sendByte>
		mainOptionsMenuActions();
    2c1c:	0e 94 09 18 	call	0x3012	; 0x3012 <mainOptionsMenuActions>
    2c20:	f1 cf       	rjmp	.-30     	; 0x2c04 <main+0xc>

00002c22 <CECU_init>:
 * 3. initialize Buzzer
 * 4. initialize TWI
 * 5. initialize Timer 1 and give it the address of the function to be called back
 */
void CECU_init(void)
{
    2c22:	df 93       	push	r29
    2c24:	cf 93       	push	r28
    2c26:	cd b7       	in	r28, 0x3d	; 61
    2c28:	de b7       	in	r29, 0x3e	; 62
	SREG |= (1 << 7);
    2c2a:	af e5       	ldi	r26, 0x5F	; 95
    2c2c:	b0 e0       	ldi	r27, 0x00	; 0
    2c2e:	ef e5       	ldi	r30, 0x5F	; 95
    2c30:	f0 e0       	ldi	r31, 0x00	; 0
    2c32:	80 81       	ld	r24, Z
    2c34:	80 68       	ori	r24, 0x80	; 128
    2c36:	8c 93       	st	X, r24
	DcMotor_Init();
    2c38:	0e 94 40 07 	call	0xe80	; 0xe80 <DcMotor_Init>
	Buzzer_init();
    2c3c:	0e 94 17 07 	call	0xe2e	; 0xe2e <Buzzer_init>
	UART_init(&UART_Configuration_data);
    2c40:	88 e6       	ldi	r24, 0x68	; 104
    2c42:	91 e0       	ldi	r25, 0x01	; 1
    2c44:	0e 94 dd 1a 	call	0x35ba	; 0x35ba <UART_init>
	TWI_init(&TWI_Configuration_data);
    2c48:	8d e6       	ldi	r24, 0x6D	; 109
    2c4a:	91 e0       	ldi	r25, 0x01	; 1
    2c4c:	0e 94 3f 1a 	call	0x347e	; 0x347e <TWI_init>
	Timer1_init(&Timer_Configuration_data);
    2c50:	83 e7       	ldi	r24, 0x73	; 115
    2c52:	91 e0       	ldi	r25, 0x01	; 1
    2c54:	0e 94 be 19 	call	0x337c	; 0x337c <Timer1_init>
	Timer1_setCallBack(callBackIncrementSeconds);
    2c58:	85 e0       	ldi	r24, 0x05	; 5
    2c5a:	99 e1       	ldi	r25, 0x19	; 25
    2c5c:	0e 94 2d 1a 	call	0x345a	; 0x345a <Timer1_setCallBack>
}
    2c60:	cf 91       	pop	r28
    2c62:	df 91       	pop	r29
    2c64:	08 95       	ret

00002c66 <storePasswordInMemory>:
 * Description :
 * Function responsible for storing password in the EEPROM
 */

void storePasswordInMemory(uint8 u8password[])
{
    2c66:	df 93       	push	r29
    2c68:	cf 93       	push	r28
    2c6a:	cd b7       	in	r28, 0x3d	; 61
    2c6c:	de b7       	in	r29, 0x3e	; 62
    2c6e:	61 97       	sbiw	r28, 0x11	; 17
    2c70:	0f b6       	in	r0, 0x3f	; 63
    2c72:	f8 94       	cli
    2c74:	de bf       	out	0x3e, r29	; 62
    2c76:	0f be       	out	0x3f, r0	; 63
    2c78:	cd bf       	out	0x3d, r28	; 61
    2c7a:	99 8b       	std	Y+17, r25	; 0x11
    2c7c:	88 8b       	std	Y+16, r24	; 0x10
	uint8 counter = 0;
    2c7e:	1f 86       	std	Y+15, r1	; 0x0f
	for (counter = 0; counter < PASS_LENGTH; counter++)
    2c80:	1f 86       	std	Y+15, r1	; 0x0f
    2c82:	88 c0       	rjmp	.+272    	; 0x2d94 <storePasswordInMemory+0x12e>
	{
		EEPROM_writeByte(0x0311 + counter, u8password[counter]); /* Write byte in the external EEPROM */
    2c84:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c86:	88 2f       	mov	r24, r24
    2c88:	90 e0       	ldi	r25, 0x00	; 0
    2c8a:	8f 5e       	subi	r24, 0xEF	; 239
    2c8c:	9c 4f       	sbci	r25, 0xFC	; 252
    2c8e:	ac 01       	movw	r20, r24
    2c90:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c92:	28 2f       	mov	r18, r24
    2c94:	30 e0       	ldi	r19, 0x00	; 0
    2c96:	88 89       	ldd	r24, Y+16	; 0x10
    2c98:	99 89       	ldd	r25, Y+17	; 0x11
    2c9a:	fc 01       	movw	r30, r24
    2c9c:	e2 0f       	add	r30, r18
    2c9e:	f3 1f       	adc	r31, r19
    2ca0:	20 81       	ld	r18, Z
    2ca2:	ca 01       	movw	r24, r20
    2ca4:	62 2f       	mov	r22, r18
    2ca6:	0e 94 c4 07 	call	0xf88	; 0xf88 <EEPROM_writeByte>
    2caa:	80 e0       	ldi	r24, 0x00	; 0
    2cac:	90 e0       	ldi	r25, 0x00	; 0
    2cae:	a0 e2       	ldi	r26, 0x20	; 32
    2cb0:	b1 e4       	ldi	r27, 0x41	; 65
    2cb2:	8b 87       	std	Y+11, r24	; 0x0b
    2cb4:	9c 87       	std	Y+12, r25	; 0x0c
    2cb6:	ad 87       	std	Y+13, r26	; 0x0d
    2cb8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cba:	6b 85       	ldd	r22, Y+11	; 0x0b
    2cbc:	7c 85       	ldd	r23, Y+12	; 0x0c
    2cbe:	8d 85       	ldd	r24, Y+13	; 0x0d
    2cc0:	9e 85       	ldd	r25, Y+14	; 0x0e
    2cc2:	20 e0       	ldi	r18, 0x00	; 0
    2cc4:	30 e0       	ldi	r19, 0x00	; 0
    2cc6:	4a ef       	ldi	r20, 0xFA	; 250
    2cc8:	54 e4       	ldi	r21, 0x44	; 68
    2cca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cce:	dc 01       	movw	r26, r24
    2cd0:	cb 01       	movw	r24, r22
    2cd2:	8f 83       	std	Y+7, r24	; 0x07
    2cd4:	98 87       	std	Y+8, r25	; 0x08
    2cd6:	a9 87       	std	Y+9, r26	; 0x09
    2cd8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2cda:	6f 81       	ldd	r22, Y+7	; 0x07
    2cdc:	78 85       	ldd	r23, Y+8	; 0x08
    2cde:	89 85       	ldd	r24, Y+9	; 0x09
    2ce0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ce2:	20 e0       	ldi	r18, 0x00	; 0
    2ce4:	30 e0       	ldi	r19, 0x00	; 0
    2ce6:	40 e8       	ldi	r20, 0x80	; 128
    2ce8:	5f e3       	ldi	r21, 0x3F	; 63
    2cea:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2cee:	88 23       	and	r24, r24
    2cf0:	2c f4       	brge	.+10     	; 0x2cfc <storePasswordInMemory+0x96>
		__ticks = 1;
    2cf2:	81 e0       	ldi	r24, 0x01	; 1
    2cf4:	90 e0       	ldi	r25, 0x00	; 0
    2cf6:	9e 83       	std	Y+6, r25	; 0x06
    2cf8:	8d 83       	std	Y+5, r24	; 0x05
    2cfa:	3f c0       	rjmp	.+126    	; 0x2d7a <storePasswordInMemory+0x114>
	else if (__tmp > 65535)
    2cfc:	6f 81       	ldd	r22, Y+7	; 0x07
    2cfe:	78 85       	ldd	r23, Y+8	; 0x08
    2d00:	89 85       	ldd	r24, Y+9	; 0x09
    2d02:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d04:	20 e0       	ldi	r18, 0x00	; 0
    2d06:	3f ef       	ldi	r19, 0xFF	; 255
    2d08:	4f e7       	ldi	r20, 0x7F	; 127
    2d0a:	57 e4       	ldi	r21, 0x47	; 71
    2d0c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2d10:	18 16       	cp	r1, r24
    2d12:	4c f5       	brge	.+82     	; 0x2d66 <storePasswordInMemory+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d14:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d16:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d18:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d1a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d1c:	20 e0       	ldi	r18, 0x00	; 0
    2d1e:	30 e0       	ldi	r19, 0x00	; 0
    2d20:	40 e2       	ldi	r20, 0x20	; 32
    2d22:	51 e4       	ldi	r21, 0x41	; 65
    2d24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d28:	dc 01       	movw	r26, r24
    2d2a:	cb 01       	movw	r24, r22
    2d2c:	bc 01       	movw	r22, r24
    2d2e:	cd 01       	movw	r24, r26
    2d30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d34:	dc 01       	movw	r26, r24
    2d36:	cb 01       	movw	r24, r22
    2d38:	9e 83       	std	Y+6, r25	; 0x06
    2d3a:	8d 83       	std	Y+5, r24	; 0x05
    2d3c:	0f c0       	rjmp	.+30     	; 0x2d5c <storePasswordInMemory+0xf6>
    2d3e:	88 ec       	ldi	r24, 0xC8	; 200
    2d40:	90 e0       	ldi	r25, 0x00	; 0
    2d42:	9c 83       	std	Y+4, r25	; 0x04
    2d44:	8b 83       	std	Y+3, r24	; 0x03
    2d46:	8b 81       	ldd	r24, Y+3	; 0x03
    2d48:	9c 81       	ldd	r25, Y+4	; 0x04
    2d4a:	01 97       	sbiw	r24, 0x01	; 1
    2d4c:	f1 f7       	brne	.-4      	; 0x2d4a <storePasswordInMemory+0xe4>
    2d4e:	9c 83       	std	Y+4, r25	; 0x04
    2d50:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d52:	8d 81       	ldd	r24, Y+5	; 0x05
    2d54:	9e 81       	ldd	r25, Y+6	; 0x06
    2d56:	01 97       	sbiw	r24, 0x01	; 1
    2d58:	9e 83       	std	Y+6, r25	; 0x06
    2d5a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d5c:	8d 81       	ldd	r24, Y+5	; 0x05
    2d5e:	9e 81       	ldd	r25, Y+6	; 0x06
    2d60:	00 97       	sbiw	r24, 0x00	; 0
    2d62:	69 f7       	brne	.-38     	; 0x2d3e <storePasswordInMemory+0xd8>
    2d64:	14 c0       	rjmp	.+40     	; 0x2d8e <storePasswordInMemory+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d66:	6f 81       	ldd	r22, Y+7	; 0x07
    2d68:	78 85       	ldd	r23, Y+8	; 0x08
    2d6a:	89 85       	ldd	r24, Y+9	; 0x09
    2d6c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d72:	dc 01       	movw	r26, r24
    2d74:	cb 01       	movw	r24, r22
    2d76:	9e 83       	std	Y+6, r25	; 0x06
    2d78:	8d 83       	std	Y+5, r24	; 0x05
    2d7a:	8d 81       	ldd	r24, Y+5	; 0x05
    2d7c:	9e 81       	ldd	r25, Y+6	; 0x06
    2d7e:	9a 83       	std	Y+2, r25	; 0x02
    2d80:	89 83       	std	Y+1, r24	; 0x01
    2d82:	89 81       	ldd	r24, Y+1	; 0x01
    2d84:	9a 81       	ldd	r25, Y+2	; 0x02
    2d86:	01 97       	sbiw	r24, 0x01	; 1
    2d88:	f1 f7       	brne	.-4      	; 0x2d86 <storePasswordInMemory+0x120>
    2d8a:	9a 83       	std	Y+2, r25	; 0x02
    2d8c:	89 83       	std	Y+1, r24	; 0x01
 */

void storePasswordInMemory(uint8 u8password[])
{
	uint8 counter = 0;
	for (counter = 0; counter < PASS_LENGTH; counter++)
    2d8e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d90:	8f 5f       	subi	r24, 0xFF	; 255
    2d92:	8f 87       	std	Y+15, r24	; 0x0f
    2d94:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d96:	85 30       	cpi	r24, 0x05	; 5
    2d98:	08 f4       	brcc	.+2      	; 0x2d9c <storePasswordInMemory+0x136>
    2d9a:	74 cf       	rjmp	.-280    	; 0x2c84 <storePasswordInMemory+0x1e>
	{
		EEPROM_writeByte(0x0311 + counter, u8password[counter]); /* Write byte in the external EEPROM */
		_delay_ms(10);
	}
}
    2d9c:	61 96       	adiw	r28, 0x11	; 17
    2d9e:	0f b6       	in	r0, 0x3f	; 63
    2da0:	f8 94       	cli
    2da2:	de bf       	out	0x3e, r29	; 62
    2da4:	0f be       	out	0x3f, r0	; 63
    2da6:	cd bf       	out	0x3d, r28	; 61
    2da8:	cf 91       	pop	r28
    2daa:	df 91       	pop	r29
    2dac:	08 95       	ret

00002dae <readPasswordFromMemory>:
/*
 * Description :
 * Function responsible for reading password from the EEPROM
 */
void readPasswordFromMemory(uint8 u8password[])
{
    2dae:	df 93       	push	r29
    2db0:	cf 93       	push	r28
    2db2:	cd b7       	in	r28, 0x3d	; 61
    2db4:	de b7       	in	r29, 0x3e	; 62
    2db6:	61 97       	sbiw	r28, 0x11	; 17
    2db8:	0f b6       	in	r0, 0x3f	; 63
    2dba:	f8 94       	cli
    2dbc:	de bf       	out	0x3e, r29	; 62
    2dbe:	0f be       	out	0x3f, r0	; 63
    2dc0:	cd bf       	out	0x3d, r28	; 61
    2dc2:	99 8b       	std	Y+17, r25	; 0x11
    2dc4:	88 8b       	std	Y+16, r24	; 0x10
	uint8 counter = 0;
    2dc6:	1f 86       	std	Y+15, r1	; 0x0f
	for (counter = 0; counter < PASS_LENGTH; counter++)
    2dc8:	1f 86       	std	Y+15, r1	; 0x0f
    2dca:	86 c0       	rjmp	.+268    	; 0x2ed8 <readPasswordFromMemory+0x12a>
	{
		EEPROM_readByte(0x0311 + counter, &u8password[counter]); /* Write byte in the external EEPROM */
    2dcc:	8f 85       	ldd	r24, Y+15	; 0x0f
    2dce:	88 2f       	mov	r24, r24
    2dd0:	90 e0       	ldi	r25, 0x00	; 0
    2dd2:	8f 5e       	subi	r24, 0xEF	; 239
    2dd4:	9c 4f       	sbci	r25, 0xFC	; 252
    2dd6:	ac 01       	movw	r20, r24
    2dd8:	8f 85       	ldd	r24, Y+15	; 0x0f
    2dda:	28 2f       	mov	r18, r24
    2ddc:	30 e0       	ldi	r19, 0x00	; 0
    2dde:	88 89       	ldd	r24, Y+16	; 0x10
    2de0:	99 89       	ldd	r25, Y+17	; 0x11
    2de2:	28 0f       	add	r18, r24
    2de4:	39 1f       	adc	r19, r25
    2de6:	ca 01       	movw	r24, r20
    2de8:	b9 01       	movw	r22, r18
    2dea:	0e 94 05 08 	call	0x100a	; 0x100a <EEPROM_readByte>
    2dee:	80 e0       	ldi	r24, 0x00	; 0
    2df0:	90 e0       	ldi	r25, 0x00	; 0
    2df2:	a0 e2       	ldi	r26, 0x20	; 32
    2df4:	b1 e4       	ldi	r27, 0x41	; 65
    2df6:	8b 87       	std	Y+11, r24	; 0x0b
    2df8:	9c 87       	std	Y+12, r25	; 0x0c
    2dfa:	ad 87       	std	Y+13, r26	; 0x0d
    2dfc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2dfe:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e00:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e02:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e04:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e06:	20 e0       	ldi	r18, 0x00	; 0
    2e08:	30 e0       	ldi	r19, 0x00	; 0
    2e0a:	4a ef       	ldi	r20, 0xFA	; 250
    2e0c:	54 e4       	ldi	r21, 0x44	; 68
    2e0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e12:	dc 01       	movw	r26, r24
    2e14:	cb 01       	movw	r24, r22
    2e16:	8f 83       	std	Y+7, r24	; 0x07
    2e18:	98 87       	std	Y+8, r25	; 0x08
    2e1a:	a9 87       	std	Y+9, r26	; 0x09
    2e1c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2e1e:	6f 81       	ldd	r22, Y+7	; 0x07
    2e20:	78 85       	ldd	r23, Y+8	; 0x08
    2e22:	89 85       	ldd	r24, Y+9	; 0x09
    2e24:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e26:	20 e0       	ldi	r18, 0x00	; 0
    2e28:	30 e0       	ldi	r19, 0x00	; 0
    2e2a:	40 e8       	ldi	r20, 0x80	; 128
    2e2c:	5f e3       	ldi	r21, 0x3F	; 63
    2e2e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2e32:	88 23       	and	r24, r24
    2e34:	2c f4       	brge	.+10     	; 0x2e40 <readPasswordFromMemory+0x92>
		__ticks = 1;
    2e36:	81 e0       	ldi	r24, 0x01	; 1
    2e38:	90 e0       	ldi	r25, 0x00	; 0
    2e3a:	9e 83       	std	Y+6, r25	; 0x06
    2e3c:	8d 83       	std	Y+5, r24	; 0x05
    2e3e:	3f c0       	rjmp	.+126    	; 0x2ebe <readPasswordFromMemory+0x110>
	else if (__tmp > 65535)
    2e40:	6f 81       	ldd	r22, Y+7	; 0x07
    2e42:	78 85       	ldd	r23, Y+8	; 0x08
    2e44:	89 85       	ldd	r24, Y+9	; 0x09
    2e46:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e48:	20 e0       	ldi	r18, 0x00	; 0
    2e4a:	3f ef       	ldi	r19, 0xFF	; 255
    2e4c:	4f e7       	ldi	r20, 0x7F	; 127
    2e4e:	57 e4       	ldi	r21, 0x47	; 71
    2e50:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2e54:	18 16       	cp	r1, r24
    2e56:	4c f5       	brge	.+82     	; 0x2eaa <readPasswordFromMemory+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e58:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e5a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e5c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e5e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e60:	20 e0       	ldi	r18, 0x00	; 0
    2e62:	30 e0       	ldi	r19, 0x00	; 0
    2e64:	40 e2       	ldi	r20, 0x20	; 32
    2e66:	51 e4       	ldi	r21, 0x41	; 65
    2e68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e6c:	dc 01       	movw	r26, r24
    2e6e:	cb 01       	movw	r24, r22
    2e70:	bc 01       	movw	r22, r24
    2e72:	cd 01       	movw	r24, r26
    2e74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e78:	dc 01       	movw	r26, r24
    2e7a:	cb 01       	movw	r24, r22
    2e7c:	9e 83       	std	Y+6, r25	; 0x06
    2e7e:	8d 83       	std	Y+5, r24	; 0x05
    2e80:	0f c0       	rjmp	.+30     	; 0x2ea0 <readPasswordFromMemory+0xf2>
    2e82:	88 ec       	ldi	r24, 0xC8	; 200
    2e84:	90 e0       	ldi	r25, 0x00	; 0
    2e86:	9c 83       	std	Y+4, r25	; 0x04
    2e88:	8b 83       	std	Y+3, r24	; 0x03
    2e8a:	8b 81       	ldd	r24, Y+3	; 0x03
    2e8c:	9c 81       	ldd	r25, Y+4	; 0x04
    2e8e:	01 97       	sbiw	r24, 0x01	; 1
    2e90:	f1 f7       	brne	.-4      	; 0x2e8e <readPasswordFromMemory+0xe0>
    2e92:	9c 83       	std	Y+4, r25	; 0x04
    2e94:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e96:	8d 81       	ldd	r24, Y+5	; 0x05
    2e98:	9e 81       	ldd	r25, Y+6	; 0x06
    2e9a:	01 97       	sbiw	r24, 0x01	; 1
    2e9c:	9e 83       	std	Y+6, r25	; 0x06
    2e9e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ea0:	8d 81       	ldd	r24, Y+5	; 0x05
    2ea2:	9e 81       	ldd	r25, Y+6	; 0x06
    2ea4:	00 97       	sbiw	r24, 0x00	; 0
    2ea6:	69 f7       	brne	.-38     	; 0x2e82 <readPasswordFromMemory+0xd4>
    2ea8:	14 c0       	rjmp	.+40     	; 0x2ed2 <readPasswordFromMemory+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2eaa:	6f 81       	ldd	r22, Y+7	; 0x07
    2eac:	78 85       	ldd	r23, Y+8	; 0x08
    2eae:	89 85       	ldd	r24, Y+9	; 0x09
    2eb0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2eb2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2eb6:	dc 01       	movw	r26, r24
    2eb8:	cb 01       	movw	r24, r22
    2eba:	9e 83       	std	Y+6, r25	; 0x06
    2ebc:	8d 83       	std	Y+5, r24	; 0x05
    2ebe:	8d 81       	ldd	r24, Y+5	; 0x05
    2ec0:	9e 81       	ldd	r25, Y+6	; 0x06
    2ec2:	9a 83       	std	Y+2, r25	; 0x02
    2ec4:	89 83       	std	Y+1, r24	; 0x01
    2ec6:	89 81       	ldd	r24, Y+1	; 0x01
    2ec8:	9a 81       	ldd	r25, Y+2	; 0x02
    2eca:	01 97       	sbiw	r24, 0x01	; 1
    2ecc:	f1 f7       	brne	.-4      	; 0x2eca <readPasswordFromMemory+0x11c>
    2ece:	9a 83       	std	Y+2, r25	; 0x02
    2ed0:	89 83       	std	Y+1, r24	; 0x01
 * Function responsible for reading password from the EEPROM
 */
void readPasswordFromMemory(uint8 u8password[])
{
	uint8 counter = 0;
	for (counter = 0; counter < PASS_LENGTH; counter++)
    2ed2:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ed4:	8f 5f       	subi	r24, 0xFF	; 255
    2ed6:	8f 87       	std	Y+15, r24	; 0x0f
    2ed8:	8f 85       	ldd	r24, Y+15	; 0x0f
    2eda:	85 30       	cpi	r24, 0x05	; 5
    2edc:	08 f4       	brcc	.+2      	; 0x2ee0 <readPasswordFromMemory+0x132>
    2ede:	76 cf       	rjmp	.-276    	; 0x2dcc <readPasswordFromMemory+0x1e>
	{
		EEPROM_readByte(0x0311 + counter, &u8password[counter]); /* Write byte in the external EEPROM */
		_delay_ms(10);
	}
}
    2ee0:	61 96       	adiw	r28, 0x11	; 17
    2ee2:	0f b6       	in	r0, 0x3f	; 63
    2ee4:	f8 94       	cli
    2ee6:	de bf       	out	0x3e, r29	; 62
    2ee8:	0f be       	out	0x3f, r0	; 63
    2eea:	cd bf       	out	0x3d, r28	; 61
    2eec:	cf 91       	pop	r28
    2eee:	df 91       	pop	r29
    2ef0:	08 95       	ret

00002ef2 <createPassword>:
 * 2. Receive password re-confirmation from HMI
 * 3. Compare the two passwords and store it in memory
 * if it's valid password
 */
void createPassword(void)
{
    2ef2:	df 93       	push	r29
    2ef4:	cf 93       	push	r28
    2ef6:	cd b7       	in	r28, 0x3d	; 61
    2ef8:	de b7       	in	r29, 0x3e	; 62
	while (1)
	{
		recievePass();
    2efa:	0e 94 98 17 	call	0x2f30	; 0x2f30 <recievePass>
		recievePassreconfirm();
    2efe:	0e 94 b6 17 	call	0x2f6c	; 0x2f6c <recievePassreconfirm>
		if (Passwordcheck(pass_arr,reconfirmpass_arr))
    2f02:	8a e8       	ldi	r24, 0x8A	; 138
    2f04:	91 e0       	ldi	r25, 0x01	; 1
    2f06:	24 e8       	ldi	r18, 0x84	; 132
    2f08:	31 e0       	ldi	r19, 0x01	; 1
    2f0a:	b9 01       	movw	r22, r18
    2f0c:	0e 94 d4 17 	call	0x2fa8	; 0x2fa8 <Passwordcheck>
    2f10:	88 23       	and	r24, r24
    2f12:	51 f0       	breq	.+20     	; 0x2f28 <createPassword+0x36>
		{
			storePasswordInMemory(pass_arr);
    2f14:	8a e8       	ldi	r24, 0x8A	; 138
    2f16:	91 e0       	ldi	r25, 0x01	; 1
    2f18:	0e 94 33 16 	call	0x2c66	; 0x2c66 <storePasswordInMemory>
			UART_sendByte(CONTROL_ECU_GOT_VALID_PASSWORD);
    2f1c:	84 e1       	ldi	r24, 0x14	; 20
    2f1e:	0e 94 79 1b 	call	0x36f2	; 0x36f2 <UART_sendByte>
			break;
		}
		else
		UART_sendByte(PASSWORD_NOT_MATCHED);  //uart must recieve a value to break from the loop
	}
}
    2f22:	cf 91       	pop	r28
    2f24:	df 91       	pop	r29
    2f26:	08 95       	ret
			storePasswordInMemory(pass_arr);
			UART_sendByte(CONTROL_ECU_GOT_VALID_PASSWORD);
			break;
		}
		else
		UART_sendByte(PASSWORD_NOT_MATCHED);  //uart must recieve a value to break from the loop
    2f28:	85 e1       	ldi	r24, 0x15	; 21
    2f2a:	0e 94 79 1b 	call	0x36f2	; 0x36f2 <UART_sendByte>
    2f2e:	e5 cf       	rjmp	.-54     	; 0x2efa <createPassword+0x8>

00002f30 <recievePass>:
 * Description :
 * Function responsible for Receive the entered password from HMI
 * and saving it to the global password array
 */
void recievePass(void)
{
    2f30:	0f 93       	push	r16
    2f32:	1f 93       	push	r17
    2f34:	df 93       	push	r29
    2f36:	cf 93       	push	r28
    2f38:	0f 92       	push	r0
    2f3a:	cd b7       	in	r28, 0x3d	; 61
    2f3c:	de b7       	in	r29, 0x3e	; 62
uint8 loop_counter;
	for (loop_counter = 0; loop_counter < PASS_LENGTH; loop_counter++)
    2f3e:	19 82       	std	Y+1, r1	; 0x01
    2f40:	0c c0       	rjmp	.+24     	; 0x2f5a <recievePass+0x2a>
	{
		pass_arr[loop_counter] = UART_recieveByte();
    2f42:	89 81       	ldd	r24, Y+1	; 0x01
    2f44:	08 2f       	mov	r16, r24
    2f46:	10 e0       	ldi	r17, 0x00	; 0
    2f48:	0e 94 90 1b 	call	0x3720	; 0x3720 <UART_recieveByte>
    2f4c:	f8 01       	movw	r30, r16
    2f4e:	e6 57       	subi	r30, 0x76	; 118
    2f50:	fe 4f       	sbci	r31, 0xFE	; 254
    2f52:	80 83       	st	Z, r24
 * and saving it to the global password array
 */
void recievePass(void)
{
uint8 loop_counter;
	for (loop_counter = 0; loop_counter < PASS_LENGTH; loop_counter++)
    2f54:	89 81       	ldd	r24, Y+1	; 0x01
    2f56:	8f 5f       	subi	r24, 0xFF	; 255
    2f58:	89 83       	std	Y+1, r24	; 0x01
    2f5a:	89 81       	ldd	r24, Y+1	; 0x01
    2f5c:	85 30       	cpi	r24, 0x05	; 5
    2f5e:	88 f3       	brcs	.-30     	; 0x2f42 <recievePass+0x12>
	{
		pass_arr[loop_counter] = UART_recieveByte();
	}
}
    2f60:	0f 90       	pop	r0
    2f62:	cf 91       	pop	r28
    2f64:	df 91       	pop	r29
    2f66:	1f 91       	pop	r17
    2f68:	0f 91       	pop	r16
    2f6a:	08 95       	ret

00002f6c <recievePassreconfirm>:
 * Description :
 * Function responsible for Receive the entered password from HMI
 * and saving it to the global re-confirmation password array
 */
void recievePassreconfirm(void)
{
    2f6c:	0f 93       	push	r16
    2f6e:	1f 93       	push	r17
    2f70:	df 93       	push	r29
    2f72:	cf 93       	push	r28
    2f74:	0f 92       	push	r0
    2f76:	cd b7       	in	r28, 0x3d	; 61
    2f78:	de b7       	in	r29, 0x3e	; 62
	uint8 loop_counter;
	for (loop_counter = 0; loop_counter < PASS_LENGTH; loop_counter++)
    2f7a:	19 82       	std	Y+1, r1	; 0x01
    2f7c:	0c c0       	rjmp	.+24     	; 0x2f96 <recievePassreconfirm+0x2a>
	{
		reconfirmpass_arr[loop_counter] = UART_recieveByte();
    2f7e:	89 81       	ldd	r24, Y+1	; 0x01
    2f80:	08 2f       	mov	r16, r24
    2f82:	10 e0       	ldi	r17, 0x00	; 0
    2f84:	0e 94 90 1b 	call	0x3720	; 0x3720 <UART_recieveByte>
    2f88:	f8 01       	movw	r30, r16
    2f8a:	ec 57       	subi	r30, 0x7C	; 124
    2f8c:	fe 4f       	sbci	r31, 0xFE	; 254
    2f8e:	80 83       	st	Z, r24
 * and saving it to the global re-confirmation password array
 */
void recievePassreconfirm(void)
{
	uint8 loop_counter;
	for (loop_counter = 0; loop_counter < PASS_LENGTH; loop_counter++)
    2f90:	89 81       	ldd	r24, Y+1	; 0x01
    2f92:	8f 5f       	subi	r24, 0xFF	; 255
    2f94:	89 83       	std	Y+1, r24	; 0x01
    2f96:	89 81       	ldd	r24, Y+1	; 0x01
    2f98:	85 30       	cpi	r24, 0x05	; 5
    2f9a:	88 f3       	brcs	.-30     	; 0x2f7e <recievePassreconfirm+0x12>
	{
		reconfirmpass_arr[loop_counter] = UART_recieveByte();
	}
}
    2f9c:	0f 90       	pop	r0
    2f9e:	cf 91       	pop	r28
    2fa0:	df 91       	pop	r29
    2fa2:	1f 91       	pop	r17
    2fa4:	0f 91       	pop	r16
    2fa6:	08 95       	ret

00002fa8 <Passwordcheck>:
 * Function responsible for comparing two passwords and
 * return the boolean results
 */

boolean Passwordcheck(uint8 First_arr[],uint8 Second_arr[])
{
    2fa8:	df 93       	push	r29
    2faa:	cf 93       	push	r28
    2fac:	00 d0       	rcall	.+0      	; 0x2fae <Passwordcheck+0x6>
    2fae:	00 d0       	rcall	.+0      	; 0x2fb0 <Passwordcheck+0x8>
    2fb0:	00 d0       	rcall	.+0      	; 0x2fb2 <Passwordcheck+0xa>
    2fb2:	cd b7       	in	r28, 0x3d	; 61
    2fb4:	de b7       	in	r29, 0x3e	; 62
    2fb6:	9b 83       	std	Y+3, r25	; 0x03
    2fb8:	8a 83       	std	Y+2, r24	; 0x02
    2fba:	7d 83       	std	Y+5, r23	; 0x05
    2fbc:	6c 83       	std	Y+4, r22	; 0x04
	uint8 loop_counter;
	for (loop_counter = 0; loop_counter < PASS_LENGTH; loop_counter++)
    2fbe:	19 82       	std	Y+1, r1	; 0x01
    2fc0:	19 c0       	rjmp	.+50     	; 0x2ff4 <Passwordcheck+0x4c>
	{
		if (First_arr[loop_counter] != Second_arr[loop_counter])
    2fc2:	89 81       	ldd	r24, Y+1	; 0x01
    2fc4:	28 2f       	mov	r18, r24
    2fc6:	30 e0       	ldi	r19, 0x00	; 0
    2fc8:	8a 81       	ldd	r24, Y+2	; 0x02
    2fca:	9b 81       	ldd	r25, Y+3	; 0x03
    2fcc:	fc 01       	movw	r30, r24
    2fce:	e2 0f       	add	r30, r18
    2fd0:	f3 1f       	adc	r31, r19
    2fd2:	40 81       	ld	r20, Z
    2fd4:	89 81       	ldd	r24, Y+1	; 0x01
    2fd6:	28 2f       	mov	r18, r24
    2fd8:	30 e0       	ldi	r19, 0x00	; 0
    2fda:	8c 81       	ldd	r24, Y+4	; 0x04
    2fdc:	9d 81       	ldd	r25, Y+5	; 0x05
    2fde:	fc 01       	movw	r30, r24
    2fe0:	e2 0f       	add	r30, r18
    2fe2:	f3 1f       	adc	r31, r19
    2fe4:	80 81       	ld	r24, Z
    2fe6:	48 17       	cp	r20, r24
    2fe8:	11 f0       	breq	.+4      	; 0x2fee <Passwordcheck+0x46>
			return FALSE;
    2fea:	1e 82       	std	Y+6, r1	; 0x06
    2fec:	08 c0       	rjmp	.+16     	; 0x2ffe <Passwordcheck+0x56>
 */

boolean Passwordcheck(uint8 First_arr[],uint8 Second_arr[])
{
	uint8 loop_counter;
	for (loop_counter = 0; loop_counter < PASS_LENGTH; loop_counter++)
    2fee:	89 81       	ldd	r24, Y+1	; 0x01
    2ff0:	8f 5f       	subi	r24, 0xFF	; 255
    2ff2:	89 83       	std	Y+1, r24	; 0x01
    2ff4:	89 81       	ldd	r24, Y+1	; 0x01
    2ff6:	85 30       	cpi	r24, 0x05	; 5
    2ff8:	20 f3       	brcs	.-56     	; 0x2fc2 <Passwordcheck+0x1a>
	{
		if (First_arr[loop_counter] != Second_arr[loop_counter])
			return FALSE;
	}
	return TRUE;
    2ffa:	81 e0       	ldi	r24, 0x01	; 1
    2ffc:	8e 83       	std	Y+6, r24	; 0x06
    2ffe:	8e 81       	ldd	r24, Y+6	; 0x06
}
    3000:	26 96       	adiw	r28, 0x06	; 6
    3002:	0f b6       	in	r0, 0x3f	; 63
    3004:	f8 94       	cli
    3006:	de bf       	out	0x3e, r29	; 62
    3008:	0f be       	out	0x3f, r0	; 63
    300a:	cd bf       	out	0x3d, r28	; 61
    300c:	cf 91       	pop	r28
    300e:	df 91       	pop	r29
    3010:	08 95       	ret

00003012 <mainOptionsMenuActions>:
 * 2. Receive the entered password and compare it with the saved one in memory
 * 3. Based on the compare results do certain actions
 */

void mainOptionsMenuActions(void)
{
    3012:	df 93       	push	r29
    3014:	cf 93       	push	r28
    3016:	cd b7       	in	r28, 0x3d	; 61
    3018:	de b7       	in	r29, 0x3e	; 62
    301a:	2a 97       	sbiw	r28, 0x0a	; 10
    301c:	0f b6       	in	r0, 0x3f	; 63
    301e:	f8 94       	cli
    3020:	de bf       	out	0x3e, r29	; 62
    3022:	0f be       	out	0x3f, r0	; 63
    3024:	cd bf       	out	0x3d, r28	; 61
while(1){
	uint8 option;
	while(1){
		uint8 key = UART_recieveByte();
    3026:	0e 94 90 1b 	call	0x3720	; 0x3720 <UART_recieveByte>
    302a:	8b 83       	std	Y+3, r24	; 0x03
		if (key == '+' || key == '-')
    302c:	8b 81       	ldd	r24, Y+3	; 0x03
    302e:	8b 32       	cpi	r24, 0x2B	; 43
    3030:	19 f0       	breq	.+6      	; 0x3038 <mainOptionsMenuActions+0x26>
    3032:	8b 81       	ldd	r24, Y+3	; 0x03
    3034:	8d 32       	cpi	r24, 0x2D	; 45
    3036:	b9 f7       	brne	.-18     	; 0x3026 <mainOptionsMenuActions+0x14>
		{
         option=key;
    3038:	8b 81       	ldd	r24, Y+3	; 0x03
    303a:	8c 83       	std	Y+4, r24	; 0x04
			UART_sendByte(CONTROL_ECU_GOT_MENU_OPTION);
    303c:	88 e1       	ldi	r24, 0x18	; 24
    303e:	0e 94 79 1b 	call	0x36f2	; 0x36f2 <UART_sendByte>
			break;
		}
	}

		switch (option)
    3042:	8c 81       	ldd	r24, Y+4	; 0x04
    3044:	28 2f       	mov	r18, r24
    3046:	30 e0       	ldi	r19, 0x00	; 0
    3048:	3a 87       	std	Y+10, r19	; 0x0a
    304a:	29 87       	std	Y+9, r18	; 0x09
    304c:	89 85       	ldd	r24, Y+9	; 0x09
    304e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3050:	8b 32       	cpi	r24, 0x2B	; 43
    3052:	91 05       	cpc	r25, r1
    3054:	39 f0       	breq	.+14     	; 0x3064 <mainOptionsMenuActions+0x52>
    3056:	29 85       	ldd	r18, Y+9	; 0x09
    3058:	3a 85       	ldd	r19, Y+10	; 0x0a
    305a:	2d 32       	cpi	r18, 0x2D	; 45
    305c:	31 05       	cpc	r19, r1
    305e:	09 f4       	brne	.+2      	; 0x3062 <mainOptionsMenuActions+0x50>
    3060:	81 c0       	rjmp	.+258    	; 0x3164 <mainOptionsMenuActions+0x152>
    3062:	c3 c0       	rjmp	.+390    	; 0x31ea <mainOptionsMenuActions+0x1d8>
		{
		case '+':
		{
			passwordMemoryCompare();
    3064:	0e 94 25 19 	call	0x324a	; 0x324a <passwordMemoryCompare>
			UART_sendByte(passwordCompareResult);
    3068:	80 91 89 01 	lds	r24, 0x0189
    306c:	0e 94 79 1b 	call	0x36f2	; 0x36f2 <UART_sendByte>
			switch (passwordCompareResult)
    3070:	80 91 89 01 	lds	r24, 0x0189
    3074:	28 2f       	mov	r18, r24
    3076:	30 e0       	ldi	r19, 0x00	; 0
    3078:	38 87       	std	Y+8, r19	; 0x08
    307a:	2f 83       	std	Y+7, r18	; 0x07
    307c:	8f 81       	ldd	r24, Y+7	; 0x07
    307e:	98 85       	ldd	r25, Y+8	; 0x08
    3080:	00 97       	sbiw	r24, 0x00	; 0
    3082:	31 f0       	breq	.+12     	; 0x3090 <mainOptionsMenuActions+0x7e>
    3084:	2f 81       	ldd	r18, Y+7	; 0x07
    3086:	38 85       	ldd	r19, Y+8	; 0x08
    3088:	21 30       	cpi	r18, 0x01	; 1
    308a:	31 05       	cpc	r19, r1
    308c:	29 f1       	breq	.+74     	; 0x30d8 <mainOptionsMenuActions+0xc6>
    308e:	ad c0       	rjmp	.+346    	; 0x31ea <mainOptionsMenuActions+0x1d8>
			{

			case WRONG_PASSWORD:
			{
				uint8 counter=0;
    3090:	1a 82       	std	Y+2, r1	; 0x02
				do
							{
								passwordMemoryCompare();
    3092:	0e 94 25 19 	call	0x324a	; 0x324a <passwordMemoryCompare>
								counter++;
    3096:	8a 81       	ldd	r24, Y+2	; 0x02
    3098:	8f 5f       	subi	r24, 0xFF	; 255
    309a:	8a 83       	std	Y+2, r24	; 0x02
								UART_sendByte(passwordCompareResult);
    309c:	80 91 89 01 	lds	r24, 0x0189
    30a0:	0e 94 79 1b 	call	0x36f2	; 0x36f2 <UART_sendByte>

							} while (passwordCompareResult == WRONG_PASSWORD && counter < 2);
    30a4:	80 91 89 01 	lds	r24, 0x0189
    30a8:	88 23       	and	r24, r24
    30aa:	19 f4       	brne	.+6      	; 0x30b2 <mainOptionsMenuActions+0xa0>
    30ac:	8a 81       	ldd	r24, Y+2	; 0x02
    30ae:	82 30       	cpi	r24, 0x02	; 2
    30b0:	80 f3       	brcs	.-32     	; 0x3092 <mainOptionsMenuActions+0x80>
							if (counter == 2 && passwordCompareResult == WRONG_PASSWORD)
    30b2:	8a 81       	ldd	r24, Y+2	; 0x02
    30b4:	82 30       	cpi	r24, 0x02	; 2
    30b6:	69 f4       	brne	.+26     	; 0x30d2 <mainOptionsMenuActions+0xc0>
    30b8:	80 91 89 01 	lds	r24, 0x0189
    30bc:	88 23       	and	r24, r24
    30be:	49 f4       	brne	.+18     	; 0x30d2 <mainOptionsMenuActions+0xc0>
							{
								UART_sendByte(SECURITY_BREACH);
    30c0:	84 e2       	ldi	r24, 0x24	; 36
    30c2:	0e 94 79 1b 	call	0x36f2	; 0x36f2 <UART_sendByte>
								securityAlarm();
    30c6:	0e 94 11 19 	call	0x3222	; 0x3222 <securityAlarm>
								UART_sendByte(ALARM_TIMEOUT);
    30ca:	80 e2       	ldi	r24, 0x20	; 32
    30cc:	0e 94 79 1b 	call	0x36f2	; 0x36f2 <UART_sendByte>
    30d0:	8c c0       	rjmp	.+280    	; 0x31ea <mainOptionsMenuActions+0x1d8>
								break;
							}
							else
								UART_sendByte(NOT_A_WRONG_PASSWORD);
    30d2:	82 e3       	ldi	r24, 0x32	; 50
    30d4:	0e 94 79 1b 	call	0x36f2	; 0x36f2 <UART_sendByte>
			}

			case RIGHT_PASSWORD:
			{
				while (UART_recieveByte() != RIGHT_PASSWORD);
    30d8:	0e 94 90 1b 	call	0x3720	; 0x3720 <UART_recieveByte>
    30dc:	81 30       	cpi	r24, 0x01	; 1
    30de:	e1 f7       	brne	.-8      	; 0x30d8 <mainOptionsMenuActions+0xc6>
				g_seconds = 0;
    30e0:	10 92 7a 01 	sts	0x017A, r1
    30e4:	08 c0       	rjmp	.+16     	; 0x30f6 <mainOptionsMenuActions+0xe4>
				while (g_seconds <= 3)
				{
					DcMotor_Rotate(CW, MAX_SPEED);
    30e6:	81 e0       	ldi	r24, 0x01	; 1
    30e8:	64 e6       	ldi	r22, 0x64	; 100
    30ea:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <DcMotor_Rotate>
					PWM_Timer0_Start(g_dutyCycle);
    30ee:	80 91 7e 01 	lds	r24, 0x017E
    30f2:	0e 94 3b 19 	call	0x3276	; 0x3276 <PWM_Timer0_Start>

			case RIGHT_PASSWORD:
			{
				while (UART_recieveByte() != RIGHT_PASSWORD);
				g_seconds = 0;
				while (g_seconds <= 3)
    30f6:	80 91 7a 01 	lds	r24, 0x017A
    30fa:	84 30       	cpi	r24, 0x04	; 4
    30fc:	a0 f3       	brcs	.-24     	; 0x30e6 <mainOptionsMenuActions+0xd4>
				{
					DcMotor_Rotate(CW, MAX_SPEED);
					PWM_Timer0_Start(g_dutyCycle);

				}
				g_seconds = 0;
    30fe:	10 92 7a 01 	sts	0x017A, r1

				while (UART_recieveByte() != DOOR_IS_UNLOCKED)
    3102:	0e 94 90 1b 	call	0x3720	; 0x3720 <UART_recieveByte>
    3106:	82 32       	cpi	r24, 0x22	; 34
    3108:	e1 f7       	brne	.-8      	; 0x3102 <mainOptionsMenuActions+0xf0>
    310a:	08 c0       	rjmp	.+16     	; 0x311c <mainOptionsMenuActions+0x10a>
				{
				}

				while (g_seconds <= 1)
				{
					DcMotor_Rotate(Stop, MAX_SPEED);
    310c:	80 e0       	ldi	r24, 0x00	; 0
    310e:	64 e6       	ldi	r22, 0x64	; 100
    3110:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <DcMotor_Rotate>
					PWM_Timer0_Start(g_dutyCycle);
    3114:	80 91 7e 01 	lds	r24, 0x017E
    3118:	0e 94 3b 19 	call	0x3276	; 0x3276 <PWM_Timer0_Start>

				while (UART_recieveByte() != DOOR_IS_UNLOCKED)
				{
				}

				while (g_seconds <= 1)
    311c:	80 91 7a 01 	lds	r24, 0x017A
    3120:	82 30       	cpi	r24, 0x02	; 2
    3122:	a0 f3       	brcs	.-24     	; 0x310c <mainOptionsMenuActions+0xfa>
				{
					DcMotor_Rotate(Stop, MAX_SPEED);
					PWM_Timer0_Start(g_dutyCycle);
				}
				g_seconds = 0;
    3124:	10 92 7a 01 	sts	0x017A, r1

				UART_sendByte(DOOR_IS_OPENED_SUCCESFULLY);
    3128:	86 e2       	ldi	r24, 0x26	; 38
    312a:	0e 94 79 1b 	call	0x36f2	; 0x36f2 <UART_sendByte>
    312e:	08 c0       	rjmp	.+16     	; 0x3140 <mainOptionsMenuActions+0x12e>

				while (g_seconds <= 3)
				{
						DcMotor_Rotate(A_CW, MAX_SPEED);
    3130:	82 e0       	ldi	r24, 0x02	; 2
    3132:	64 e6       	ldi	r22, 0x64	; 100
    3134:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <DcMotor_Rotate>
						PWM_Timer0_Start(g_dutyCycle);
    3138:	80 91 7e 01 	lds	r24, 0x017E
    313c:	0e 94 3b 19 	call	0x3276	; 0x3276 <PWM_Timer0_Start>
				}
				g_seconds = 0;

				UART_sendByte(DOOR_IS_OPENED_SUCCESFULLY);

				while (g_seconds <= 3)
    3140:	80 91 7a 01 	lds	r24, 0x017A
    3144:	84 30       	cpi	r24, 0x04	; 4
    3146:	a0 f3       	brcs	.-24     	; 0x3130 <mainOptionsMenuActions+0x11e>
				{
						DcMotor_Rotate(A_CW, MAX_SPEED);
						PWM_Timer0_Start(g_dutyCycle);
				}
				DcMotor_Rotate(Stop, MAX_SPEED);
    3148:	80 e0       	ldi	r24, 0x00	; 0
    314a:	64 e6       	ldi	r22, 0x64	; 100
    314c:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <DcMotor_Rotate>
				UART_sendByte(DOOR_IS_CLOSED_SUCCESFULLY);
    3150:	80 e3       	ldi	r24, 0x30	; 48
    3152:	0e 94 79 1b 	call	0x36f2	; 0x36f2 <UART_sendByte>
				g_seconds = 0;
    3156:	10 92 7a 01 	sts	0x017A, r1
			while (UART_recieveByte() != OPEN_DOOR_OPTION_IS_DONE_SUCCESFULLY)
    315a:	0e 94 90 1b 	call	0x3720	; 0x3720 <UART_recieveByte>
    315e:	88 32       	cpi	r24, 0x28	; 40
    3160:	e1 f7       	brne	.-8      	; 0x315a <mainOptionsMenuActions+0x148>
    3162:	43 c0       	rjmp	.+134    	; 0x31ea <mainOptionsMenuActions+0x1d8>
			break;
			}

		case '-':
		{
			passwordMemoryCompare();
    3164:	0e 94 25 19 	call	0x324a	; 0x324a <passwordMemoryCompare>
			UART_sendByte(passwordCompareResult);
    3168:	80 91 89 01 	lds	r24, 0x0189
    316c:	0e 94 79 1b 	call	0x36f2	; 0x36f2 <UART_sendByte>
			switch (passwordCompareResult)
    3170:	80 91 89 01 	lds	r24, 0x0189
    3174:	28 2f       	mov	r18, r24
    3176:	30 e0       	ldi	r19, 0x00	; 0
    3178:	3e 83       	std	Y+6, r19	; 0x06
    317a:	2d 83       	std	Y+5, r18	; 0x05
    317c:	8d 81       	ldd	r24, Y+5	; 0x05
    317e:	9e 81       	ldd	r25, Y+6	; 0x06
    3180:	00 97       	sbiw	r24, 0x00	; 0
    3182:	31 f0       	breq	.+12     	; 0x3190 <mainOptionsMenuActions+0x17e>
    3184:	2d 81       	ldd	r18, Y+5	; 0x05
    3186:	3e 81       	ldd	r19, Y+6	; 0x06
    3188:	21 30       	cpi	r18, 0x01	; 1
    318a:	31 05       	cpc	r19, r1
    318c:	29 f1       	breq	.+74     	; 0x31d8 <mainOptionsMenuActions+0x1c6>
    318e:	2d c0       	rjmp	.+90     	; 0x31ea <mainOptionsMenuActions+0x1d8>
			{
			case WRONG_PASSWORD:
			{
				uint8 counter=0;
    3190:	19 82       	std	Y+1, r1	; 0x01
				do
							{
								passwordMemoryCompare();
    3192:	0e 94 25 19 	call	0x324a	; 0x324a <passwordMemoryCompare>
								counter++;
    3196:	89 81       	ldd	r24, Y+1	; 0x01
    3198:	8f 5f       	subi	r24, 0xFF	; 255
    319a:	89 83       	std	Y+1, r24	; 0x01
								UART_sendByte(passwordCompareResult);
    319c:	80 91 89 01 	lds	r24, 0x0189
    31a0:	0e 94 79 1b 	call	0x36f2	; 0x36f2 <UART_sendByte>

							} while (passwordCompareResult == WRONG_PASSWORD && counter < 2);
    31a4:	80 91 89 01 	lds	r24, 0x0189
    31a8:	88 23       	and	r24, r24
    31aa:	19 f4       	brne	.+6      	; 0x31b2 <mainOptionsMenuActions+0x1a0>
    31ac:	89 81       	ldd	r24, Y+1	; 0x01
    31ae:	82 30       	cpi	r24, 0x02	; 2
    31b0:	80 f3       	brcs	.-32     	; 0x3192 <mainOptionsMenuActions+0x180>
							if (counter == 2 && passwordCompareResult == WRONG_PASSWORD)
    31b2:	89 81       	ldd	r24, Y+1	; 0x01
    31b4:	82 30       	cpi	r24, 0x02	; 2
    31b6:	69 f4       	brne	.+26     	; 0x31d2 <mainOptionsMenuActions+0x1c0>
    31b8:	80 91 89 01 	lds	r24, 0x0189
    31bc:	88 23       	and	r24, r24
    31be:	49 f4       	brne	.+18     	; 0x31d2 <mainOptionsMenuActions+0x1c0>
							{
								UART_sendByte(SECURITY_BREACH);
    31c0:	84 e2       	ldi	r24, 0x24	; 36
    31c2:	0e 94 79 1b 	call	0x36f2	; 0x36f2 <UART_sendByte>
								securityAlarm();
    31c6:	0e 94 11 19 	call	0x3222	; 0x3222 <securityAlarm>
								UART_sendByte(ALARM_TIMEOUT);
    31ca:	80 e2       	ldi	r24, 0x20	; 32
    31cc:	0e 94 79 1b 	call	0x36f2	; 0x36f2 <UART_sendByte>
    31d0:	0c c0       	rjmp	.+24     	; 0x31ea <mainOptionsMenuActions+0x1d8>
								break;
							}
							else
								UART_sendByte(NOT_A_WRONG_PASSWORD);
    31d2:	82 e3       	ldi	r24, 0x32	; 50
    31d4:	0e 94 79 1b 	call	0x36f2	; 0x36f2 <UART_sendByte>
			}
			case RIGHT_PASSWORD:
			{
				while (UART_recieveByte() != RIGHT_PASSWORD);
    31d8:	0e 94 90 1b 	call	0x3720	; 0x3720 <UART_recieveByte>
    31dc:	81 30       	cpi	r24, 0x01	; 1
    31de:	e1 f7       	brne	.-8      	; 0x31d8 <mainOptionsMenuActions+0x1c6>
				returnToCreatePasswordFlag++;
    31e0:	80 91 7b 01 	lds	r24, 0x017B
    31e4:	8f 5f       	subi	r24, 0xFF	; 255
    31e6:	80 93 7b 01 	sts	0x017B, r24

			}
			break;
		}
		}
			if (returnToCreatePasswordFlag == 1){
    31ea:	80 91 7b 01 	lds	r24, 0x017B
    31ee:	81 30       	cpi	r24, 0x01	; 1
    31f0:	09 f0       	breq	.+2      	; 0x31f4 <mainOptionsMenuActions+0x1e2>
    31f2:	19 cf       	rjmp	.-462    	; 0x3026 <mainOptionsMenuActions+0x14>
				returnToCreatePasswordFlag=0;
    31f4:	10 92 7b 01 	sts	0x017B, r1
					break;
					}

	}
    31f8:	2a 96       	adiw	r28, 0x0a	; 10
    31fa:	0f b6       	in	r0, 0x3f	; 63
    31fc:	f8 94       	cli
    31fe:	de bf       	out	0x3e, r29	; 62
    3200:	0f be       	out	0x3f, r0	; 63
    3202:	cd bf       	out	0x3d, r28	; 61
    3204:	cf 91       	pop	r28
    3206:	df 91       	pop	r29
    3208:	08 95       	ret

0000320a <callBackIncrementSeconds>:
/*
 * Description :
 * Function calledback in the ISR responsible for Incrementing seconds
 */
void callBackIncrementSeconds(void)
{
    320a:	df 93       	push	r29
    320c:	cf 93       	push	r28
    320e:	cd b7       	in	r28, 0x3d	; 61
    3210:	de b7       	in	r29, 0x3e	; 62
	g_seconds++;
    3212:	80 91 7a 01 	lds	r24, 0x017A
    3216:	8f 5f       	subi	r24, 0xFF	; 255
    3218:	80 93 7a 01 	sts	0x017A, r24
}
    321c:	cf 91       	pop	r28
    321e:	df 91       	pop	r29
    3220:	08 95       	ret

00003222 <securityAlarm>:
/*
 * Description :
 * Function responsible for activating the alarm buzzer for 60 seconds
 */
void securityAlarm(void)
{
    3222:	df 93       	push	r29
    3224:	cf 93       	push	r28
    3226:	cd b7       	in	r28, 0x3d	; 61
    3228:	de b7       	in	r29, 0x3e	; 62
	g_seconds = 0;
    322a:	10 92 7a 01 	sts	0x017A, r1
    322e:	02 c0       	rjmp	.+4      	; 0x3234 <securityAlarm+0x12>
	while (g_seconds <= 5)
	{
		Buzzer_on();
    3230:	0e 94 28 07 	call	0xe50	; 0xe50 <Buzzer_on>
 * Function responsible for activating the alarm buzzer for 60 seconds
 */
void securityAlarm(void)
{
	g_seconds = 0;
	while (g_seconds <= 5)
    3234:	80 91 7a 01 	lds	r24, 0x017A
    3238:	86 30       	cpi	r24, 0x06	; 6
    323a:	d0 f3       	brcs	.-12     	; 0x3230 <securityAlarm+0xe>
	{
		Buzzer_on();
	}
	Buzzer_off();
    323c:	0e 94 34 07 	call	0xe68	; 0xe68 <Buzzer_off>
	g_seconds = 0;
    3240:	10 92 7a 01 	sts	0x017A, r1
}
    3244:	cf 91       	pop	r28
    3246:	df 91       	pop	r29
    3248:	08 95       	ret

0000324a <passwordMemoryCompare>:
 * 1. Receiving password
 * 2. compare the password with the saved one in memory
 * and save results in global variable
 */
void passwordMemoryCompare(void)
{
    324a:	df 93       	push	r29
    324c:	cf 93       	push	r28
    324e:	cd b7       	in	r28, 0x3d	; 61
    3250:	de b7       	in	r29, 0x3e	; 62
	recievePass();
    3252:	0e 94 98 17 	call	0x2f30	; 0x2f30 <recievePass>
	readPasswordFromMemory(memorycheck_arr);
    3256:	8f e7       	ldi	r24, 0x7F	; 127
    3258:	91 e0       	ldi	r25, 0x01	; 1
    325a:	0e 94 d7 16 	call	0x2dae	; 0x2dae <readPasswordFromMemory>
	passwordCompareResult = Passwordcheck(pass_arr,memorycheck_arr);
    325e:	8a e8       	ldi	r24, 0x8A	; 138
    3260:	91 e0       	ldi	r25, 0x01	; 1
    3262:	2f e7       	ldi	r18, 0x7F	; 127
    3264:	31 e0       	ldi	r19, 0x01	; 1
    3266:	b9 01       	movw	r22, r18
    3268:	0e 94 d4 17 	call	0x2fa8	; 0x2fa8 <Passwordcheck>
    326c:	80 93 89 01 	sts	0x0189, r24
}
    3270:	cf 91       	pop	r28
    3272:	df 91       	pop	r29
    3274:	08 95       	ret

00003276 <PWM_Timer0_Start>:


/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void PWM_Timer0_Start(uint8 duty_cycle){
    3276:	df 93       	push	r29
    3278:	cf 93       	push	r28
    327a:	0f 92       	push	r0
    327c:	cd b7       	in	r28, 0x3d	; 61
    327e:	de b7       	in	r29, 0x3e	; 62
    3280:	89 83       	std	Y+1, r24	; 0x01
	TCNT0=0; //set initial value to 0
    3282:	e2 e5       	ldi	r30, 0x52	; 82
    3284:	f0 e0       	ldi	r31, 0x00	; 0
    3286:	10 82       	st	Z, r1
	OCR0=duty_cycle; //set compare value to the chosen duty cycle;
    3288:	ec e5       	ldi	r30, 0x5C	; 92
    328a:	f0 e0       	ldi	r31, 0x00	; 0
    328c:	89 81       	ldd	r24, Y+1	; 0x01
    328e:	80 83       	st	Z, r24

	/*Setup the direction for OC0 as output pin through the GPIO driver*/
	GPIO_setupPinDirection(PWM_OUTPUT_PORT_ID,PWM_OUTPUT_PIN_ID,PIN_OUTPUT);
    3290:	81 e0       	ldi	r24, 0x01	; 1
    3292:	63 e0       	ldi	r22, 0x03	; 3
    3294:	41 e0       	ldi	r20, 0x01	; 1
    3296:	0e 94 65 08 	call	0x10ca	; 0x10ca <GPIO_setupPinDirection>
	 * 1. Fast PWM mode FOC0=0
	 * 2. Fast PWM Mode WGM01=1 & WGM00=1
	 * 3. Clear OC0 when match occurs (non inverted mode) COM00=0 & COM01=1
	 * 4. clock = F_CPU/8 CS00=0 CS01=1 CS02=0
	 */
	TCCR0|=(1<<WGM00)|(1<<WGM01)|(1<<COM01)|(1<<CS01);
    329a:	a3 e5       	ldi	r26, 0x53	; 83
    329c:	b0 e0       	ldi	r27, 0x00	; 0
    329e:	e3 e5       	ldi	r30, 0x53	; 83
    32a0:	f0 e0       	ldi	r31, 0x00	; 0
    32a2:	80 81       	ld	r24, Z
    32a4:	8a 66       	ori	r24, 0x6A	; 106
    32a6:	8c 93       	st	X, r24
}
    32a8:	0f 90       	pop	r0
    32aa:	cf 91       	pop	r28
    32ac:	df 91       	pop	r29
    32ae:	08 95       	ret

000032b0 <__vector_9>:

/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/
ISR(TIMER1_OVF_vect)
{
    32b0:	1f 92       	push	r1
    32b2:	0f 92       	push	r0
    32b4:	0f b6       	in	r0, 0x3f	; 63
    32b6:	0f 92       	push	r0
    32b8:	11 24       	eor	r1, r1
    32ba:	2f 93       	push	r18
    32bc:	3f 93       	push	r19
    32be:	4f 93       	push	r20
    32c0:	5f 93       	push	r21
    32c2:	6f 93       	push	r22
    32c4:	7f 93       	push	r23
    32c6:	8f 93       	push	r24
    32c8:	9f 93       	push	r25
    32ca:	af 93       	push	r26
    32cc:	bf 93       	push	r27
    32ce:	ef 93       	push	r30
    32d0:	ff 93       	push	r31
    32d2:	df 93       	push	r29
    32d4:	cf 93       	push	r28
    32d6:	cd b7       	in	r28, 0x3d	; 61
    32d8:	de b7       	in	r29, 0x3e	; 62
	if (g_callBackPtr != NULL_PTR)
    32da:	80 91 7c 01 	lds	r24, 0x017C
    32de:	90 91 7d 01 	lds	r25, 0x017D
    32e2:	00 97       	sbiw	r24, 0x00	; 0
    32e4:	29 f0       	breq	.+10     	; 0x32f0 <__vector_9+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    32e6:	e0 91 7c 01 	lds	r30, 0x017C
    32ea:	f0 91 7d 01 	lds	r31, 0x017D
    32ee:	09 95       	icall
	}
}
    32f0:	cf 91       	pop	r28
    32f2:	df 91       	pop	r29
    32f4:	ff 91       	pop	r31
    32f6:	ef 91       	pop	r30
    32f8:	bf 91       	pop	r27
    32fa:	af 91       	pop	r26
    32fc:	9f 91       	pop	r25
    32fe:	8f 91       	pop	r24
    3300:	7f 91       	pop	r23
    3302:	6f 91       	pop	r22
    3304:	5f 91       	pop	r21
    3306:	4f 91       	pop	r20
    3308:	3f 91       	pop	r19
    330a:	2f 91       	pop	r18
    330c:	0f 90       	pop	r0
    330e:	0f be       	out	0x3f, r0	; 63
    3310:	0f 90       	pop	r0
    3312:	1f 90       	pop	r1
    3314:	18 95       	reti

00003316 <__vector_7>:

ISR(TIMER1_COMPA_vect)
{
    3316:	1f 92       	push	r1
    3318:	0f 92       	push	r0
    331a:	0f b6       	in	r0, 0x3f	; 63
    331c:	0f 92       	push	r0
    331e:	11 24       	eor	r1, r1
    3320:	2f 93       	push	r18
    3322:	3f 93       	push	r19
    3324:	4f 93       	push	r20
    3326:	5f 93       	push	r21
    3328:	6f 93       	push	r22
    332a:	7f 93       	push	r23
    332c:	8f 93       	push	r24
    332e:	9f 93       	push	r25
    3330:	af 93       	push	r26
    3332:	bf 93       	push	r27
    3334:	ef 93       	push	r30
    3336:	ff 93       	push	r31
    3338:	df 93       	push	r29
    333a:	cf 93       	push	r28
    333c:	cd b7       	in	r28, 0x3d	; 61
    333e:	de b7       	in	r29, 0x3e	; 62
	if (g_callBackPtr != NULL_PTR)
    3340:	80 91 7c 01 	lds	r24, 0x017C
    3344:	90 91 7d 01 	lds	r25, 0x017D
    3348:	00 97       	sbiw	r24, 0x00	; 0
    334a:	29 f0       	breq	.+10     	; 0x3356 <__vector_7+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)();
    334c:	e0 91 7c 01 	lds	r30, 0x017C
    3350:	f0 91 7d 01 	lds	r31, 0x017D
    3354:	09 95       	icall
	}
}
    3356:	cf 91       	pop	r28
    3358:	df 91       	pop	r29
    335a:	ff 91       	pop	r31
    335c:	ef 91       	pop	r30
    335e:	bf 91       	pop	r27
    3360:	af 91       	pop	r26
    3362:	9f 91       	pop	r25
    3364:	8f 91       	pop	r24
    3366:	7f 91       	pop	r23
    3368:	6f 91       	pop	r22
    336a:	5f 91       	pop	r21
    336c:	4f 91       	pop	r20
    336e:	3f 91       	pop	r19
    3370:	2f 91       	pop	r18
    3372:	0f 90       	pop	r0
    3374:	0f be       	out	0x3f, r0	; 63
    3376:	0f 90       	pop	r0
    3378:	1f 90       	pop	r1
    337a:	18 95       	reti

0000337c <Timer1_init>:
 * 2. Setup the operation mode (normal or compare).
 * 3. Setup the required prescaler.
 * 4. Set the initial and compare value.
 */
void Timer1_init(const Timer1_ConfigType *Config_Ptr)
{
    337c:	df 93       	push	r29
    337e:	cf 93       	push	r28
    3380:	00 d0       	rcall	.+0      	; 0x3382 <Timer1_init+0x6>
    3382:	cd b7       	in	r28, 0x3d	; 61
    3384:	de b7       	in	r29, 0x3e	; 62
    3386:	9a 83       	std	Y+2, r25	; 0x02
    3388:	89 83       	std	Y+1, r24	; 0x01
	 *    So, COM1A1=0 COM1A0=0 COM1B0=0 COM1B1=0
	 * 2. this driver support Normal & Compare mode not a PWM mode
	 *    then FOC1A & FOC1B is always high  so, FOC1A=1 FOC1B=1
	 * 3. For CTC OR Normal Mode WGM10=0 WGM11=0
	 ************************************************************************/
	TCCR1A = (1 << FOC1A) | (1 << FOC1B);
    338a:	ef e4       	ldi	r30, 0x4F	; 79
    338c:	f0 e0       	ldi	r31, 0x00	; 0
    338e:	8c e0       	ldi	r24, 0x0C	; 12
    3390:	80 83       	st	Z, r24
	 * 2. WGM12,WGM13 Configurable by the user to control the mode
	 * 3. CS [12:10] Configurable by the user to control
	 *    the clk with the required prescaler or disable it
	 ************************************************************************/

	TCCR1B = (TCCR1B & 0xE0) | (Config_Ptr->prescaler) | ((Config_Ptr->mode) << WGM12);
    3392:	ae e4       	ldi	r26, 0x4E	; 78
    3394:	b0 e0       	ldi	r27, 0x00	; 0
    3396:	ee e4       	ldi	r30, 0x4E	; 78
    3398:	f0 e0       	ldi	r31, 0x00	; 0
    339a:	80 81       	ld	r24, Z
    339c:	98 2f       	mov	r25, r24
    339e:	90 7e       	andi	r25, 0xE0	; 224
    33a0:	e9 81       	ldd	r30, Y+1	; 0x01
    33a2:	fa 81       	ldd	r31, Y+2	; 0x02
    33a4:	84 81       	ldd	r24, Z+4	; 0x04
    33a6:	29 2f       	mov	r18, r25
    33a8:	28 2b       	or	r18, r24
    33aa:	e9 81       	ldd	r30, Y+1	; 0x01
    33ac:	fa 81       	ldd	r31, Y+2	; 0x02
    33ae:	85 81       	ldd	r24, Z+5	; 0x05
    33b0:	88 2f       	mov	r24, r24
    33b2:	90 e0       	ldi	r25, 0x00	; 0
    33b4:	88 0f       	add	r24, r24
    33b6:	99 1f       	adc	r25, r25
    33b8:	88 0f       	add	r24, r24
    33ba:	99 1f       	adc	r25, r25
    33bc:	88 0f       	add	r24, r24
    33be:	99 1f       	adc	r25, r25
    33c0:	82 2b       	or	r24, r18
    33c2:	8c 93       	st	X, r24

	/* Enable Timer1 Overflow Interrupts */
	TIMSK = (TIMSK & 0xC3) | (1 << TOIE1);
    33c4:	a9 e5       	ldi	r26, 0x59	; 89
    33c6:	b0 e0       	ldi	r27, 0x00	; 0
    33c8:	e9 e5       	ldi	r30, 0x59	; 89
    33ca:	f0 e0       	ldi	r31, 0x00	; 0
    33cc:	80 81       	ld	r24, Z
    33ce:	83 7c       	andi	r24, 0xC3	; 195
    33d0:	84 60       	ori	r24, 0x04	; 4
    33d2:	8c 93       	st	X, r24

	/* Set the initial value */
	TCNT1 = (Config_Ptr->initial_value);
    33d4:	ac e4       	ldi	r26, 0x4C	; 76
    33d6:	b0 e0       	ldi	r27, 0x00	; 0
    33d8:	e9 81       	ldd	r30, Y+1	; 0x01
    33da:	fa 81       	ldd	r31, Y+2	; 0x02
    33dc:	80 81       	ld	r24, Z
    33de:	91 81       	ldd	r25, Z+1	; 0x01
    33e0:	11 96       	adiw	r26, 0x01	; 1
    33e2:	9c 93       	st	X, r25
    33e4:	8e 93       	st	-X, r24
	/* Set the compare value */
	if (Config_Ptr->mode == Compare_mode)
    33e6:	e9 81       	ldd	r30, Y+1	; 0x01
    33e8:	fa 81       	ldd	r31, Y+2	; 0x02
    33ea:	85 81       	ldd	r24, Z+5	; 0x05
    33ec:	81 30       	cpi	r24, 0x01	; 1
    33ee:	81 f4       	brne	.+32     	; 0x3410 <Timer1_init+0x94>
	{
		TIMSK |= (1 << OCIE1A);	/* Enable Timer1 Compare A Interrupts */
    33f0:	a9 e5       	ldi	r26, 0x59	; 89
    33f2:	b0 e0       	ldi	r27, 0x00	; 0
    33f4:	e9 e5       	ldi	r30, 0x59	; 89
    33f6:	f0 e0       	ldi	r31, 0x00	; 0
    33f8:	80 81       	ld	r24, Z
    33fa:	80 61       	ori	r24, 0x10	; 16
    33fc:	8c 93       	st	X, r24
		OCR1A = (Config_Ptr->compare_value);
    33fe:	aa e4       	ldi	r26, 0x4A	; 74
    3400:	b0 e0       	ldi	r27, 0x00	; 0
    3402:	e9 81       	ldd	r30, Y+1	; 0x01
    3404:	fa 81       	ldd	r31, Y+2	; 0x02
    3406:	82 81       	ldd	r24, Z+2	; 0x02
    3408:	93 81       	ldd	r25, Z+3	; 0x03
    340a:	11 96       	adiw	r26, 0x01	; 1
    340c:	9c 93       	st	X, r25
    340e:	8e 93       	st	-X, r24
	}
}
    3410:	0f 90       	pop	r0
    3412:	0f 90       	pop	r0
    3414:	cf 91       	pop	r28
    3416:	df 91       	pop	r29
    3418:	08 95       	ret

0000341a <Timer1_deInit>:
/*
 * Description:
 * Function to disable the Timer1
 */
void Timer1_deInit(void)
{
    341a:	df 93       	push	r29
    341c:	cf 93       	push	r28
    341e:	cd b7       	in	r28, 0x3d	; 61
    3420:	de b7       	in	r29, 0x3e	; 62
	/* Clear All Timer1 Registers */
	TCCR1A = 0;
    3422:	ef e4       	ldi	r30, 0x4F	; 79
    3424:	f0 e0       	ldi	r31, 0x00	; 0
    3426:	10 82       	st	Z, r1
	TCCR1B = 0;
    3428:	ee e4       	ldi	r30, 0x4E	; 78
    342a:	f0 e0       	ldi	r31, 0x00	; 0
    342c:	10 82       	st	Z, r1
	TCNT1 = 0;
    342e:	ec e4       	ldi	r30, 0x4C	; 76
    3430:	f0 e0       	ldi	r31, 0x00	; 0
    3432:	11 82       	std	Z+1, r1	; 0x01
    3434:	10 82       	st	Z, r1
	OCR1A = 0;
    3436:	ea e4       	ldi	r30, 0x4A	; 74
    3438:	f0 e0       	ldi	r31, 0x00	; 0
    343a:	11 82       	std	Z+1, r1	; 0x01
    343c:	10 82       	st	Z, r1
	/* Disable the Timer1 interrupt */
	CLEAR_BIT(TIMSK, TICIE1);
    343e:	a9 e5       	ldi	r26, 0x59	; 89
    3440:	b0 e0       	ldi	r27, 0x00	; 0
    3442:	e9 e5       	ldi	r30, 0x59	; 89
    3444:	f0 e0       	ldi	r31, 0x00	; 0
    3446:	80 81       	ld	r24, Z
    3448:	8f 7d       	andi	r24, 0xDF	; 223
    344a:	8c 93       	st	X, r24

	/* Reset the global pointer value */
	g_callBackPtr = NULL_PTR;
    344c:	10 92 7d 01 	sts	0x017D, r1
    3450:	10 92 7c 01 	sts	0x017C, r1
}
    3454:	cf 91       	pop	r28
    3456:	df 91       	pop	r29
    3458:	08 95       	ret

0000345a <Timer1_setCallBack>:
/*
 * Description:
 * Function to set the Call Back function address.
 */
void Timer1_setCallBack(void (*a_ptr)(void))
{
    345a:	df 93       	push	r29
    345c:	cf 93       	push	r28
    345e:	00 d0       	rcall	.+0      	; 0x3460 <Timer1_setCallBack+0x6>
    3460:	cd b7       	in	r28, 0x3d	; 61
    3462:	de b7       	in	r29, 0x3e	; 62
    3464:	9a 83       	std	Y+2, r25	; 0x02
    3466:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr = a_ptr;
    3468:	89 81       	ldd	r24, Y+1	; 0x01
    346a:	9a 81       	ldd	r25, Y+2	; 0x02
    346c:	90 93 7d 01 	sts	0x017D, r25
    3470:	80 93 7c 01 	sts	0x017C, r24
}
    3474:	0f 90       	pop	r0
    3476:	0f 90       	pop	r0
    3478:	cf 91       	pop	r28
    347a:	df 91       	pop	r29
    347c:	08 95       	ret

0000347e <TWI_init>:
#include "twi.h"
#include "common_macros.h"
#include <avr/io.h>

void TWI_init(const TWI_ConfigType * Config_Ptr)
{
    347e:	0f 93       	push	r16
    3480:	1f 93       	push	r17
    3482:	df 93       	push	r29
    3484:	cf 93       	push	r28
    3486:	00 d0       	rcall	.+0      	; 0x3488 <TWI_init+0xa>
    3488:	cd b7       	in	r28, 0x3d	; 61
    348a:	de b7       	in	r29, 0x3e	; 62
    348c:	9a 83       	std	Y+2, r25	; 0x02
    348e:	89 83       	std	Y+1, r24	; 0x01
	 * from the BaudRate equation based on the BaudRate value chosen in the
	 * configuration while assuming that pre-scaler TWPS=00 and F_CPU=8Mhz
	 *
	 ************************************************************************/

	TWBR=(uint8)(((F_CPU/Config_Ptr->bit_rate)-16)/2);
    3490:	00 e2       	ldi	r16, 0x20	; 32
    3492:	10 e0       	ldi	r17, 0x00	; 0
    3494:	e9 81       	ldd	r30, Y+1	; 0x01
    3496:	fa 81       	ldd	r31, Y+2	; 0x02
    3498:	22 81       	ldd	r18, Z+2	; 0x02
    349a:	33 81       	ldd	r19, Z+3	; 0x03
    349c:	44 81       	ldd	r20, Z+4	; 0x04
    349e:	55 81       	ldd	r21, Z+5	; 0x05
    34a0:	80 e0       	ldi	r24, 0x00	; 0
    34a2:	92 e1       	ldi	r25, 0x12	; 18
    34a4:	aa e7       	ldi	r26, 0x7A	; 122
    34a6:	b0 e0       	ldi	r27, 0x00	; 0
    34a8:	bc 01       	movw	r22, r24
    34aa:	cd 01       	movw	r24, r26
    34ac:	0e 94 0b 1c 	call	0x3816	; 0x3816 <__udivmodsi4>
    34b0:	da 01       	movw	r26, r20
    34b2:	c9 01       	movw	r24, r18
    34b4:	40 97       	sbiw	r24, 0x10	; 16
    34b6:	a1 09       	sbc	r26, r1
    34b8:	b1 09       	sbc	r27, r1
    34ba:	b6 95       	lsr	r27
    34bc:	a7 95       	ror	r26
    34be:	97 95       	ror	r25
    34c0:	87 95       	ror	r24
    34c2:	f8 01       	movw	r30, r16
    34c4:	80 83       	st	Z, r24
	 * Two Wire Bus address my address if any master device want to
	 * call me (used in case this MC is a slave device),The address given
	 * is asserted in last 7 bits while TWGCE=0 General Call Recognition: Off
	 *
	 ************************************************************************/
	TWAR =((Config_Ptr->address)<<1);
    34c6:	a2 e2       	ldi	r26, 0x22	; 34
    34c8:	b0 e0       	ldi	r27, 0x00	; 0
    34ca:	e9 81       	ldd	r30, Y+1	; 0x01
    34cc:	fa 81       	ldd	r31, Y+2	; 0x02
    34ce:	80 81       	ld	r24, Z
    34d0:	91 81       	ldd	r25, Z+1	; 0x01
    34d2:	88 0f       	add	r24, r24
    34d4:	8c 93       	st	X, r24
	
    TWCR = (1<<TWEN); /* enable TWI */
    34d6:	e6 e5       	ldi	r30, 0x56	; 86
    34d8:	f0 e0       	ldi	r31, 0x00	; 0
    34da:	84 e0       	ldi	r24, 0x04	; 4
    34dc:	80 83       	st	Z, r24
}
    34de:	0f 90       	pop	r0
    34e0:	0f 90       	pop	r0
    34e2:	cf 91       	pop	r28
    34e4:	df 91       	pop	r29
    34e6:	1f 91       	pop	r17
    34e8:	0f 91       	pop	r16
    34ea:	08 95       	ret

000034ec <TWI_start>:

void TWI_start(void)
{
    34ec:	df 93       	push	r29
    34ee:	cf 93       	push	r28
    34f0:	cd b7       	in	r28, 0x3d	; 61
    34f2:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    34f4:	e6 e5       	ldi	r30, 0x56	; 86
    34f6:	f0 e0       	ldi	r31, 0x00	; 0
    34f8:	84 ea       	ldi	r24, 0xA4	; 164
    34fa:	80 83       	st	Z, r24
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    34fc:	e6 e5       	ldi	r30, 0x56	; 86
    34fe:	f0 e0       	ldi	r31, 0x00	; 0
    3500:	80 81       	ld	r24, Z
    3502:	88 23       	and	r24, r24
    3504:	dc f7       	brge	.-10     	; 0x34fc <TWI_start+0x10>
}
    3506:	cf 91       	pop	r28
    3508:	df 91       	pop	r29
    350a:	08 95       	ret

0000350c <TWI_stop>:

void TWI_stop(void)
{
    350c:	df 93       	push	r29
    350e:	cf 93       	push	r28
    3510:	cd b7       	in	r28, 0x3d	; 61
    3512:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    3514:	e6 e5       	ldi	r30, 0x56	; 86
    3516:	f0 e0       	ldi	r31, 0x00	; 0
    3518:	84 e9       	ldi	r24, 0x94	; 148
    351a:	80 83       	st	Z, r24
}
    351c:	cf 91       	pop	r28
    351e:	df 91       	pop	r29
    3520:	08 95       	ret

00003522 <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
    3522:	df 93       	push	r29
    3524:	cf 93       	push	r28
    3526:	0f 92       	push	r0
    3528:	cd b7       	in	r28, 0x3d	; 61
    352a:	de b7       	in	r29, 0x3e	; 62
    352c:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    352e:	e3 e2       	ldi	r30, 0x23	; 35
    3530:	f0 e0       	ldi	r31, 0x00	; 0
    3532:	89 81       	ldd	r24, Y+1	; 0x01
    3534:	80 83       	st	Z, r24
    /* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN);
    3536:	e6 e5       	ldi	r30, 0x56	; 86
    3538:	f0 e0       	ldi	r31, 0x00	; 0
    353a:	84 e8       	ldi	r24, 0x84	; 132
    353c:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    353e:	e6 e5       	ldi	r30, 0x56	; 86
    3540:	f0 e0       	ldi	r31, 0x00	; 0
    3542:	80 81       	ld	r24, Z
    3544:	88 23       	and	r24, r24
    3546:	dc f7       	brge	.-10     	; 0x353e <TWI_writeByte+0x1c>
}
    3548:	0f 90       	pop	r0
    354a:	cf 91       	pop	r28
    354c:	df 91       	pop	r29
    354e:	08 95       	ret

00003550 <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void)
{
    3550:	df 93       	push	r29
    3552:	cf 93       	push	r28
    3554:	cd b7       	in	r28, 0x3d	; 61
    3556:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    3558:	e6 e5       	ldi	r30, 0x56	; 86
    355a:	f0 e0       	ldi	r31, 0x00	; 0
    355c:	84 ec       	ldi	r24, 0xC4	; 196
    355e:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    3560:	e6 e5       	ldi	r30, 0x56	; 86
    3562:	f0 e0       	ldi	r31, 0x00	; 0
    3564:	80 81       	ld	r24, Z
    3566:	88 23       	and	r24, r24
    3568:	dc f7       	brge	.-10     	; 0x3560 <TWI_readByteWithACK+0x10>
    /* Read Data */
    return TWDR;
    356a:	e3 e2       	ldi	r30, 0x23	; 35
    356c:	f0 e0       	ldi	r31, 0x00	; 0
    356e:	80 81       	ld	r24, Z
}
    3570:	cf 91       	pop	r28
    3572:	df 91       	pop	r29
    3574:	08 95       	ret

00003576 <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void)
{
    3576:	df 93       	push	r29
    3578:	cf 93       	push	r28
    357a:	cd b7       	in	r28, 0x3d	; 61
    357c:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    357e:	e6 e5       	ldi	r30, 0x56	; 86
    3580:	f0 e0       	ldi	r31, 0x00	; 0
    3582:	84 e8       	ldi	r24, 0x84	; 132
    3584:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    3586:	e6 e5       	ldi	r30, 0x56	; 86
    3588:	f0 e0       	ldi	r31, 0x00	; 0
    358a:	80 81       	ld	r24, Z
    358c:	88 23       	and	r24, r24
    358e:	dc f7       	brge	.-10     	; 0x3586 <TWI_readByteWithNACK+0x10>
    /* Read Data */
    return TWDR;
    3590:	e3 e2       	ldi	r30, 0x23	; 35
    3592:	f0 e0       	ldi	r31, 0x00	; 0
    3594:	80 81       	ld	r24, Z
}
    3596:	cf 91       	pop	r28
    3598:	df 91       	pop	r29
    359a:	08 95       	ret

0000359c <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    359c:	df 93       	push	r29
    359e:	cf 93       	push	r28
    35a0:	0f 92       	push	r0
    35a2:	cd b7       	in	r28, 0x3d	; 61
    35a4:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    35a6:	e1 e2       	ldi	r30, 0x21	; 33
    35a8:	f0 e0       	ldi	r31, 0x00	; 0
    35aa:	80 81       	ld	r24, Z
    35ac:	88 7f       	andi	r24, 0xF8	; 248
    35ae:	89 83       	std	Y+1, r24	; 0x01
    return status;
    35b0:	89 81       	ldd	r24, Y+1	; 0x01
}
    35b2:	0f 90       	pop	r0
    35b4:	cf 91       	pop	r28
    35b6:	df 91       	pop	r29
    35b8:	08 95       	ret

000035ba <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType * Config_Ptr)
{
    35ba:	df 93       	push	r29
    35bc:	cf 93       	push	r28
    35be:	00 d0       	rcall	.+0      	; 0x35c0 <UART_init+0x6>
    35c0:	00 d0       	rcall	.+0      	; 0x35c2 <UART_init+0x8>
    35c2:	cd b7       	in	r28, 0x3d	; 61
    35c4:	de b7       	in	r29, 0x3e	; 62
    35c6:	9c 83       	std	Y+4, r25	; 0x04
    35c8:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    35ca:	1a 82       	std	Y+2, r1	; 0x02
    35cc:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    35ce:	eb e2       	ldi	r30, 0x2B	; 43
    35d0:	f0 e0       	ldi	r31, 0x00	; 0
    35d2:	82 e0       	ldi	r24, 0x02	; 2
    35d4:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * TXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 in all bit data modes except 9-bit
	 * RXB8 & TXB8 are used only in 9-bit data mode
	 ***********************************************************************/ 
	UCSRB = (UCSRB&0x3F)|(1<<RXEN) | (1<<TXEN);
    35d6:	aa e2       	ldi	r26, 0x2A	; 42
    35d8:	b0 e0       	ldi	r27, 0x00	; 0
    35da:	ea e2       	ldi	r30, 0x2A	; 42
    35dc:	f0 e0       	ldi	r31, 0x00	; 0
    35de:	80 81       	ld	r24, Z
    35e0:	87 72       	andi	r24, 0x27	; 39
    35e2:	88 61       	ori	r24, 0x18	; 24
    35e4:	8c 93       	st	X, r24
	if(Config_Ptr->bit_data==bit_9)
    35e6:	eb 81       	ldd	r30, Y+3	; 0x03
    35e8:	fc 81       	ldd	r31, Y+4	; 0x04
    35ea:	80 81       	ld	r24, Z
    35ec:	87 30       	cpi	r24, 0x07	; 7
    35ee:	39 f4       	brne	.+14     	; 0x35fe <UART_init+0x44>
		UCSRB|=(1<<UCSZ2);
    35f0:	aa e2       	ldi	r26, 0x2A	; 42
    35f2:	b0 e0       	ldi	r27, 0x00	; 0
    35f4:	ea e2       	ldi	r30, 0x2A	; 42
    35f6:	f0 e0       	ldi	r31, 0x00	; 0
    35f8:	80 81       	ld	r24, Z
    35fa:	84 60       	ori	r24, 0x04	; 4
    35fc:	8c 93       	st	X, r24
	 * UCSZ1:0 = Configurable by the user to control the bit data
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/


	UCSRC = (UCSRC&0x81)| (1<<URSEL) |(( Config_Ptr->parity)<<UPM0) | ((Config_Ptr->stop_bit)<<USBS);
    35fe:	a0 e4       	ldi	r26, 0x40	; 64
    3600:	b0 e0       	ldi	r27, 0x00	; 0
    3602:	e0 e4       	ldi	r30, 0x40	; 64
    3604:	f0 e0       	ldi	r31, 0x00	; 0
    3606:	80 81       	ld	r24, Z
    3608:	81 70       	andi	r24, 0x01	; 1
    360a:	28 2f       	mov	r18, r24
    360c:	20 68       	ori	r18, 0x80	; 128
    360e:	eb 81       	ldd	r30, Y+3	; 0x03
    3610:	fc 81       	ldd	r31, Y+4	; 0x04
    3612:	81 81       	ldd	r24, Z+1	; 0x01
    3614:	88 2f       	mov	r24, r24
    3616:	90 e0       	ldi	r25, 0x00	; 0
    3618:	82 95       	swap	r24
    361a:	92 95       	swap	r25
    361c:	90 7f       	andi	r25, 0xF0	; 240
    361e:	98 27       	eor	r25, r24
    3620:	80 7f       	andi	r24, 0xF0	; 240
    3622:	98 27       	eor	r25, r24
    3624:	28 2b       	or	r18, r24
    3626:	eb 81       	ldd	r30, Y+3	; 0x03
    3628:	fc 81       	ldd	r31, Y+4	; 0x04
    362a:	82 81       	ldd	r24, Z+2	; 0x02
    362c:	88 2f       	mov	r24, r24
    362e:	90 e0       	ldi	r25, 0x00	; 0
    3630:	88 0f       	add	r24, r24
    3632:	99 1f       	adc	r25, r25
    3634:	88 0f       	add	r24, r24
    3636:	99 1f       	adc	r25, r25
    3638:	88 0f       	add	r24, r24
    363a:	99 1f       	adc	r25, r25
    363c:	82 2b       	or	r24, r18
    363e:	8c 93       	st	X, r24

	if(Config_Ptr->bit_data==bit_9)
    3640:	eb 81       	ldd	r30, Y+3	; 0x03
    3642:	fc 81       	ldd	r31, Y+4	; 0x04
    3644:	80 81       	ld	r24, Z
    3646:	87 30       	cpi	r24, 0x07	; 7
    3648:	89 f4       	brne	.+34     	; 0x366c <UART_init+0xb2>
	{
		/* shift right so, third bit which must be assert at
		 * UCSZ2 dosen't affect bit3 in UCSRC which is stop bit that because UCSZ2 exist
		 * in different register UCSRB
		 */
		UCSRC |= (((Config_Ptr->bit_data)>>1)<<UCSZ0);
    364a:	a0 e4       	ldi	r26, 0x40	; 64
    364c:	b0 e0       	ldi	r27, 0x00	; 0
    364e:	e0 e4       	ldi	r30, 0x40	; 64
    3650:	f0 e0       	ldi	r31, 0x00	; 0
    3652:	80 81       	ld	r24, Z
    3654:	28 2f       	mov	r18, r24
    3656:	eb 81       	ldd	r30, Y+3	; 0x03
    3658:	fc 81       	ldd	r31, Y+4	; 0x04
    365a:	80 81       	ld	r24, Z
    365c:	86 95       	lsr	r24
    365e:	88 2f       	mov	r24, r24
    3660:	90 e0       	ldi	r25, 0x00	; 0
    3662:	88 0f       	add	r24, r24
    3664:	99 1f       	adc	r25, r25
    3666:	82 2b       	or	r24, r18
    3668:	8c 93       	st	X, r24
    366a:	0f c0       	rjmp	.+30     	; 0x368a <UART_init+0xd0>
	}
	else
	{
		UCSRC |= ((Config_Ptr->bit_data) << UCSZ0);
    366c:	a0 e4       	ldi	r26, 0x40	; 64
    366e:	b0 e0       	ldi	r27, 0x00	; 0
    3670:	e0 e4       	ldi	r30, 0x40	; 64
    3672:	f0 e0       	ldi	r31, 0x00	; 0
    3674:	80 81       	ld	r24, Z
    3676:	28 2f       	mov	r18, r24
    3678:	eb 81       	ldd	r30, Y+3	; 0x03
    367a:	fc 81       	ldd	r31, Y+4	; 0x04
    367c:	80 81       	ld	r24, Z
    367e:	88 2f       	mov	r24, r24
    3680:	90 e0       	ldi	r25, 0x00	; 0
    3682:	88 0f       	add	r24, r24
    3684:	99 1f       	adc	r25, r25
    3686:	82 2b       	or	r24, r18
    3688:	8c 93       	st	X, r24
	}

	
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / ((Config_Ptr->baud_rate) * 8UL))) - 1);
    368a:	eb 81       	ldd	r30, Y+3	; 0x03
    368c:	fc 81       	ldd	r31, Y+4	; 0x04
    368e:	83 81       	ldd	r24, Z+3	; 0x03
    3690:	94 81       	ldd	r25, Z+4	; 0x04
    3692:	cc 01       	movw	r24, r24
    3694:	a0 e0       	ldi	r26, 0x00	; 0
    3696:	b0 e0       	ldi	r27, 0x00	; 0
    3698:	88 0f       	add	r24, r24
    369a:	99 1f       	adc	r25, r25
    369c:	aa 1f       	adc	r26, r26
    369e:	bb 1f       	adc	r27, r27
    36a0:	88 0f       	add	r24, r24
    36a2:	99 1f       	adc	r25, r25
    36a4:	aa 1f       	adc	r26, r26
    36a6:	bb 1f       	adc	r27, r27
    36a8:	88 0f       	add	r24, r24
    36aa:	99 1f       	adc	r25, r25
    36ac:	aa 1f       	adc	r26, r26
    36ae:	bb 1f       	adc	r27, r27
    36b0:	9c 01       	movw	r18, r24
    36b2:	ad 01       	movw	r20, r26
    36b4:	80 e0       	ldi	r24, 0x00	; 0
    36b6:	92 e1       	ldi	r25, 0x12	; 18
    36b8:	aa e7       	ldi	r26, 0x7A	; 122
    36ba:	b0 e0       	ldi	r27, 0x00	; 0
    36bc:	bc 01       	movw	r22, r24
    36be:	cd 01       	movw	r24, r26
    36c0:	0e 94 0b 1c 	call	0x3816	; 0x3816 <__udivmodsi4>
    36c4:	da 01       	movw	r26, r20
    36c6:	c9 01       	movw	r24, r18
    36c8:	01 97       	sbiw	r24, 0x01	; 1
    36ca:	9a 83       	std	Y+2, r25	; 0x02
    36cc:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    36ce:	e0 e4       	ldi	r30, 0x40	; 64
    36d0:	f0 e0       	ldi	r31, 0x00	; 0
    36d2:	89 81       	ldd	r24, Y+1	; 0x01
    36d4:	9a 81       	ldd	r25, Y+2	; 0x02
    36d6:	89 2f       	mov	r24, r25
    36d8:	99 27       	eor	r25, r25
    36da:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    36dc:	e9 e2       	ldi	r30, 0x29	; 41
    36de:	f0 e0       	ldi	r31, 0x00	; 0
    36e0:	89 81       	ldd	r24, Y+1	; 0x01
    36e2:	80 83       	st	Z, r24
}
    36e4:	0f 90       	pop	r0
    36e6:	0f 90       	pop	r0
    36e8:	0f 90       	pop	r0
    36ea:	0f 90       	pop	r0
    36ec:	cf 91       	pop	r28
    36ee:	df 91       	pop	r29
    36f0:	08 95       	ret

000036f2 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    36f2:	df 93       	push	r29
    36f4:	cf 93       	push	r28
    36f6:	0f 92       	push	r0
    36f8:	cd b7       	in	r28, 0x3d	; 61
    36fa:	de b7       	in	r29, 0x3e	; 62
    36fc:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    36fe:	eb e2       	ldi	r30, 0x2B	; 43
    3700:	f0 e0       	ldi	r31, 0x00	; 0
    3702:	80 81       	ld	r24, Z
    3704:	88 2f       	mov	r24, r24
    3706:	90 e0       	ldi	r25, 0x00	; 0
    3708:	80 72       	andi	r24, 0x20	; 32
    370a:	90 70       	andi	r25, 0x00	; 0
    370c:	00 97       	sbiw	r24, 0x00	; 0
    370e:	b9 f3       	breq	.-18     	; 0x36fe <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    3710:	ec e2       	ldi	r30, 0x2C	; 44
    3712:	f0 e0       	ldi	r31, 0x00	; 0
    3714:	89 81       	ldd	r24, Y+1	; 0x01
    3716:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    3718:	0f 90       	pop	r0
    371a:	cf 91       	pop	r28
    371c:	df 91       	pop	r29
    371e:	08 95       	ret

00003720 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    3720:	df 93       	push	r29
    3722:	cf 93       	push	r28
    3724:	cd b7       	in	r28, 0x3d	; 61
    3726:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    3728:	eb e2       	ldi	r30, 0x2B	; 43
    372a:	f0 e0       	ldi	r31, 0x00	; 0
    372c:	80 81       	ld	r24, Z
    372e:	88 23       	and	r24, r24
    3730:	dc f7       	brge	.-10     	; 0x3728 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    3732:	ec e2       	ldi	r30, 0x2C	; 44
    3734:	f0 e0       	ldi	r31, 0x00	; 0
    3736:	80 81       	ld	r24, Z
}
    3738:	cf 91       	pop	r28
    373a:	df 91       	pop	r29
    373c:	08 95       	ret

0000373e <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    373e:	df 93       	push	r29
    3740:	cf 93       	push	r28
    3742:	00 d0       	rcall	.+0      	; 0x3744 <UART_sendString+0x6>
    3744:	0f 92       	push	r0
    3746:	cd b7       	in	r28, 0x3d	; 61
    3748:	de b7       	in	r29, 0x3e	; 62
    374a:	9b 83       	std	Y+3, r25	; 0x03
    374c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    374e:	19 82       	std	Y+1, r1	; 0x01
    3750:	0e c0       	rjmp	.+28     	; 0x376e <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    3752:	89 81       	ldd	r24, Y+1	; 0x01
    3754:	28 2f       	mov	r18, r24
    3756:	30 e0       	ldi	r19, 0x00	; 0
    3758:	8a 81       	ldd	r24, Y+2	; 0x02
    375a:	9b 81       	ldd	r25, Y+3	; 0x03
    375c:	fc 01       	movw	r30, r24
    375e:	e2 0f       	add	r30, r18
    3760:	f3 1f       	adc	r31, r19
    3762:	80 81       	ld	r24, Z
    3764:	0e 94 79 1b 	call	0x36f2	; 0x36f2 <UART_sendByte>
		i++;
    3768:	89 81       	ldd	r24, Y+1	; 0x01
    376a:	8f 5f       	subi	r24, 0xFF	; 255
    376c:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    376e:	89 81       	ldd	r24, Y+1	; 0x01
    3770:	28 2f       	mov	r18, r24
    3772:	30 e0       	ldi	r19, 0x00	; 0
    3774:	8a 81       	ldd	r24, Y+2	; 0x02
    3776:	9b 81       	ldd	r25, Y+3	; 0x03
    3778:	fc 01       	movw	r30, r24
    377a:	e2 0f       	add	r30, r18
    377c:	f3 1f       	adc	r31, r19
    377e:	80 81       	ld	r24, Z
    3780:	88 23       	and	r24, r24
    3782:	39 f7       	brne	.-50     	; 0x3752 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    3784:	0f 90       	pop	r0
    3786:	0f 90       	pop	r0
    3788:	0f 90       	pop	r0
    378a:	cf 91       	pop	r28
    378c:	df 91       	pop	r29
    378e:	08 95       	ret

00003790 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    3790:	0f 93       	push	r16
    3792:	1f 93       	push	r17
    3794:	df 93       	push	r29
    3796:	cf 93       	push	r28
    3798:	00 d0       	rcall	.+0      	; 0x379a <UART_receiveString+0xa>
    379a:	0f 92       	push	r0
    379c:	cd b7       	in	r28, 0x3d	; 61
    379e:	de b7       	in	r29, 0x3e	; 62
    37a0:	9b 83       	std	Y+3, r25	; 0x03
    37a2:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    37a4:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    37a6:	89 81       	ldd	r24, Y+1	; 0x01
    37a8:	28 2f       	mov	r18, r24
    37aa:	30 e0       	ldi	r19, 0x00	; 0
    37ac:	8a 81       	ldd	r24, Y+2	; 0x02
    37ae:	9b 81       	ldd	r25, Y+3	; 0x03
    37b0:	8c 01       	movw	r16, r24
    37b2:	02 0f       	add	r16, r18
    37b4:	13 1f       	adc	r17, r19
    37b6:	0e 94 90 1b 	call	0x3720	; 0x3720 <UART_recieveByte>
    37ba:	f8 01       	movw	r30, r16
    37bc:	80 83       	st	Z, r24
    37be:	0f c0       	rjmp	.+30     	; 0x37de <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    37c0:	89 81       	ldd	r24, Y+1	; 0x01
    37c2:	8f 5f       	subi	r24, 0xFF	; 255
    37c4:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    37c6:	89 81       	ldd	r24, Y+1	; 0x01
    37c8:	28 2f       	mov	r18, r24
    37ca:	30 e0       	ldi	r19, 0x00	; 0
    37cc:	8a 81       	ldd	r24, Y+2	; 0x02
    37ce:	9b 81       	ldd	r25, Y+3	; 0x03
    37d0:	8c 01       	movw	r16, r24
    37d2:	02 0f       	add	r16, r18
    37d4:	13 1f       	adc	r17, r19
    37d6:	0e 94 90 1b 	call	0x3720	; 0x3720 <UART_recieveByte>
    37da:	f8 01       	movw	r30, r16
    37dc:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    37de:	89 81       	ldd	r24, Y+1	; 0x01
    37e0:	28 2f       	mov	r18, r24
    37e2:	30 e0       	ldi	r19, 0x00	; 0
    37e4:	8a 81       	ldd	r24, Y+2	; 0x02
    37e6:	9b 81       	ldd	r25, Y+3	; 0x03
    37e8:	fc 01       	movw	r30, r24
    37ea:	e2 0f       	add	r30, r18
    37ec:	f3 1f       	adc	r31, r19
    37ee:	80 81       	ld	r24, Z
    37f0:	83 32       	cpi	r24, 0x23	; 35
    37f2:	31 f7       	brne	.-52     	; 0x37c0 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    37f4:	89 81       	ldd	r24, Y+1	; 0x01
    37f6:	28 2f       	mov	r18, r24
    37f8:	30 e0       	ldi	r19, 0x00	; 0
    37fa:	8a 81       	ldd	r24, Y+2	; 0x02
    37fc:	9b 81       	ldd	r25, Y+3	; 0x03
    37fe:	fc 01       	movw	r30, r24
    3800:	e2 0f       	add	r30, r18
    3802:	f3 1f       	adc	r31, r19
    3804:	10 82       	st	Z, r1
}
    3806:	0f 90       	pop	r0
    3808:	0f 90       	pop	r0
    380a:	0f 90       	pop	r0
    380c:	cf 91       	pop	r28
    380e:	df 91       	pop	r29
    3810:	1f 91       	pop	r17
    3812:	0f 91       	pop	r16
    3814:	08 95       	ret

00003816 <__udivmodsi4>:
    3816:	a1 e2       	ldi	r26, 0x21	; 33
    3818:	1a 2e       	mov	r1, r26
    381a:	aa 1b       	sub	r26, r26
    381c:	bb 1b       	sub	r27, r27
    381e:	fd 01       	movw	r30, r26
    3820:	0d c0       	rjmp	.+26     	; 0x383c <__udivmodsi4_ep>

00003822 <__udivmodsi4_loop>:
    3822:	aa 1f       	adc	r26, r26
    3824:	bb 1f       	adc	r27, r27
    3826:	ee 1f       	adc	r30, r30
    3828:	ff 1f       	adc	r31, r31
    382a:	a2 17       	cp	r26, r18
    382c:	b3 07       	cpc	r27, r19
    382e:	e4 07       	cpc	r30, r20
    3830:	f5 07       	cpc	r31, r21
    3832:	20 f0       	brcs	.+8      	; 0x383c <__udivmodsi4_ep>
    3834:	a2 1b       	sub	r26, r18
    3836:	b3 0b       	sbc	r27, r19
    3838:	e4 0b       	sbc	r30, r20
    383a:	f5 0b       	sbc	r31, r21

0000383c <__udivmodsi4_ep>:
    383c:	66 1f       	adc	r22, r22
    383e:	77 1f       	adc	r23, r23
    3840:	88 1f       	adc	r24, r24
    3842:	99 1f       	adc	r25, r25
    3844:	1a 94       	dec	r1
    3846:	69 f7       	brne	.-38     	; 0x3822 <__udivmodsi4_loop>
    3848:	60 95       	com	r22
    384a:	70 95       	com	r23
    384c:	80 95       	com	r24
    384e:	90 95       	com	r25
    3850:	9b 01       	movw	r18, r22
    3852:	ac 01       	movw	r20, r24
    3854:	bd 01       	movw	r22, r26
    3856:	cf 01       	movw	r24, r30
    3858:	08 95       	ret

0000385a <__prologue_saves__>:
    385a:	2f 92       	push	r2
    385c:	3f 92       	push	r3
    385e:	4f 92       	push	r4
    3860:	5f 92       	push	r5
    3862:	6f 92       	push	r6
    3864:	7f 92       	push	r7
    3866:	8f 92       	push	r8
    3868:	9f 92       	push	r9
    386a:	af 92       	push	r10
    386c:	bf 92       	push	r11
    386e:	cf 92       	push	r12
    3870:	df 92       	push	r13
    3872:	ef 92       	push	r14
    3874:	ff 92       	push	r15
    3876:	0f 93       	push	r16
    3878:	1f 93       	push	r17
    387a:	cf 93       	push	r28
    387c:	df 93       	push	r29
    387e:	cd b7       	in	r28, 0x3d	; 61
    3880:	de b7       	in	r29, 0x3e	; 62
    3882:	ca 1b       	sub	r28, r26
    3884:	db 0b       	sbc	r29, r27
    3886:	0f b6       	in	r0, 0x3f	; 63
    3888:	f8 94       	cli
    388a:	de bf       	out	0x3e, r29	; 62
    388c:	0f be       	out	0x3f, r0	; 63
    388e:	cd bf       	out	0x3d, r28	; 61
    3890:	09 94       	ijmp

00003892 <__epilogue_restores__>:
    3892:	2a 88       	ldd	r2, Y+18	; 0x12
    3894:	39 88       	ldd	r3, Y+17	; 0x11
    3896:	48 88       	ldd	r4, Y+16	; 0x10
    3898:	5f 84       	ldd	r5, Y+15	; 0x0f
    389a:	6e 84       	ldd	r6, Y+14	; 0x0e
    389c:	7d 84       	ldd	r7, Y+13	; 0x0d
    389e:	8c 84       	ldd	r8, Y+12	; 0x0c
    38a0:	9b 84       	ldd	r9, Y+11	; 0x0b
    38a2:	aa 84       	ldd	r10, Y+10	; 0x0a
    38a4:	b9 84       	ldd	r11, Y+9	; 0x09
    38a6:	c8 84       	ldd	r12, Y+8	; 0x08
    38a8:	df 80       	ldd	r13, Y+7	; 0x07
    38aa:	ee 80       	ldd	r14, Y+6	; 0x06
    38ac:	fd 80       	ldd	r15, Y+5	; 0x05
    38ae:	0c 81       	ldd	r16, Y+4	; 0x04
    38b0:	1b 81       	ldd	r17, Y+3	; 0x03
    38b2:	aa 81       	ldd	r26, Y+2	; 0x02
    38b4:	b9 81       	ldd	r27, Y+1	; 0x01
    38b6:	ce 0f       	add	r28, r30
    38b8:	d1 1d       	adc	r29, r1
    38ba:	0f b6       	in	r0, 0x3f	; 63
    38bc:	f8 94       	cli
    38be:	de bf       	out	0x3e, r29	; 62
    38c0:	0f be       	out	0x3f, r0	; 63
    38c2:	cd bf       	out	0x3d, r28	; 61
    38c4:	ed 01       	movw	r28, r26
    38c6:	08 95       	ret

000038c8 <itoa>:
    38c8:	fb 01       	movw	r30, r22
    38ca:	9f 01       	movw	r18, r30
    38cc:	e8 94       	clt
    38ce:	42 30       	cpi	r20, 0x02	; 2
    38d0:	c4 f0       	brlt	.+48     	; 0x3902 <itoa+0x3a>
    38d2:	45 32       	cpi	r20, 0x25	; 37
    38d4:	b4 f4       	brge	.+44     	; 0x3902 <itoa+0x3a>
    38d6:	4a 30       	cpi	r20, 0x0A	; 10
    38d8:	29 f4       	brne	.+10     	; 0x38e4 <itoa+0x1c>
    38da:	97 fb       	bst	r25, 7
    38dc:	1e f4       	brtc	.+6      	; 0x38e4 <itoa+0x1c>
    38de:	90 95       	com	r25
    38e0:	81 95       	neg	r24
    38e2:	9f 4f       	sbci	r25, 0xFF	; 255
    38e4:	64 2f       	mov	r22, r20
    38e6:	77 27       	eor	r23, r23
    38e8:	0e 94 95 1c 	call	0x392a	; 0x392a <__udivmodhi4>
    38ec:	80 5d       	subi	r24, 0xD0	; 208
    38ee:	8a 33       	cpi	r24, 0x3A	; 58
    38f0:	0c f0       	brlt	.+2      	; 0x38f4 <itoa+0x2c>
    38f2:	89 5d       	subi	r24, 0xD9	; 217
    38f4:	81 93       	st	Z+, r24
    38f6:	cb 01       	movw	r24, r22
    38f8:	00 97       	sbiw	r24, 0x00	; 0
    38fa:	a1 f7       	brne	.-24     	; 0x38e4 <itoa+0x1c>
    38fc:	16 f4       	brtc	.+4      	; 0x3902 <itoa+0x3a>
    38fe:	5d e2       	ldi	r21, 0x2D	; 45
    3900:	51 93       	st	Z+, r21
    3902:	10 82       	st	Z, r1
    3904:	c9 01       	movw	r24, r18
    3906:	0c 94 85 1c 	jmp	0x390a	; 0x390a <strrev>

0000390a <strrev>:
    390a:	dc 01       	movw	r26, r24
    390c:	fc 01       	movw	r30, r24
    390e:	67 2f       	mov	r22, r23
    3910:	71 91       	ld	r23, Z+
    3912:	77 23       	and	r23, r23
    3914:	e1 f7       	brne	.-8      	; 0x390e <strrev+0x4>
    3916:	32 97       	sbiw	r30, 0x02	; 2
    3918:	04 c0       	rjmp	.+8      	; 0x3922 <strrev+0x18>
    391a:	7c 91       	ld	r23, X
    391c:	6d 93       	st	X+, r22
    391e:	70 83       	st	Z, r23
    3920:	62 91       	ld	r22, -Z
    3922:	ae 17       	cp	r26, r30
    3924:	bf 07       	cpc	r27, r31
    3926:	c8 f3       	brcs	.-14     	; 0x391a <strrev+0x10>
    3928:	08 95       	ret

0000392a <__udivmodhi4>:
    392a:	aa 1b       	sub	r26, r26
    392c:	bb 1b       	sub	r27, r27
    392e:	51 e1       	ldi	r21, 0x11	; 17
    3930:	07 c0       	rjmp	.+14     	; 0x3940 <__udivmodhi4_ep>

00003932 <__udivmodhi4_loop>:
    3932:	aa 1f       	adc	r26, r26
    3934:	bb 1f       	adc	r27, r27
    3936:	a6 17       	cp	r26, r22
    3938:	b7 07       	cpc	r27, r23
    393a:	10 f0       	brcs	.+4      	; 0x3940 <__udivmodhi4_ep>
    393c:	a6 1b       	sub	r26, r22
    393e:	b7 0b       	sbc	r27, r23

00003940 <__udivmodhi4_ep>:
    3940:	88 1f       	adc	r24, r24
    3942:	99 1f       	adc	r25, r25
    3944:	5a 95       	dec	r21
    3946:	a9 f7       	brne	.-22     	; 0x3932 <__udivmodhi4_loop>
    3948:	80 95       	com	r24
    394a:	90 95       	com	r25
    394c:	bc 01       	movw	r22, r24
    394e:	cd 01       	movw	r24, r26
    3950:	08 95       	ret

00003952 <_exit>:
    3952:	f8 94       	cli

00003954 <__stop_program>:
    3954:	ff cf       	rjmp	.-2      	; 0x3954 <__stop_program>
